/**********************************************************************************************************************/
/** \addtogroup Common
 * @{
 **********************************************************************************************************************/

/**********************************************************************************************************************/
/** This file contains functions declaration for FIFO queue functionality
 ***********************************************************************************************************************
 *
 * @file
 *
 **********************************************************************************************************************/

#ifndef __QUEUE_H__
#define __QUEUE_H__

// forward declaration
struct TQueueElement;

/**********************************************************************************************************************/
/** Use this function to add an element at the end of the queue.
 **********************************************************************************************************************/
void Queue_Push(
  struct TQueueElement *pQueueRoot,
  struct TQueueElement *pQueueElement
  );

/**********************************************************************************************************************/
/** Use this function to remove the first element from the queue. If no element in the queue, returns NULL
 **********************************************************************************************************************/
struct TQueueElement *Queue_Pop(
  struct TQueueElement *pQueueRoot
  );

/**********************************************************************************************************************/
/** Defines the internal representation of the queue element
 **********************************************************************************************************************/
struct TQueueElement {
  struct TQueueElement *m_pNext; // pointer to next element in the queue (private member)
  void *m_pUserData;    // pointer to user data
  uint8_t m_u8DataType; // information about data type (optional information if needed)
};

#endif

/**********************************************************************************************************************/
/** @}
 **********************************************************************************************************************/
