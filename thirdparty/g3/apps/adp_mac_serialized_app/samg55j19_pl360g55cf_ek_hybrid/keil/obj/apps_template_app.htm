<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\apps_template_app.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\apps_template_app.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Jan 16 09:32:18 2023
<BR><P>
<H3>Maximum Stack Usage =       3944 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
adp_mac_serial_if_process &rArr; AdpEventHandler &rArr; AdpMac_EventHandler &rArr; _ProcessMacNotifications &rArr; ADP_ProcessIncomingMessage &rArr; BootstrapWrapper_ProcessMessage &rArr; LBP_ProcessMessage &rArr; _Join_Process_Challenge &rArr; _Join_Process_Challenge_ThirdMessage &rArr; _ProcessParameters &rArr; AdpSetRequestSync &rArr; AdpSetMib &rArr; BootstrapWrapper_InitEapPsk &rArr; LBP_InitEapPsk &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2d8]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[18]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">NMI_Handler</a><BR>
 <LI><a href="#[19]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">HardFault_Handler</a><BR>
 <LI><a href="#[1a]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">MemManage_Handler</a><BR>
 <LI><a href="#[1b]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">BusFault_Handler</a><BR>
 <LI><a href="#[1c]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">UsageFault_Handler</a><BR>
 <LI><a href="#[1d]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">SVC_Handler</a><BR>
 <LI><a href="#[1e]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">DebugMon_Handler</a><BR>
 <LI><a href="#[1f]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">PendSV_Handler</a><BR>
 <LI><a href="#[20]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">SysTick_Handler</a><BR>
 <LI><a href="#[3e]">ARM_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">ARM_Handler</a><BR>
 <LI><a href="#[42c]">gcm_mask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40a]">mbedtls_cipher_update</a><BR>
 <LI><a href="#[19d]">_ProcessMessage</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19d]">_ProcessMessage</a><BR>
 <LI><a href="#[188]">_RREQRERRWait_FindEmptyQueueSlot</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18b]">_GenerateRouteError</a><BR>
 <LI><a href="#[186]">_DiscoverRoute</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[188]">_RREQRERRWait_FindEmptyQueueSlot</a><BR>
 <LI><a href="#[1b4]">LOADNG_SetMib</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b2]">AdpSetRequestSync</a><BR>
 <LI><a href="#[2a1]">_Decompress_NextHeaders</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a1]">_Decompress_NextHeaders</a><BR>
 <LI><a href="#[46c]">portable_delay_cycles</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46c]">portable_delay_cycles</a><BR>
 <LI><a href="#[4c9]">udi_cdc_multi_read_buf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c5]">udi_cdc_rx_start</a><BR>
 <LI><a href="#[140]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[140]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3d]">ADC_Handler</a> from adc2.o(i.ADC_Handler) referenced from startup_samg55.o(RESET)
 <LI><a href="#[3e]">ARM_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[cd]">AdpNotification_AdpdDataIndication</a> from serial_if_adp.o(i.AdpNotification_AdpdDataIndication) referenced from serial_if_adp.o(i.serial_if_adp_get_notifications)
 <LI><a href="#[de]">AdpNotification_BufferIndication</a> from serial_if_adp.o(i.AdpNotification_BufferIndication) referenced from serial_if_adp.o(i.serial_if_adp_get_notifications)
 <LI><a href="#[cc]">AdpNotification_DataConfirm</a> from serial_if_adp.o(i.AdpNotification_DataConfirm) referenced from serial_if_adp.o(i.serial_if_adp_get_notifications)
 <LI><a href="#[ce]">AdpNotification_DiscoveryConfirm</a> from serial_if_adp.o(i.AdpNotification_DiscoveryConfirm) referenced from serial_if_adp.o(i.serial_if_adp_get_notifications)
 <LI><a href="#[cf]">AdpNotification_DiscoveryIndication</a> from serial_if_adp.o(i.AdpNotification_DiscoveryIndication) referenced from serial_if_adp.o(i.serial_if_adp_get_notifications)
 <LI><a href="#[d7]">AdpNotification_GetConfirm</a> from serial_if_adp.o(i.AdpNotification_GetConfirm) referenced from serial_if_adp.o(i.serial_if_adp_get_notifications)
 <LI><a href="#[d8]">AdpNotification_GetMacConfirm</a> from serial_if_adp.o(i.AdpNotification_GetMacConfirm) referenced from serial_if_adp.o(i.serial_if_adp_get_notifications)
 <LI><a href="#[c0]">AdpNotification_LbpConfirm</a> from bs_main.o(i.AdpNotification_LbpConfirm) referenced from bs_main.o(i.bs_get_not_handlers)
 <LI><a href="#[d9]">AdpNotification_LbpConfirm</a> from serial_if_adp.o(i.AdpNotification_LbpConfirm) referenced from serial_if_adp.o(i.serial_if_adp_get_notifications)
 <LI><a href="#[c1]">AdpNotification_LbpIndication</a> from bs_main.o(i.AdpNotification_LbpIndication) referenced from bs_main.o(i.bs_get_not_handlers)
 <LI><a href="#[da]">AdpNotification_LbpIndication</a> from serial_if_adp.o(i.AdpNotification_LbpIndication) referenced from serial_if_adp.o(i.serial_if_adp_get_notifications)
 <LI><a href="#[d1]">AdpNotification_NetworkJoinConfirm</a> from serial_if_adp.o(i.AdpNotification_NetworkJoinConfirm) referenced from serial_if_adp.o(i.serial_if_adp_get_notifications)
 <LI><a href="#[d3]">AdpNotification_NetworkLeaveConfirm</a> from serial_if_adp.o(i.AdpNotification_NetworkLeaveConfirm) referenced from serial_if_adp.o(i.serial_if_adp_get_notifications)
 <LI><a href="#[d2]">AdpNotification_NetworkLeaveIndication</a> from serial_if_adp.o(i.AdpNotification_NetworkLeaveIndication) referenced from serial_if_adp.o(i.serial_if_adp_get_notifications)
 <LI><a href="#[d0]">AdpNotification_NetworkStartConfirm</a> from serial_if_adp.o(i.AdpNotification_NetworkStartConfirm) referenced from serial_if_adp.o(i.serial_if_adp_get_notifications)
 <LI><a href="#[dd]">AdpNotification_NetworkStatusIndication</a> from serial_if_adp.o(i.AdpNotification_NetworkStatusIndication) referenced from serial_if_adp.o(i.serial_if_adp_get_notifications)
 <LI><a href="#[dc]">AdpNotification_PathDiscoveryConfirm</a> from serial_if_adp.o(i.AdpNotification_PathDiscoveryConfirm) referenced from serial_if_adp.o(i.serial_if_adp_get_notifications)
 <LI><a href="#[d4]">AdpNotification_ResetConfirm</a> from serial_if_adp.o(i.AdpNotification_ResetConfirm) referenced from serial_if_adp.o(i.serial_if_adp_get_notifications)
 <LI><a href="#[db]">AdpNotification_RouteDiscoveryConfirm</a> from serial_if_adp.o(i.AdpNotification_RouteDiscoveryConfirm) referenced from serial_if_adp.o(i.serial_if_adp_get_notifications)
 <LI><a href="#[d5]">AdpNotification_SetConfirm</a> from serial_if_adp.o(i.AdpNotification_SetConfirm) referenced from serial_if_adp.o(i.serial_if_adp_get_notifications)
 <LI><a href="#[d6]">AdpNotification_SetMacConfirm</a> from serial_if_adp.o(i.AdpNotification_SetMacConfirm) referenced from serial_if_adp.o(i.serial_if_adp_get_notifications)
 <LI><a href="#[df]">AppAdpNotification_PREQIndication</a> from serial_if_adp.o(i.AppAdpNotification_PREQIndication) referenced from serial_if_adp.o(i.serial_if_adp_get_notifications)
 <LI><a href="#[e1]">AppAdpNotification_RouteNotFoundIndication</a> from serial_if_adp.o(i.AppAdpNotification_RouteNotFoundIndication) referenced from serial_if_adp.o(i.serial_if_adp_get_notifications)
 <LI><a href="#[e0]">AppAdpNotification_UpdNonVolatileDataIndication</a> from serial_if_adp.o(i.AppAdpNotification_UpdNonVolatileDataIndication) referenced from serial_if_adp.o(i.serial_if_adp_get_notifications)
 <LI><a href="#[e2]">BootstrapNotification_JoinIndication</a> from serial_if_coordinator.o(i.BootstrapNotification_JoinIndication) referenced from serial_if_coordinator.o(i.serial_if_coordinator_api_parser)
 <LI><a href="#[e3]">BootstrapNotification_LeaveIndication</a> from serial_if_coordinator.o(i.BootstrapNotification_LeaveIndication) referenced from serial_if_coordinator.o(i.serial_if_coordinator_api_parser)
 <LI><a href="#[1b]">BusFault_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[41]">CRCCU_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[1e]">DebugMon_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[27]">EFC_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[29]">FLEXCOM0_Handler</a> from prf_if.o(i.FLEXCOM0_Handler) referenced from startup_samg55.o(RESET)
 <LI><a href="#[2a]">FLEXCOM1_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[2e]">FLEXCOM2_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[33]">FLEXCOM3_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[34]">FLEXCOM4_Handler</a> from busart_if.o(i.FLEXCOM4_Handler) referenced from startup_samg55.o(RESET)
 <LI><a href="#[35]">FLEXCOM5_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[36]">FLEXCOM6_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[28]">FLEXCOM7_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[19]">HardFault_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[30]">I2SC0_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[31]">I2SC1_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[4e]">LoWPAN_DataSend_Callback</a> from proto6lowpan.o(.text) referenced from adp.o(.text)
 <LI><a href="#[2f]">MEM2MEM_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[e9]">MacNotification_BeaconNotify</a> from serial_if_mac.o(i.MacNotification_BeaconNotify) referenced from serial_if_mac.o(i.serial_if_g3mac_api_parser)
 <LI><a href="#[f3]">MacNotification_BeaconNotifyRF</a> from serial_if_mac.o(i.MacNotification_BeaconNotifyRF) referenced from serial_if_mac.o(i.serial_if_g3mac_api_parser)
 <LI><a href="#[ec]">MacNotification_CommStatusIndication</a> from serial_if_mac.o(i.MacNotification_CommStatusIndication) referenced from serial_if_mac.o(i.serial_if_g3mac_api_parser)
 <LI><a href="#[f6]">MacNotification_CommStatusIndicationRF</a> from serial_if_mac.o(i.MacNotification_CommStatusIndicationRF) referenced from serial_if_mac.o(i.serial_if_g3mac_api_parser)
 <LI><a href="#[e4]">MacNotification_DataConfirm</a> from serial_if_mac.o(i.MacNotification_DataConfirm) referenced from serial_if_mac.o(i.serial_if_g3mac_api_parser)
 <LI><a href="#[ee]">MacNotification_DataConfirmRF</a> from serial_if_mac.o(i.MacNotification_DataConfirmRF) referenced from serial_if_mac.o(i.serial_if_g3mac_api_parser)
 <LI><a href="#[e5]">MacNotification_DataIndication</a> from serial_if_mac.o(i.MacNotification_DataIndication) referenced from serial_if_mac.o(i.serial_if_g3mac_api_parser)
 <LI><a href="#[ef]">MacNotification_DataIndicationRF</a> from serial_if_mac.o(i.MacNotification_DataIndicationRF) referenced from serial_if_mac.o(i.serial_if_g3mac_api_parser)
 <LI><a href="#[e6]">MacNotification_GetConfirm</a> from serial_if_mac.o(i.MacNotification_GetConfirm) referenced from serial_if_mac.o(i.serial_if_g3mac_api_parser)
 <LI><a href="#[f0]">MacNotification_GetConfirmRF</a> from serial_if_mac.o(i.MacNotification_GetConfirmRF) referenced from serial_if_mac.o(i.serial_if_g3mac_api_parser)
 <LI><a href="#[ed]">MacNotification_MacSnifferIndication</a> from serial_if_mac.o(i.MacNotification_MacSnifferIndication) referenced from serial_if_mac.o(i.serial_if_g3mac_api_parser)
 <LI><a href="#[f7]">MacNotification_MacSnifferIndicationRF</a> from serial_if_mac.o(i.MacNotification_MacSnifferIndicationRF) referenced from serial_if_mac.o(i.serial_if_g3mac_api_parser)
 <LI><a href="#[e8]">MacNotification_ResetConfirm</a> from serial_if_mac.o(i.MacNotification_ResetConfirm) referenced from serial_if_mac.o(i.serial_if_g3mac_api_parser)
 <LI><a href="#[f2]">MacNotification_ResetConfirmRF</a> from serial_if_mac.o(i.MacNotification_ResetConfirmRF) referenced from serial_if_mac.o(i.serial_if_g3mac_api_parser)
 <LI><a href="#[ea]">MacNotification_ScanConfirm</a> from serial_if_mac.o(i.MacNotification_ScanConfirm) referenced from serial_if_mac.o(i.serial_if_g3mac_api_parser)
 <LI><a href="#[f4]">MacNotification_ScanConfirmRF</a> from serial_if_mac.o(i.MacNotification_ScanConfirmRF) referenced from serial_if_mac.o(i.serial_if_g3mac_api_parser)
 <LI><a href="#[e7]">MacNotification_SetConfirm</a> from serial_if_mac.o(i.MacNotification_SetConfirm) referenced from serial_if_mac.o(i.serial_if_g3mac_api_parser)
 <LI><a href="#[f1]">MacNotification_SetConfirmRF</a> from serial_if_mac.o(i.MacNotification_SetConfirmRF) referenced from serial_if_mac.o(i.serial_if_g3mac_api_parser)
 <LI><a href="#[eb]">MacNotification_StartConfirm</a> from serial_if_mac.o(i.MacNotification_StartConfirm) referenced from serial_if_mac.o(i.serial_if_g3mac_api_parser)
 <LI><a href="#[f5]">MacNotification_StartConfirmRF</a> from serial_if_mac.o(i.MacNotification_StartConfirmRF) referenced from serial_if_mac.o(i.serial_if_g3mac_api_parser)
 <LI><a href="#[14]">MacRtCbPlmeGetConfirm</a> from maclow.o(.text) referenced 2 times from maclow.o(.data)
 <LI><a href="#[12]">MacRtCbProcessFrame</a> from maclow.o(.text) referenced 2 times from maclow.o(.data)
 <LI><a href="#[13]">MacRtCbTxConfirm</a> from maclow.o(.text) referenced 2 times from maclow.o(.data)
 <LI><a href="#[1a]">MemManage_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[18]">NMI_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[23f]">Network_Join_Confirm</a> from adpnetwork.o(.text) referenced 2 times from adpnetwork.o(.text)
 <LI><a href="#[244]">Network_Kick_Notify</a> from adpnetwork.o(.text) referenced 2 times from adpnetwork.o(.text)
 <LI><a href="#[248]">Network_Leave_Callback</a> from adpnetwork.o(.text) referenced from adpnetwork.o(.text)
 <LI><a href="#[2d]">PDMIC0_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[32]">PDMIC1_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[2b]">PIOA_Handler</a> from pio_handler.o(i.PIOA_Handler) referenced from startup_samg55.o(RESET)
 <LI><a href="#[2c]">PIOB_Handler</a> from pio_handler.o(i.PIOB_Handler) referenced from startup_samg55.o(RESET)
 <LI><a href="#[26]">PMC_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[15]">PalRFCbDataConfirm</a> from macrflow.o(.text) referenced 2 times from macrflow.o(.data)
 <LI><a href="#[16]">PalRFCbDataIndication</a> from macrflow.o(.text) referenced 2 times from macrflow.o(.data)
 <LI><a href="#[1f]">PendSV_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[22]">RSTC_Handler</a> from hal.o(i.RSTC_Handler) referenced from startup_samg55.o(RESET)
 <LI><a href="#[23]">RTC_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[24]">RTT_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[17]">Reset_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[21]">SUPC_Handler</a> from hal.o(i.SUPC_Handler) referenced from startup_samg55.o(RESET)
 <LI><a href="#[1d]">SVC_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[20]">SysTick_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[42]">SystemInit</a> from system_samg55.o(i.SystemInit) referenced from startup_samg55.o(.text)
 <LI><a href="#[37]">TC0_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[38]">TC1_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[39]">TC2_Handler</a> from timer_1us.o(i.TC2_Handler) referenced from startup_samg55.o(RESET)
 <LI><a href="#[3a]">TC3_Handler</a> from hal.o(i.TC3_Handler) referenced from startup_samg55.o(RESET)
 <LI><a href="#[3b]">TC4_Handler</a> from busart_if.o(i.TC4_Handler) referenced from startup_samg55.o(RESET)
 <LI><a href="#[3c]">TC5_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[40]">UDP_Handler</a> from udp_device.o(i.UDP_Handler) referenced from startup_samg55.o(RESET)
 <LI><a href="#[3f]">UHP_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[1c]">UsageFault_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[25]">WDT_Handler</a> from startup_samg55.o(.text) referenced from startup_samg55.o(RESET)
 <LI><a href="#[61]">_Callback_AdpMac_ResetConfirm</a> from adpreset.o(.text) referenced from adpreset.o(.text)
 <LI><a href="#[4f]">_Callback_DataSend</a> from adpdata.o(.text) referenced from adpdata.o(.text)
 <LI><a href="#[64]">_Callback_FragTimer</a> from adpcommon.o(.text) referenced from adpcommon.o(.text)
 <LI><a href="#[58]">_Callback_HyALBeaconNotify</a> from adpmacinterface.o(.text) referenced from adpmacinterface.o(.text)
 <LI><a href="#[5b]">_Callback_HyALCommStatusIndication</a> from adpmacinterface.o(.text) referenced from adpmacinterface.o(.text)
 <LI><a href="#[53]">_Callback_HyALDataConfirm</a> from adpmacinterface.o(.text) referenced from adpmacinterface.o(.text)
 <LI><a href="#[54]">_Callback_HyALDataIndication</a> from adpmacinterface.o(.text) referenced from adpmacinterface.o(.text)
 <LI><a href="#[55]">_Callback_HyALGetConfirm</a> from adpmacinterface.o(.text) referenced from adpmacinterface.o(.text)
 <LI><a href="#[6f]">_Callback_HyALMacWrpBeaconNotify</a> from hyal.o(i._Callback_HyALMacWrpBeaconNotify) referenced from hyal.o(i.HyALInitialize)
 <LI><a href="#[79]">_Callback_HyALMacWrpBeaconNotifyRF</a> from hyal.o(i._Callback_HyALMacWrpBeaconNotifyRF) referenced from hyal.o(i.HyALInitialize)
 <LI><a href="#[72]">_Callback_HyALMacWrpCommStatusIndication</a> from hyal.o(i._Callback_HyALMacWrpCommStatusIndication) referenced from hyal.o(i.HyALInitialize)
 <LI><a href="#[7c]">_Callback_HyALMacWrpCommStatusIndicationRF</a> from hyal.o(i._Callback_HyALMacWrpCommStatusIndicationRF) referenced from hyal.o(i.HyALInitialize)
 <LI><a href="#[6a]">_Callback_HyALMacWrpDataConfirm</a> from hyal.o(i._Callback_HyALMacWrpDataConfirm) referenced from hyal.o(i.HyALInitialize)
 <LI><a href="#[74]">_Callback_HyALMacWrpDataConfirmRF</a> from hyal.o(i._Callback_HyALMacWrpDataConfirmRF) referenced from hyal.o(i.HyALInitialize)
 <LI><a href="#[6b]">_Callback_HyALMacWrpDataIndication</a> from hyal.o(i._Callback_HyALMacWrpDataIndication) referenced from hyal.o(i.HyALInitialize)
 <LI><a href="#[75]">_Callback_HyALMacWrpDataIndicationRF</a> from hyal.o(i._Callback_HyALMacWrpDataIndicationRF) referenced from hyal.o(i.HyALInitialize)
 <LI><a href="#[6c]">_Callback_HyALMacWrpGetConfirm</a> from hyal.o(i._Callback_HyALMacWrpGetConfirm) referenced from hyal.o(i.HyALInitialize)
 <LI><a href="#[76]">_Callback_HyALMacWrpGetConfirmRF</a> from hyal.o(i._Callback_HyALMacWrpGetConfirmRF) referenced from hyal.o(i.HyALInitialize)
 <LI><a href="#[6e]">_Callback_HyALMacWrpResetConfirm</a> from hyal.o(i._Callback_HyALMacWrpResetConfirm) referenced from hyal.o(i.HyALInitialize)
 <LI><a href="#[78]">_Callback_HyALMacWrpResetConfirmRF</a> from hyal.o(i._Callback_HyALMacWrpResetConfirmRF) referenced from hyal.o(i.HyALInitialize)
 <LI><a href="#[70]">_Callback_HyALMacWrpScanConfirm</a> from hyal.o(i._Callback_HyALMacWrpScanConfirm) referenced from hyal.o(i.HyALInitialize)
 <LI><a href="#[7a]">_Callback_HyALMacWrpScanConfirmRF</a> from hyal.o(i._Callback_HyALMacWrpScanConfirmRF) referenced from hyal.o(i.HyALInitialize)
 <LI><a href="#[6d]">_Callback_HyALMacWrpSetConfirm</a> from hyal.o(i._Callback_HyALMacWrpSetConfirm) referenced from hyal.o(i.HyALInitialize)
 <LI><a href="#[77]">_Callback_HyALMacWrpSetConfirmRF</a> from hyal.o(i._Callback_HyALMacWrpSetConfirmRF) referenced from hyal.o(i.HyALInitialize)
 <LI><a href="#[73]">_Callback_HyALMacWrpSnifferIndication</a> from hyal.o(i._Callback_HyALMacWrpSnifferIndication) referenced from hyal.o(i.HyALInitialize)
 <LI><a href="#[7d]">_Callback_HyALMacWrpSnifferIndicationRF</a> from hyal.o(i._Callback_HyALMacWrpSnifferIndicationRF) referenced from hyal.o(i.HyALInitialize)
 <LI><a href="#[71]">_Callback_HyALMacWrpStartConfirm</a> from hyal.o(i._Callback_HyALMacWrpStartConfirm) referenced from hyal.o(i.HyALInitialize)
 <LI><a href="#[7b]">_Callback_HyALMacWrpStartConfirmRF</a> from hyal.o(i._Callback_HyALMacWrpStartConfirmRF) referenced from hyal.o(i.HyALInitialize)
 <LI><a href="#[57]">_Callback_HyALResetConfirm</a> from adpmacinterface.o(.text) referenced from adpmacinterface.o(.text)
 <LI><a href="#[59]">_Callback_HyALScanConfirm</a> from adpmacinterface.o(.text) referenced from adpmacinterface.o(.text)
 <LI><a href="#[56]">_Callback_HyALSetConfirm</a> from adpmacinterface.o(.text) referenced from adpmacinterface.o(.text)
 <LI><a href="#[5a]">_Callback_HyALStartConfirm</a> from adpmacinterface.o(.text) referenced from adpmacinterface.o(.text)
 <LI><a href="#[50]">_Callback_MAC_BeaconNotifyIndication</a> from adpdiscovery.o(.text) referenced from adpdiscovery.o(.text)
 <LI><a href="#[63]">_Callback_MAC_DataConfirm</a> from adpcommon.o(.text) referenced from adpcommon.o(.text)
 <LI><a href="#[51]">_Callback_MAC_ScanConfirm</a> from adpdiscovery.o(.text) referenced from adpdiscovery.o(.text)
 <LI><a href="#[8f]">_Callback_MacWrapperMcpsDataConfirm</a> from mac_wrapper.o(i._Callback_MacWrapperMcpsDataConfirm) referenced from mac_wrapper.o(i.MacWrapperInitialize)
 <LI><a href="#[99]">_Callback_MacWrapperMcpsDataConfirmRF</a> from mac_wrapper.o(i._Callback_MacWrapperMcpsDataConfirmRF) referenced from mac_wrapper.o(i.MacWrapperInitializeRF)
 <LI><a href="#[90]">_Callback_MacWrapperMcpsDataIndication</a> from mac_wrapper.o(i._Callback_MacWrapperMcpsDataIndication) referenced from mac_wrapper.o(i.MacWrapperInitialize)
 <LI><a href="#[9a]">_Callback_MacWrapperMcpsDataIndicationRF</a> from mac_wrapper.o(i._Callback_MacWrapperMcpsDataIndicationRF) referenced from mac_wrapper.o(i.MacWrapperInitializeRF)
 <LI><a href="#[98]">_Callback_MacWrapperMcpsMacSnifferIndication</a> from mac_wrapper.o(i._Callback_MacWrapperMcpsMacSnifferIndication) referenced from mac_wrapper.o(i.MacWrapperInitialize)
 <LI><a href="#[a2]">_Callback_MacWrapperMcpsMacSnifferIndicationRF</a> from mac_wrapper.o(i._Callback_MacWrapperMcpsMacSnifferIndicationRF) referenced from mac_wrapper.o(i.MacWrapperInitializeRF)
 <LI><a href="#[94]">_Callback_MacWrapperMlmeBeaconNotify</a> from mac_wrapper.o(i._Callback_MacWrapperMlmeBeaconNotify) referenced from mac_wrapper.o(i.MacWrapperInitialize)
 <LI><a href="#[9e]">_Callback_MacWrapperMlmeBeaconNotifyRF</a> from mac_wrapper.o(i._Callback_MacWrapperMlmeBeaconNotifyRF) referenced from mac_wrapper.o(i.MacWrapperInitializeRF)
 <LI><a href="#[97]">_Callback_MacWrapperMlmeCommStatusIndication</a> from mac_wrapper.o(i._Callback_MacWrapperMlmeCommStatusIndication) referenced from mac_wrapper.o(i.MacWrapperInitialize)
 <LI><a href="#[a1]">_Callback_MacWrapperMlmeCommStatusIndicationRF</a> from mac_wrapper.o(i._Callback_MacWrapperMlmeCommStatusIndicationRF) referenced from mac_wrapper.o(i.MacWrapperInitializeRF)
 <LI><a href="#[91]">_Callback_MacWrapperMlmeGetConfirm</a> from mac_wrapper.o(i._Callback_MacWrapperMlmeGetConfirm) referenced from mac_wrapper.o(i.MacWrapperInitialize)
 <LI><a href="#[9b]">_Callback_MacWrapperMlmeGetConfirmRF</a> from mac_wrapper.o(i._Callback_MacWrapperMlmeGetConfirmRF) referenced from mac_wrapper.o(i.MacWrapperInitializeRF)
 <LI><a href="#[93]">_Callback_MacWrapperMlmeResetConfirm</a> from mac_wrapper.o(i._Callback_MacWrapperMlmeResetConfirm) referenced from mac_wrapper.o(i.MacWrapperInitialize)
 <LI><a href="#[9d]">_Callback_MacWrapperMlmeResetConfirmRF</a> from mac_wrapper.o(i._Callback_MacWrapperMlmeResetConfirmRF) referenced from mac_wrapper.o(i.MacWrapperInitializeRF)
 <LI><a href="#[95]">_Callback_MacWrapperMlmeScanConfirm</a> from mac_wrapper.o(i._Callback_MacWrapperMlmeScanConfirm) referenced from mac_wrapper.o(i.MacWrapperInitialize)
 <LI><a href="#[9f]">_Callback_MacWrapperMlmeScanConfirmRF</a> from mac_wrapper.o(i._Callback_MacWrapperMlmeScanConfirmRF) referenced from mac_wrapper.o(i.MacWrapperInitializeRF)
 <LI><a href="#[92]">_Callback_MacWrapperMlmeSetConfirm</a> from mac_wrapper.o(i._Callback_MacWrapperMlmeSetConfirm) referenced from mac_wrapper.o(i.MacWrapperInitialize)
 <LI><a href="#[9c]">_Callback_MacWrapperMlmeSetConfirmRF</a> from mac_wrapper.o(i._Callback_MacWrapperMlmeSetConfirmRF) referenced from mac_wrapper.o(i.MacWrapperInitializeRF)
 <LI><a href="#[96]">_Callback_MacWrapperMlmeStartConfirm</a> from mac_wrapper.o(i._Callback_MacWrapperMlmeStartConfirm) referenced from mac_wrapper.o(i.MacWrapperInitialize)
 <LI><a href="#[a0]">_Callback_MacWrapperMlmeStartConfirmRF</a> from mac_wrapper.o(i._Callback_MacWrapperMlmeStartConfirmRF) referenced from mac_wrapper.o(i.MacWrapperInitializeRF)
 <LI><a href="#[47]">_DiscoverRoute_Callback_MAC_DataConfirm</a> from protoloadng.o(.text) referenced from protoloadng.o(.text)
 <LI><a href="#[49]">_DiscoverRoute_TimerExpired_Callback</a> from protoloadng.o(.text) referenced from protoloadng.o(.text)
 <LI><a href="#[80]">_Dummy_Callback_DataSend</a> from processlbp.o(i._Dummy_Callback_DataSend) referenced from processlbp.o(i.LBP_ProcessMessage)
 <LI><a href="#[80]">_Dummy_Callback_DataSend</a> from processlbp.o(i._Dummy_Callback_DataSend) referenced from processlbp.o(i._Join_Process_Accepted)
 <LI><a href="#[7f]">_Join_Callback_DataSend</a> from processlbp.o(i._Join_Callback_DataSend) referenced from processlbp.o(i.LBP_JoinRequest)
 <LI><a href="#[7f]">_Join_Callback_DataSend</a> from processlbp.o(i._Join_Callback_DataSend) referenced from processlbp.o(i._Join_Process_Challenge)
 <LI><a href="#[7f]">_Join_Callback_DataSend</a> from processlbp.o(i._Join_Callback_DataSend) referenced from processlbp.o(i._Join_Process_Challenge_ThirdMessage)
 <LI><a href="#[7e]">_Join_TimerExpired_Callback</a> from processlbp.o(i._Join_TimerExpired_Callback) referenced from processlbp.o(i.LBP_JoinRequest)
 <LI><a href="#[5d]">_Kick_Callback_AdpMac_ResetConfirm</a> from adpnetwork.o(.text) referenced from adpnetwork.o(.text)
 <LI><a href="#[5e]">_Kick_TimerExpired_Callback</a> from adpnetwork.o(.text) referenced from adpnetwork.o(.text)
 <LI><a href="#[52]">_Lbp_Callback_DataSend</a> from adplbp.o(.text) referenced from adplbp.o(.text)
 <LI><a href="#[5f]">_Leave_Callback_AdpMac_ResetConfirm</a> from adpnetwork.o(.text) referenced from adpnetwork.o(.text)
 <LI><a href="#[60]">_PathDiscovery_Callback</a> from adppathdiscovery.o(.text) referenced from adppathdiscovery.o(.text)
 <LI><a href="#[45]">_PathDiscovery_Callback_MAC_DataConfirm</a> from protoloadng.o(.text) referenced from protoloadng.o(.text)
 <LI><a href="#[44]">_PathDiscovery_TimerExpired_Callback</a> from protoloadng.o(.text) referenced from protoloadng.o(.text)
 <LI><a href="#[4b]">_PathForward_Callback_MAC_DataConfirm</a> from protoloadng.o(.text) referenced 3 times from protoloadng.o(.text)
 <LI><a href="#[4c]">_Process_RREQ_TimerExpired_Callback</a> from protoloadng.o(.text) referenced from protoloadng.o(.text)
 <LI><a href="#[46]">_RREQRERRWait_TimerExpired_Callback</a> from protoloadng.o(.text) referenced 2 times from protoloadng.o(.text)
 <LI><a href="#[b1]">_Rekey_TimerExpired_Callback</a> from processlbp.o(i._Rekey_TimerExpired_Callback) referenced from processlbp.o(i._Join_Process_Challenge)
 <LI><a href="#[66]">_RouteDiscover_Callback</a> from adpcommon.o(.text) referenced from adpcommon.o(.text)
 <LI><a href="#[4a]">_RouteDiscover_Callback_MAC_DataConfirm</a> from protoloadng.o(.text) referenced 3 times from protoloadng.o(.text)
 <LI><a href="#[62]">_RouteDiscovery_DiscoverRoute_Callback</a> from adproutediscovery.o(.text) referenced from adproutediscovery.o(.text)
 <LI><a href="#[4d]">_RouteErrorForward_Callback_MAC_DataConfirm</a> from protoloadng.o(.text) referenced from protoloadng.o(.text)
 <LI><a href="#[48]">_RouteErrorGeneration_Callback_MAC_DataConfirm</a> from protoloadng.o(.text) referenced from protoloadng.o(.text)
 <LI><a href="#[65]">_RouteRepair_Callback</a> from adpcommon.o(.text) referenced 2 times from adpcommon.o(.text)
 <LI><a href="#[5c]">_Start_Callback_MAC_StartConfirm</a> from adpnetwork.o(.text) referenced from adpnetwork.o(.text)
 <LI><a href="#[108]">__main</a> from __main.o(!!!main) referenced from startup_samg55.o(.text)
 <LI><a href="#[ae]">_at86rf_exception_cb</a> from pal_rf.o(i._at86rf_exception_cb) referenced from pal_rf.o(i.PalRfInitialize)
 <LI><a href="#[b0]">_at86rf_rx_ind_cb</a> from pal_rf.o(i._at86rf_rx_ind_cb) referenced from pal_rf.o(i.PalRfInitialize)
 <LI><a href="#[af]">_at86rf_tx_cfm_cb</a> from pal_rf.o(i._at86rf_tx_cfm_cb) referenced from pal_rf.o(i.PalRfInitialize)
 <LI><a href="#[8d]">_exception_event_cb</a> from pal.o(i._exception_event_cb) referenced from pal.o(i.MacRtInitialize)
 <LI><a href="#[8d]">_exception_event_cb</a> from pal.o(i._exception_event_cb) referenced from pal.o(i.MacRtResetRequest)
 <LI><a href="#[69]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[b7]">_get_req</a> from atpl360.o(i._get_req) referenced from atpl360.o(i.atpl360_init)
 <LI><a href="#[b8]">_get_timer_ref</a> from atpl360.o(i._get_timer_ref) referenced from atpl360.o(i.atpl360_init)
 <LI><a href="#[b9]">_get_tone_map_rsp</a> from atpl360.o(i._get_tone_map_rsp) referenced from atpl360.o(i.atpl360_init)
 <LI><a href="#[bf]">_handler_atpl360_ext_int</a> from atpl360.o(i._handler_atpl360_ext_int) referenced from atpl360.o(i.atpl360_init)
 <LI><a href="#[c7]">_oss_1ms_timer_handler</a> from oss_if.o(i._oss_1ms_timer_handler) referenced from oss_if.o(i.oss_start)
 <LI><a href="#[8c]">_plme_get_confirm_cb</a> from pal.o(i._plme_get_confirm_cb) referenced from pal.o(i.MacRtInitialize)
 <LI><a href="#[8c]">_plme_get_confirm_cb</a> from pal.o(i._plme_get_confirm_cb) referenced from pal.o(i.MacRtResetRequest)
 <LI><a href="#[cb]">_prf_if_int_handler</a> from prf_if.o(i._prf_if_int_handler) referenced from prf_if.o(i.prf_if_set_handler)
 <LI><a href="#[68]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[8b]">_process_frame_cb</a> from pal.o(i._process_frame_cb) referenced from pal.o(i.MacRtInitialize)
 <LI><a href="#[8b]">_process_frame_cb</a> from pal.o(i._process_frame_cb) referenced from pal.o(i.MacRtResetRequest)
 <LI><a href="#[8e]">_restore_configuration</a> from pal.o(i._restore_configuration) referenced from pal.o(i.MacRtInitialize)
 <LI><a href="#[8e]">_restore_configuration</a> from pal.o(i._restore_configuration) referenced from pal.o(i.MacRtResetRequest)
 <LI><a href="#[ba]">_set_callbacks</a> from atpl360.o(i._set_callbacks) referenced from atpl360.o(i.atpl360_init)
 <LI><a href="#[bb]">_set_coordinator</a> from atpl360.o(i._set_coordinator) referenced from atpl360.o(i.atpl360_init)
 <LI><a href="#[bd]">_set_req</a> from atpl360.o(i._set_req) referenced from atpl360.o(i.atpl360_init)
 <LI><a href="#[bc]">_set_spec15_compliance</a> from atpl360.o(i._set_spec15_compliance) referenced from atpl360.o(i.atpl360_init)
 <LI><a href="#[8a]">_tx_confirm_cb</a> from pal.o(i._tx_confirm_cb) referenced from pal.o(i.MacRtInitialize)
 <LI><a href="#[8a]">_tx_confirm_cb</a> from pal.o(i._tx_confirm_cb) referenced from pal.o(i.MacRtResetRequest)
 <LI><a href="#[b2]">_tx_prog_handler</a> from rf215_tx.o(i._tx_prog_handler) referenced from rf215_tx.o(i._tx_prog_handler)
 <LI><a href="#[b2]">_tx_prog_handler</a> from rf215_tx.o(i._tx_prog_handler) referenced from rf215_tx.o(i.at86rf_tx_req)
 <LI><a href="#[b2]">_tx_prog_handler</a> from rf215_tx.o(i._tx_prog_handler) referenced from rf215_tx.o(i.rf215_tx_edc_event)
 <LI><a href="#[b2]">_tx_prog_handler</a> from rf215_tx.o(i._tx_prog_handler) referenced from rf215_tx.o(i.rf215_tx_trxrdy_event)
 <LI><a href="#[be]">_tx_request</a> from atpl360.o(i._tx_request) referenced from atpl360.o(i.atpl360_init)
 <LI><a href="#[c3]">adp_mac_serial_if_init</a> from serial_if_common.o(i.adp_mac_serial_if_init) referenced from main.o(i.main)
 <LI><a href="#[c4]">adp_mac_serial_if_process</a> from serial_if_common.o(i.adp_mac_serial_if_process) referenced from main.o(i.main)
 <LI><a href="#[fd]">aes_crypt_ecb_wrap</a> from cipher_wrap.o(i.aes_crypt_ecb_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[100]">aes_ctx_alloc</a> from cipher_wrap.o(i.aes_ctx_alloc) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[101]">aes_ctx_free</a> from cipher_wrap.o(i.aes_ctx_free) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[ff]">aes_setkey_dec_wrap</a> from cipher_wrap.o(i.aes_setkey_dec_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[fe]">aes_setkey_enc_wrap</a> from cipher_wrap.o(i.aes_setkey_enc_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[c6]">buffer_alloc_calloc</a> from memory_buffer_alloc.o(i.buffer_alloc_calloc) referenced from memory_buffer_alloc.o(i.mbedtls_memory_buffer_alloc_init)
 <LI><a href="#[c5]">buffer_alloc_free</a> from memory_buffer_alloc.o(i.buffer_alloc_free) referenced from memory_buffer_alloc.o(i.mbedtls_memory_buffer_alloc_init)
 <LI><a href="#[105]">ccm_aes_setkey_wrap</a> from cipher_wrap.o(i.ccm_aes_setkey_wrap) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[106]">ccm_ctx_alloc</a> from cipher_wrap.o(i.ccm_ctx_alloc) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[107]">ccm_ctx_free</a> from cipher_wrap.o(i.ccm_ctx_free) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[67]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[102]">gcm_aes_setkey_wrap</a> from cipher_wrap.o(i.gcm_aes_setkey_wrap) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[103]">gcm_ctx_alloc</a> from cipher_wrap.o(i.gcm_ctx_alloc) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[104]">gcm_ctx_free</a> from cipher_wrap.o(i.gcm_ctx_free) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[9]">memset</a> from memset.o(.text) referenced 2 times from platform_util.o(.data)
 <LI><a href="#[5]">platform_calloc_uninit</a> from platform.o(i.platform_calloc_uninit) referenced 2 times from platform.o(.data)
 <LI><a href="#[8]">platform_exit_uninit</a> from platform.o(i.platform_exit_uninit) referenced 2 times from platform.o(.data)
 <LI><a href="#[6]">platform_free_uninit</a> from platform.o(i.platform_free_uninit) referenced 2 times from platform.o(.data)
 <LI><a href="#[7]">platform_printf_uninit</a> from platform.o(i.platform_printf_uninit) referenced 2 times from platform.o(.data)
 <LI><a href="#[88]">pplc_if_delay</a> from pplc_if.o(i.pplc_if_delay) referenced from pal.o(i.MacRtInitialize)
 <LI><a href="#[87]">pplc_if_enable_interrupt</a> from pplc_if.o(i.pplc_if_enable_interrupt) referenced from pal.o(i.MacRtInitialize)
 <LI><a href="#[89]">pplc_if_get_thermal_warning</a> from pplc_if.o(i.pplc_if_get_thermal_warning) referenced from pal.o(i.MacRtInitialize)
 <LI><a href="#[81]">pplc_if_init</a> from pplc_if.o(i.pplc_if_init) referenced from pal.o(i.MacRtInitialize)
 <LI><a href="#[ca]">pplc_if_int_handler</a> from pplc_if.o(i.pplc_if_int_handler) referenced from pplc_if.o(i.pplc_if_set_handler)
 <LI><a href="#[82]">pplc_if_reset</a> from pplc_if.o(i.pplc_if_reset) referenced from pal.o(i.MacRtInitialize)
 <LI><a href="#[85]">pplc_if_send_boot_cmd</a> from pplc_if.o(i.pplc_if_send_boot_cmd) referenced from pal.o(i.MacRtInitialize)
 <LI><a href="#[86]">pplc_if_send_wrrd_cmd</a> from pplc_if.o(i.pplc_if_send_wrrd_cmd) referenced from pal.o(i.MacRtInitialize)
 <LI><a href="#[84]">pplc_if_set_handler</a> from pplc_if.o(i.pplc_if_set_handler) referenced from pal.o(i.MacRtInitialize)
 <LI><a href="#[83]">pplc_if_set_stby_mode</a> from pplc_if.o(i.pplc_if_set_stby_mode) referenced from pal.o(i.MacRtInitialize)
 <LI><a href="#[a5]">prf_if_enable_interrupt</a> from prf_if.o(i.prf_if_enable_interrupt) referenced from pal_rf.o(i.PalRfInitialize)
 <LI><a href="#[a3]">prf_if_init</a> from prf_if.o(i.prf_if_init) referenced from pal_rf.o(i.PalRfInitialize)
 <LI><a href="#[a8]">prf_if_is_spi_busy</a> from prf_if.o(i.prf_if_is_spi_busy) referenced from pal_rf.o(i.PalRfInitialize)
 <LI><a href="#[a9]">prf_if_led</a> from prf_if.o(i.prf_if_led) referenced from pal_rf.o(i.PalRfInitialize)
 <LI><a href="#[a4]">prf_if_reset</a> from prf_if.o(i.prf_if_reset) referenced from pal_rf.o(i.PalRfInitialize)
 <LI><a href="#[a7]">prf_if_send_spi_cmd</a> from prf_if.o(i.prf_if_send_spi_cmd) referenced from pal_rf.o(i.PalRfInitialize)
 <LI><a href="#[a6]">prf_if_set_handler</a> from prf_if.o(i.prf_if_set_handler) referenced from pal_rf.o(i.PalRfInitialize)
 <LI><a href="#[b6]">rf215_irq_handler</a> from rf215_irq.o(i.rf215_irq_handler) referenced from at86rf215.o(i.at86rf_enable)
 <LI><a href="#[b5]">serial_if_coordinator_api_parser</a> from serial_if_coordinator.o(i.serial_if_coordinator_api_parser) referenced from serial_if_common.o(i.adp_mac_serial_if_init)
 <LI><a href="#[b4]">serial_if_g3adp_api_parser</a> from serial_if_adp.o(i.serial_if_g3adp_api_parser) referenced from serial_if_common.o(i.adp_mac_serial_if_init)
 <LI><a href="#[b3]">serial_if_g3mac_api_parser</a> from serial_if_mac.o(i.serial_if_g3mac_api_parser) referenced from serial_if_common.o(i.adp_mac_serial_if_init)
 <LI><a href="#[c2]">store_persistent_info</a> from storage.o(i.store_persistent_info) referenced from storage.o(i.load_persistent_info)
 <LI><a href="#[ad]">timer_1us_cancel_int</a> from timer_1us.o(i.timer_1us_cancel_int) referenced from pal_rf.o(i.PalRfInitialize)
 <LI><a href="#[ab]">timer_1us_enable_interrupt</a> from timer_1us.o(i.timer_1us_enable_interrupt) referenced from pal_rf.o(i.PalRfInitialize)
 <LI><a href="#[aa]">timer_1us_get</a> from timer_1us.o(i.timer_1us_get) referenced from pal_rf.o(i.PalRfInitialize)
 <LI><a href="#[ac]">timer_1us_set_int</a> from timer_1us.o(i.timer_1us_set_int) referenced from pal_rf.o(i.PalRfInitialize)
 <LI><a href="#[f8]">udc_valid_address</a> from udc.o(i.udc_valid_address) referenced from udc.o(i.udc_reqstd)
 <LI><a href="#[b]">udi_cdc_comm_disable</a> from udi_cdc.o(i.udi_cdc_comm_disable) referenced 2 times from udi_cdc.o(.data)
 <LI><a href="#[a]">udi_cdc_comm_enable</a> from udi_cdc.o(i.udi_cdc_comm_enable) referenced 2 times from udi_cdc.o(.data)
 <LI><a href="#[c]">udi_cdc_comm_setup</a> from udi_cdc.o(i.udi_cdc_comm_setup) referenced 2 times from udi_cdc.o(.data)
 <LI><a href="#[f]">udi_cdc_data_disable</a> from udi_cdc.o(i.udi_cdc_data_disable) referenced 2 times from udi_cdc.o(.data)
 <LI><a href="#[e]">udi_cdc_data_enable</a> from udi_cdc.o(i.udi_cdc_data_enable) referenced 2 times from udi_cdc.o(.data)
 <LI><a href="#[fb]">udi_cdc_data_received</a> from udi_cdc.o(i.udi_cdc_data_received) referenced from udi_cdc.o(i.udi_cdc_data_received)
 <LI><a href="#[fb]">udi_cdc_data_received</a> from udi_cdc.o(i.udi_cdc_data_received) referenced from udi_cdc.o(i.udi_cdc_rx_start)
 <LI><a href="#[fc]">udi_cdc_data_sent</a> from udi_cdc.o(i.udi_cdc_data_sent) referenced from udi_cdc.o(i.udi_cdc_tx_send)
 <LI><a href="#[10]">udi_cdc_data_setup</a> from udi_cdc.o(i.udi_cdc_data_setup) referenced 2 times from udi_cdc.o(.data)
 <LI><a href="#[11]">udi_cdc_data_sof_notify</a> from udi_cdc.o(i.udi_cdc_data_sof_notify) referenced 2 times from udi_cdc.o(.data)
 <LI><a href="#[d]">udi_cdc_getsetting</a> from udi_cdc.o(i.udi_cdc_getsetting) referenced 4 times from udi_cdc.o(.data)
 <LI><a href="#[f9]">udi_cdc_line_coding_received</a> from udi_cdc.o(i.udi_cdc_line_coding_received) referenced from udi_cdc.o(i.udi_cdc_comm_setup)
 <LI><a href="#[fa]">udi_cdc_serial_state_msg_sent</a> from udi_cdc.o(i.udi_cdc_serial_state_msg_sent) referenced from udi_cdc.o(i.udi_cdc_ctrl_state_change)
 <LI><a href="#[fa]">udi_cdc_serial_state_msg_sent</a> from udi_cdc.o(i.udi_cdc_serial_state_msg_sent) referenced from udi_cdc.o(i.udi_cdc_ctrl_state_notify)
 <LI><a href="#[c9]">usart_serial_getchar</a> from hal.o(i.usart_serial_getchar) referenced from hal.o(i.platform_init_hw)
 <LI><a href="#[c8]">usart_serial_putchar</a> from hal.o(i.usart_serial_putchar) referenced from hal.o(i.platform_init_hw)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[108]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[109]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[10b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[4f0]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4f1]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4f2]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[4f3]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[10c]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[4f4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[10d]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[2b7]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[10f]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[111]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[113]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[114]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[115]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[4f5]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[117]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[119]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[11a]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[11b]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[11d]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[11f]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[121]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[122]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[123]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[125]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[4f6]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[127]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[129]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[12b]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[12d]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[4f7]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[139]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[4f8]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[4f9]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[4fa]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[12f]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[4fb]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[131]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[4fc]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[4fd]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[133]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[4fe]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[4ff]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[134]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[500]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[501]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[502]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[503]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[504]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[505]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[506]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[507]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[508]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[509]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[50a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[50b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[50c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[13e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[50d]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[50e]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[50f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[510]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[511]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[512]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[513]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[514]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[10a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[515]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[136]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[138]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[516]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[13a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; oss_init &rArr; platform_init_hw &rArr; sysclk_init &rArr; efc_perform_read_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[517]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[2d9]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[13d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[518]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[13f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[45a]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_random_16
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_random_32
</UL>

<P><STRONG><a name="[17]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>ARM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CRCCU_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EFC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>FLEXCOM1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>FLEXCOM2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>FLEXCOM3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>FLEXCOM5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>FLEXCOM6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>FLEXCOM7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2SC0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2SC1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>MEM2MEM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PDMIC0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>PDMIC1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PMC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>RTC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RTT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TC0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TC1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TC5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UHP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>WDT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_samg55.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[2d8]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_samg55.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[141]"></a>MacMibReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, macmib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MacMibReset &rArr; MibResetInternal &rArr; Random32 &rArr; platform_random_32
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibResetInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowResetRequest
</UL>

<P><STRONG><a name="[143]"></a>MacMibInitialize</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, macmib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MacMibInitialize &rArr; MibResetInternal &rArr; Random32 &rArr; platform_random_32
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibResetInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacInitialize
</UL>

<P><STRONG><a name="[146]"></a>MibGetNeighbourEntry</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, macmib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MibGetNeighbourEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeGetRequestSync
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacEventHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtCbTxConfirm
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtCbProcessFrame
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequest
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleToneMapResponse
</UL>

<P><STRONG><a name="[256]"></a>MibGetPOSEntry</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, macmib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MibGetPOSEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtCbProcessFrame
</UL>

<P><STRONG><a name="[144]"></a>MacMlmeGetRequestSync</STRONG> (Thumb, 1558 bytes, Stack size 40 bytes, macmib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtGetRequestSync
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibGetNeighbourEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeGetRequest
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeGetRequestSync
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleToneMapResponse
</UL>

<P><STRONG><a name="[148]"></a>MacMlmeSetRequestSync</STRONG> (Thumb, 2082 bytes, Stack size 184 bytes, macmib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = MacMlmeSetRequestSync &rArr; MacRtSetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtSetRequestSync
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeSetRequestSync
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeStartRequest
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeSetRequest
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeScanRequest
</UL>

<P><STRONG><a name="[14e]"></a>MibGetDeviceEntry</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, macmib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MibGetDeviceEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_6
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
</UL>

<P><STRONG><a name="[152]"></a>MacMcpsDataRequest</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, macsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MacMcpsDataRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMcpsDataRequest
</UL>

<P><STRONG><a name="[154]"></a>MacMlmeGetRequest</STRONG> (Thumb, 50 bytes, Stack size 168 bytes, macsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = MacMlmeGetRequest &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeGetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeGetRequest
</UL>

<P><STRONG><a name="[155]"></a>MacMlmeSetRequest</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, macsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = MacMlmeSetRequest &rArr; MacMlmeSetRequestSync &rArr; MacRtSetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeSetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeSetRequest
</UL>

<P><STRONG><a name="[156]"></a>MacMlmeResetRequest</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, macsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = MacMlmeResetRequest &rArr; MacLowResetRequest &rArr; MacRtResetRequest &rArr; pl360_g3_coup_tx_config
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowResetRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeResetRequest
</UL>

<P><STRONG><a name="[158]"></a>MacMlmeScanRequest</STRONG> (Thumb, 154 bytes, Stack size 208 bytes, macsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = MacMlmeScanRequest &rArr; MacLowTxRequest &rArr; cipher_wrapper_ccm_encrypt_and_tag &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeSetRequestSync
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeScanRequest
</UL>

<P><STRONG><a name="[15a]"></a>MacMlmeStartRequest</STRONG> (Thumb, 84 bytes, Stack size 160 bytes, macsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = MacMlmeStartRequest &rArr; MacMlmeSetRequestSync &rArr; MacRtSetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeSetRequestSync
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtSetCoordinator
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeStartRequest
</UL>

<P><STRONG><a name="[15c]"></a>MacLowTxConfirm</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, macsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MacLowTxConfirm
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTxConfirm
</UL>

<P><STRONG><a name="[160]"></a>MacLowRxIndication</STRONG> (Thumb, 834 bytes, Stack size 104 bytes, macsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = MacLowRxIndication &rArr; HandleToneMapResponse &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random32Ex
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtGetPhyTime
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleToneMapResponse
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateToneMapResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
</UL>

<P><STRONG><a name="[164]"></a>MacLowMacSnifferIndication</STRONG> (Thumb, 222 bytes, Stack size 88 bytes, macsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MacLowMacSnifferIndication &rArr; CreateToneMapResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_10
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateToneMapResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
</UL>

<P><STRONG><a name="[255]"></a>MacLowCommStatusIndication</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, macsublayer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
</UL>

<P><STRONG><a name="[166]"></a>MacInitialize</STRONG> (Thumb, 112 bytes, Stack size 176 bytes, macsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = MacInitialize &rArr; MacLowInitialize &rArr; MacRtInitialize &rArr; pl360_g3_coup_tx_config
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtGetRequestSync
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowInitialize
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacConstantsInitialize
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMibInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperInitialize
</UL>

<P><STRONG><a name="[169]"></a>MacEventHandler</STRONG> (Thumb, 578 bytes, Stack size 80 bytes, macsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = MacEventHandler &rArr; MacLowTxRequest &rArr; cipher_wrapper_ccm_encrypt_and_tag &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtGetPhyTime
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequest
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowEventHandler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibGetNeighbourEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperEventHandler
</UL>

<P><STRONG><a name="[16c]"></a>LOADNG_Reset</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = LOADNG_Reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_Reset
</UL>

<P><STRONG><a name="[172]"></a>LOADNG_GetRouteEntry</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LOADNG_GetRouteEntry &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_RouteExists
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_RefreshRoute
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRouteAndMediaType
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRoute
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetMib
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_GetRouteEntry
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteEstablished
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_RREP
</UL>

<P><STRONG><a name="[173]"></a>LOADNG_GetRouteAndMediaType</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = LOADNG_GetRouteAndMediaType &rArr; GetAdpShortAddress &rArr; AdpMacGetRequestSync &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRouteEntry
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpShortAddress
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsBlacklisted
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DiscoverPath
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_GetRouteAndMediaType
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PathForward_Callback_MAC_DataConfirm
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GenerateRouteError
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute
</UL>

<P><STRONG><a name="[178]"></a>LOADNG_RouteExists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LOADNG_RouteExists &rArr; _IsBlacklisted &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRouteEntry
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsBlacklisted
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DiscoverPath
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_RouteExists
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PathForward_Callback_MAC_DataConfirm
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GenerateRouteError
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute
</UL>

<P><STRONG><a name="[179]"></a>LOADNG_DiscoverPath</STRONG> (Thumb, 162 bytes, Stack size 296 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = LOADNG_DiscoverPath &rArr; AdpMac_DataRequestHelper &rArr; AdpMac_DataRequest &rArr; HyALDataRequest &rArr; MacWrapperMcpsDataRequestRF &rArr; LogBuffer &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_RouteExists
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRouteAndMediaType
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_CMD_Loadng
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpShortAddress
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_DataRequestHelper
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode_PREQ
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_DiscoverPath
</UL>

<P><STRONG><a name="[17d]"></a>LOADNG_AddBlacklistOnMedium</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LOADNG_AddBlacklistOnMedium &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SignedSysGetUpTimeTenthsSeconds
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPastCmp
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DeleteRoutePosition
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DeleteRoute
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_AddBlacklistOnMedium
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PathForward_Callback_MAC_DataConfirm
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteDiscover_Callback_MAC_DataConfirm
</UL>

<P><STRONG><a name="[180]"></a>LOADNG_DeleteRoute</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = LOADNG_DeleteRoute &rArr; GetAdpCoordShortAddress &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetRcCoordSync
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_AddBlacklistOnMedium
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpCoordShortAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_DeleteRoute
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteDiscover_Callback_MAC_DataConfirm
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute_Callback_MAC_DataConfirm
</UL>

<P><STRONG><a name="[18e]"></a>LOADNG_NotifyRouteError</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = LOADNG_NotifyRouteError &rArr; _GenerateRouteError &rArr; _RREQRERRWait_FindEmptyQueueSlot &rArr;  _GenerateRouteError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpShortAddress
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpMaxHops
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GenerateRouteError
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_NotifyRouteError
</UL>

<P><STRONG><a name="[190]"></a>LOADNG_DiscoverRoute</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = LOADNG_DiscoverRoute &rArr; _DiscoverRoute &rArr;  _RREQRERRWait_FindEmptyQueueSlot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Register
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpNetTraversalTime
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_DiscoverRoute
</UL>

<P><STRONG><a name="[19a]"></a>LOADNG_IsInDestinationAddressSet</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LOADNG_IsInDestinationAddressSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_IsInDestinationAddressSet
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_RREP
</UL>

<P><STRONG><a name="[192]"></a>LOADNG_AddRouteEntry</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LOADNG_AddRouteEntry &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_SetMib
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_RefreshRoute
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_AddRoute
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessSuccessfulRREPConfirm
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateRoute
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteDiscover_Callback_MAC_DataConfirm
</UL>

<P><STRONG><a name="[197]"></a>_IsRoutingTableFull</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, protoloadng.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
</UL>

<P><STRONG><a name="[1a4]"></a>LOADNG_ProcessMessage</STRONG> (Thumb, 564 bytes, Stack size 224 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = LOADNG_ProcessMessage &rArr; _ProcessMessage &rArr;  _ProcessMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_LoByte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_HiByte
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALGetRequestSync
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCostUnidirectional
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCost
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_CMD_Loadng
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpShortAddress
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_GetNeighbourDescriptorSync
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_DataRequestHelper
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExtractMetricType
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_ProcessMessage
</UL>

<P><STRONG><a name="[1a9]"></a>LOADNG_AddRoute</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = LOADNG_AddRoute &rArr; GetAdpMaxHops &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SignedSysGetUpTimeTenthsSeconds
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_AddRouteEntry
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpMaxHops
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_AddRoute
</UL>

<P><STRONG><a name="[1aa]"></a>LOADNG_RefreshRoute</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LOADNG_RefreshRoute &rArr; LOADNG_AddRouteEntry &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SignedSysGetUpTimeTenthsSeconds
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRouteEntry
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_AddRouteEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_RefreshRoute
</UL>

<P><STRONG><a name="[359]"></a>LOADNG_AddCircularRoute</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, protoloadng.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_AddCircularRoute
</UL>

<P><STRONG><a name="[1ab]"></a>LOADNG_DeleteRoutePosition</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = LOADNG_DeleteRoutePosition &rArr; GetAdpCoordShortAddress &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetRcCoordSync
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_AddBlacklistOnMedium
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpCoordShortAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_SetMib
</UL>

<P><STRONG><a name="[1ac]"></a>LOADNG_RemoveBlacklistOnMedium</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LOADNG_RemoveBlacklistOnMedium
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SignedSysGetUpTimeTenthsSeconds
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_RemoveBlacklistOnMedium
</UL>

<P><STRONG><a name="[1ad]"></a>LOADNG_GetRoute</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = LOADNG_GetRoute &rArr; GetAdpShortAddress &rArr; AdpMacGetRequestSync &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRouteEntry
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpShortAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_GetRoute
</UL>

<P><STRONG><a name="[1ae]"></a>LOADNG_GetRouteCount</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LOADNG_GetRouteCount &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetMib
</UL>

<P><STRONG><a name="[1b0]"></a>LOADNG_GetMib</STRONG> (Thumb, 1430 bytes, Stack size 40 bytes, protoloadng_getset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LOADNG_GetMib &rArr; LOADNG_GetRouteEntry &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SignedSysGetUpTimeTenthsSeconds
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRouteEntry
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRouteCount
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_IsDisabled
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_IsAutoRREQDisabled
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_GetDiscoverRouteGlobalSeqNo
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_AdpRREPWait
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_AdpDefaultCoordRouteEnabled
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoutingGetMib
</UL>

<P><STRONG><a name="[1b1]"></a>UpdateAdpNonVolatileData</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, protoloadng_getset.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpSetRequestSync
</UL>

<P><STRONG><a name="[185]"></a>GetAdpNetTraversalTime</STRONG> (Thumb, 22 bytes, Stack size 80 bytes, protoloadng_getset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = GetAdpNetTraversalTime &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DiscoverRoute
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute_Callback_MAC_DataConfirm
</UL>

<P><STRONG><a name="[1b4]"></a>LOADNG_SetMib</STRONG> (Thumb, 1456 bytes, Stack size 104 bytes, protoloadng_getset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = LOADNG_SetMib &rArr;  AdpSetRequestSync (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpSetRequestSync
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetRequestSync
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SignedSysGetUpTimeTenthsSeconds
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DeleteRoutePosition
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_AddRouteEntry
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_MetricSupported
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_SetDiscoverRouteGlobalSeqNo
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoutingSetMib
</UL>

<P><STRONG><a name="[174]"></a>GetAdpShortAddress</STRONG> (Thumb, 22 bytes, Stack size 160 bytes, protoloadng_getset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = GetAdpShortAddress &rArr; AdpMacGetRequestSync &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacGetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_ProcessMessage
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_NotifyRouteError
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRouteAndMediaType
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRoute
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DiscoverPath
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_RREP
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_TimerExpired_Callback
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PathForward_Callback_MAC_DataConfirm
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute_Callback_MAC_DataConfirm
</UL>

<P><STRONG><a name="[181]"></a>GetAdpCoordShortAddress</STRONG> (Thumb, 22 bytes, Stack size 80 bytes, protoloadng_getset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = GetAdpCoordShortAddress &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DeleteRoutePosition
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DeleteRoute
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessSuccessfulRREPConfirm
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_RREP
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateRoute
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteDiscover_Callback_MAC_DataConfirm
</UL>

<P><STRONG><a name="[18f]"></a>GetAdpMaxHops</STRONG> (Thumb, 22 bytes, Stack size 80 bytes, protoloadng_getset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = GetAdpMaxHops &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_NotifyRouteError
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_AddRoute
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessSuccessfulRREPConfirm
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddRouteToRoutingSet
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateRoute
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_TimerExpired_Callback
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteDiscover_Callback_MAC_DataConfirm
</UL>

<P><STRONG><a name="[19c]"></a>GetAdpRcCoord</STRONG> (Thumb, 24 bytes, Stack size 160 bytes, protoloadng_getset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = GetAdpRcCoord &rArr; AdpMacGetRequestSync &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacGetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_RREP
</UL>

<P><STRONG><a name="[1a2]"></a>AdpGetPendingDataIndicationShortAddr</STRONG> (Thumb, 22 bytes, Stack size 80 bytes, protoloadng_getset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = AdpGetPendingDataIndicationShortAddr &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
</UL>

<P><STRONG><a name="[1b6]"></a>GetAdpBandContextTones</STRONG> (Thumb, 22 bytes, Stack size 80 bytes, protoloadng_getset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = GetAdpBandContextTones &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_CompositeMetric
</UL>

<P><STRONG><a name="[1a1]"></a>GetNeighbourPhaseDiff</STRONG> (Thumb, 72 bytes, Stack size 184 bytes, protoloadng_getset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = GetNeighbourPhaseDiff &rArr; AdpMacGetRequestSync &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacGetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
</UL>

<P><STRONG><a name="[1b7]"></a>GetAdpDutyCycleUsageRF</STRONG> (Thumb, 34 bytes, Stack size 160 bytes, protoloadng_getset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = GetAdpDutyCycleUsageRF &rArr; AdpMacGetRequestSync &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacGetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_CompositeMetric
</UL>

<P><STRONG><a name="[1b8]"></a>GetNeighbourDutyCycleUsageRF</STRONG> (Thumb, 32 bytes, Stack size 160 bytes, protoloadng_getset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = GetNeighbourDutyCycleUsageRF &rArr; AdpMacGetRequestSync &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacGetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_CompositeMetric
</UL>

<P><STRONG><a name="[1b9]"></a>MacMibResetRF</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, macrfmib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MacMibResetRF &rArr; MibResetInternalRF &rArr; Random32 &rArr; platform_random_32
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibResetInternalRF
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowResetRequestRF
</UL>

<P><STRONG><a name="[1bb]"></a>MacMibInitializeRF</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, macrfmib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MacMibInitializeRF &rArr; MibResetInternalRF &rArr; Random32 &rArr; platform_random_32
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibResetInternalRF
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacInitializeRF
</UL>

<P><STRONG><a name="[26e]"></a>MibGetPOSEntryRF</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, macrfmib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MibGetPOSEntryRF
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePOSTableRF
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequestRF
</UL>

<P><STRONG><a name="[1bc]"></a>MacMlmeGetRequestSyncRF</STRONG> (Thumb, 1826 bytes, Stack size 32 bytes, macrfmib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MacMlmeGetRequestSyncRF &rArr; PalRfGetParam &rArr; at86rf_pib_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfGetParamLen
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfGetParam
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeGetRequestRF
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeGetRequestSyncRF
</UL>

<P><STRONG><a name="[1bf]"></a>MacMlmeSetRequestSyncRF</STRONG> (Thumb, 2020 bytes, Stack size 40 bytes, macrfmib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = MacMlmeSetRequestSyncRF &rArr; PalRfSetParam &rArr; at86rf_pib_set &rArr; rf215_bbc_set_phy_cfg &rArr; rf215_pll_set_chn_cfg &rArr; rf215_trx_switch_txprep &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfSetParam
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfGetParamLen
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfGetParam
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeSetRequestRF
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeSetRequestSyncRF
</UL>

<P><STRONG><a name="[1c1]"></a>MibGetDeviceEntryRF</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, macrfmib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MibGetDeviceEntryRF
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_6
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
</UL>

<P><STRONG><a name="[1c2]"></a>MacMcpsDataRequestRF</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, macrfsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MacMcpsDataRequestRF
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMcpsDataRequestRF
</UL>

<P><STRONG><a name="[1c3]"></a>MacMlmeGetRequestRF</STRONG> (Thumb, 50 bytes, Stack size 168 bytes, macrfsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MacMlmeGetRequestRF &rArr; MacMlmeGetRequestSyncRF &rArr; PalRfGetParam &rArr; at86rf_pib_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeGetRequestSyncRF
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeGetRequestRF
</UL>

<P><STRONG><a name="[1c4]"></a>MacMlmeSetRequestRF</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, macrfsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = MacMlmeSetRequestRF &rArr; MacMlmeSetRequestSyncRF &rArr; PalRfSetParam &rArr; at86rf_pib_set &rArr; rf215_bbc_set_phy_cfg &rArr; rf215_pll_set_chn_cfg &rArr; rf215_trx_switch_txprep &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeSetRequestSyncRF
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeSetRequestRF
</UL>

<P><STRONG><a name="[1c5]"></a>MacMlmeResetRequestRF</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, macrfsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = MacMlmeResetRequestRF &rArr; MacLowResetRequestRF &rArr; PalRfResetRequest &rArr; at86rf_pib_set &rArr; rf215_bbc_set_phy_cfg &rArr; rf215_pll_set_chn_cfg &rArr; rf215_trx_switch_txprep &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowResetRequestRF
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeResetRequestRF
</UL>

<P><STRONG><a name="[1c7]"></a>MacMlmeScanRequestRF</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, macrfsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = MacMlmeScanRequestRF &rArr; MacLowTxRequestRF &rArr; MacSecurityEncrypt &rArr; cipher_wrapper_ccm_encrypt_and_tag &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequestRF
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeScanRequestRF
</UL>

<P><STRONG><a name="[340]"></a>MacMlmeStartRequestRF</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, macrfsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MacMlmeStartRequestRF
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeStartRequestRF
</UL>

<P><STRONG><a name="[1c9]"></a>MacLowTxConfirmRF</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, macrfsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MacLowTxConfirmRF
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTxConfirm
</UL>

<P><STRONG><a name="[1ca]"></a>MacLowRxIndicationRF</STRONG> (Thumb, 406 bytes, Stack size 80 bytes, macrfsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MacLowRxIndicationRF &rArr; Random16Ex &rArr; platform_random_16
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random16Ex
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
</UL>

<P><STRONG><a name="[1cc]"></a>MacLowMacSnifferIndicationRF</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, macrfsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MacLowMacSnifferIndicationRF
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_10
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
</UL>

<P><STRONG><a name="[274]"></a>MacLowCommStatusIndicationRF</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, macrfsublayer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
</UL>

<P><STRONG><a name="[1cd]"></a>MacInitializeRF</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, macrfsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MacInitializeRF &rArr; MacLowInitializeRF &rArr; PalRfInitialize &rArr; at86rf_enable &rArr; rf215_bbc_init &rArr; rf215_pll_init &rArr; _pll_get_params
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowInitializeRF
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMibInitializeRF
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperInitializeRF
</UL>

<P><STRONG><a name="[1cf]"></a>MacEventHandlerRF</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, macrfsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = MacEventHandlerRF &rArr; MacLowTxRequestRF &rArr; MacSecurityEncrypt &rArr; cipher_wrapper_ccm_encrypt_and_tag &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequestRF
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowEventHandlerRF
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperEventHandlerRF
</UL>

<P><STRONG><a name="[1d1]"></a>ADP_Reset</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, adp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = ADP_Reset &rArr; Routing_Reset &rArr; LOADNG_Reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ResetAll
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_Reset
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpConfGetSpecCompliance
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpConfGetProcessQueuePtr
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpConfGetProcessQueueCount
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpConfGetFragmentedTransferTablePtr
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpConfGetFragmentedTransferTableCount
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpConfGet400BufPtr
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpConfGet400BufCount
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpConfGet1280BufPtr
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpConfGet1280BufCount
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpConfGet100BufPtr
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpConfGet100BufCount
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootstrapWrapper_Reset
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpInitialize
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_AdpMac_ResetConfirm
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Leave_Callback_AdpMac_ResetConfirm
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Kick_Callback_AdpMac_ResetConfirm
</UL>

<P><STRONG><a name="[1e0]"></a>AdpInitialize</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, adp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = AdpInitialize &rArr; AdpMac_Initialize &rArr; HyALInitialize &rArr; MacWrapperInitialize &rArr; MacInitialize &rArr; MacLowInitialize &rArr; MacRtInitialize &rArr; pl360_g3_coup_tx_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random_Initialize
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_Initialize
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_coordinator_api_parser
</UL>

<P><STRONG><a name="[1e4]"></a>AdpEventHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, adp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3936 + Unknown Stack Size
<LI>Call Chain = AdpEventHandler &rArr; AdpMac_EventHandler &rArr; _ProcessMacNotifications &rArr; ADP_ProcessIncomingMessage &rArr; BootstrapWrapper_ProcessMessage &rArr; LBP_ProcessMessage &rArr; _Join_Process_Challenge &rArr; _Join_Process_Challenge_ThirdMessage &rArr; _ProcessParameters &rArr; AdpSetRequestSync &rArr; AdpSetMib &rArr; BootstrapWrapper_InitEapPsk &rArr; LBP_InitEapPsk &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_EventHandler
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsResetPending
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_EventHandler
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpCommon_ProcessSendQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adp_mac_serial_if_process
</UL>

<P><STRONG><a name="[1e9]"></a>ADP_ProcessIncomingMessage</STRONG> (Thumb, 1190 bytes, Stack size 128 bytes, adp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3872 + Unknown Stack Size
<LI>Call Chain = ADP_ProcessIncomingMessage &rArr; BootstrapWrapper_ProcessMessage &rArr; LBP_ProcessMessage &rArr; _Join_Process_Challenge &rArr; _Join_Process_Challenge_ThirdMessage &rArr; _ProcessParameters &rArr; AdpSetRequestSync &rArr; AdpSetMib &rArr; BootstrapWrapper_InitEapPsk &rArr; LBP_InitEapPsk &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_RouteExists
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_ProcessMessage
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_NotifyRouteError
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_IsInDestinationAddressSet
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_GetRoute
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_DeleteRoute
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_AddCircularRoute
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootstrapWrapper_ProcessMessage
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchBroadcastLogTable
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_NetworkJoined
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Coordinator
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_IsMeshHeader
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_IsIPv6Header
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_IsFragNHeader
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_IsFrag1Header
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_IsEscHeader
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_IsCompressedIPv6Header
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_IsBroadcastHeader
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Decode_MeshHeader
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Decode_IPv6
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Decode_FragNHeader
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Decode_Frag1Header
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Decode_EscHeader
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Decode_Broadcast
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_Indication_Notify
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGroupAddress
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_DecompressHeader
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataIndication_Notify
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFragmentReceived
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpCommon_SecurityEnabled
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpCommon_DataSendEx
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMacNotifications
</UL>

<P><STRONG><a name="[209]"></a>AdpDataRequest</STRONG> (Thumb, 158 bytes, Stack size 80 bytes, adpdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = AdpDataRequest &rArr; AdpCommon_DataSend &rArr; AdpCommon_DataSendEx &rArr; _CheckBufferIndicationCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_IsValid
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_IsMulticast
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_GetShortDestinationAddress
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpCommon_DataSend
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_NetworkJoined
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
</UL>

<P><STRONG><a name="[1fc]"></a>DataIndication_Notify</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, adpdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DataIndication_Notify
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[20e]"></a>AdpDiscoveryRequest</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, adpdiscovery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = AdpDiscoveryRequest &rArr; AdpMac_ScanRequest &rArr; HyALScanRequest &rArr; MacWrapperMlmeScanRequest &rArr; MacMlmeScanRequest &rArr; MacLowTxRequest &rArr; cipher_wrapper_ccm_encrypt_and_tag &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_ScanRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
</UL>

<P><STRONG><a name="[218]"></a>AdpGetRequest</STRONG> (Thumb, 26 bytes, Stack size 80 bytes, adpgetset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = AdpGetRequest &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetMib
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
</UL>

<P><STRONG><a name="[21e]"></a>AdpSetRequest</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, adpgetset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2496 + Unknown Stack Size
<LI>Call Chain = AdpSetRequest &rArr; AdpSetMib &rArr; BootstrapWrapper_InitEapPsk &rArr; LBP_InitEapPsk &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpSetMib
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_triggerAdpSetRequest
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_set_param
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpConfirm
</UL>

<P><STRONG><a name="[1b3]"></a>AdpGetRequestSync</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adpgetset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetMib
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_ProcessMessage
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_LeaveRequest
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_JoinRequest
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessParameters
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Accepted
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_coordinator_api_parser
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adp_mac_serial_if_set_state
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_persistent_data
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_SetMib
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpBandContextTones
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpNetTraversalTime
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpMaxHops
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpCoordShortAddress
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetPendingDataIndicationShortAddr
</UL>

<P><STRONG><a name="[1b2]"></a>AdpSetRequestSync</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, adpgetset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2480 + Unknown Stack Size
<LI>Call Chain = AdpSetRequestSync &rArr; AdpSetMib &rArr; BootstrapWrapper_InitEapPsk &rArr; LBP_InitEapPsk &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpSetMib
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessParameters
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_persistent_info
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_SetMib
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateAdpNonVolatileData
</UL>

<P><STRONG><a name="[21f]"></a>AdpLbpRequestExt</STRONG> (Thumb, 86 bytes, Stack size 272 bytes, adplbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = AdpLbpRequestExt &rArr; AdpCommon_DataSend &rArr; AdpCommon_DataSendEx &rArr; _CheckBufferIndicationCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_CMD_Bootstrap
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpCommon_DataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_ProcessMessage
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_LeaveRequest
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_JoinRequest
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge_ThirdMessage
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Accepted
</UL>

<P><STRONG><a name="[221]"></a>AdpLbpRequest</STRONG> (Thumb, 88 bytes, Stack size 272 bytes, adplbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = AdpLbpRequest &rArr; AdpCommon_DataSend &rArr; AdpCommon_DataSendEx &rArr; _CheckBufferIndicationCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_CMD_Bootstrap
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpCommon_DataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_kick_device
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rekeying_process
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bootstrap_slots
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessLBPMessage
</UL>

<P><STRONG><a name="[204]"></a>LBP_Indication_Notify</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, adplbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LBP_Indication_Notify
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[1e3]"></a>AdpMac_Initialize</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = AdpMac_Initialize &rArr; HyALInitialize &rArr; MacWrapperInitialize &rArr; MacInitialize &rArr; MacLowInitialize &rArr; MacRtInitialize &rArr; pl360_g3_coup_tx_config
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpInitialize
</UL>

<P><STRONG><a name="[1e7]"></a>AdpMac_EventHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3928 + Unknown Stack Size
<LI>Call Chain = AdpMac_EventHandler &rArr; _ProcessMacNotifications &rArr; ADP_ProcessIncomingMessage &rArr; BootstrapWrapper_ProcessMessage &rArr; LBP_ProcessMessage &rArr; _Join_Process_Challenge &rArr; _Join_Process_Challenge_ThirdMessage &rArr; _ProcessParameters &rArr; AdpSetRequestSync &rArr; AdpSetMib &rArr; BootstrapWrapper_InitEapPsk &rArr; LBP_InitEapPsk &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALEventHandler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMacNotifications
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpEventHandler
</UL>

<P><STRONG><a name="[229]"></a>AdpMac_DataRequest</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = AdpMac_DataRequest &rArr; HyALDataRequest &rArr; MacWrapperMcpsDataRequestRF &rArr; LogBuffer &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALDataRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSendNextFragment
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_DataRequestHelper
</UL>

<P><STRONG><a name="[17b]"></a>AdpMac_DataRequestHelper</STRONG> (Thumb, 130 bytes, Stack size 448 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = AdpMac_DataRequestHelper &rArr; AdpMac_DataRequest &rArr; HyALDataRequest &rArr; MacWrapperMcpsDataRequestRF &rArr; LogBuffer &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_DataRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_ProcessMessage
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DiscoverPath
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_RREP
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_TimerExpired_Callback
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PathForward_Callback_MAC_DataConfirm
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteDiscover_Callback_MAC_DataConfirm
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GenerateRouteError
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute_Callback_MAC_DataConfirm
</UL>

<P><STRONG><a name="[22b]"></a>AdpMac_StartRequest</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = AdpMac_StartRequest &rArr; HyALStartRequest &rArr; MacWrapperMlmeStartRequest &rArr; MacMlmeStartRequest &rArr; MacMlmeSetRequestSync &rArr; MacRtSetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALStartRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNetworkStartRequest
</UL>

<P><STRONG><a name="[20f]"></a>AdpMac_ScanRequest</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = AdpMac_ScanRequest &rArr; HyALScanRequest &rArr; MacWrapperMlmeScanRequest &rArr; MacMlmeScanRequest &rArr; MacLowTxRequest &rArr; cipher_wrapper_ccm_encrypt_and_tag &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALScanRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpDiscoveryRequest
</UL>

<P><STRONG><a name="[22e]"></a>AdpMac_ResetRequest</STRONG> (Thumb, 82 bytes, Stack size 312 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = AdpMac_ResetRequest &rArr; HyALResetRequest &rArr; MacWrapperMlmeResetRequest &rArr; MacMlmeResetRequest &rArr; MacLowResetRequest &rArr; MacRtResetRequest &rArr; pl360_g3_coup_tx_config
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALSetRequestSync
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALResetRequest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALGetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpResetRequest
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Leave_Callback
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Kick_TimerExpired_Callback
</UL>

<P><STRONG><a name="[231]"></a>AdpMac_GetExtendedAddressSync</STRONG> (Thumb, 76 bytes, Stack size 160 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = AdpMac_GetExtendedAddressSync &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALGetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNetworkStartRequest
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNetworkJoinRequest
</UL>

<P><STRONG><a name="[232]"></a>AdpMac_GetShortAddressSync</STRONG> (Thumb, 42 bytes, Stack size 160 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = AdpMac_GetShortAddressSync &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_MakeWord
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALGetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNetworkStartRequest
</UL>

<P><STRONG><a name="[1a8]"></a>AdpMac_GetNeighbourDescriptorSync</STRONG> (Thumb, 168 bytes, Stack size 328 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = AdpMac_GetNeighbourDescriptorSync &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALGetRequestSync
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ConvertModulation
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ComputeActiveTones
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalculateSubCarriers
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_6
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_ProcessMessage
</UL>

<P><STRONG><a name="[233]"></a>AdpMac_GetMibSync</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adpmacinterface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALGetRequestSync
</UL>

<P><STRONG><a name="[1b5]"></a>AdpMacGetRequestSync</STRONG> (Thumb, 64 bytes, Stack size 160 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = AdpMacGetRequestSync &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALGetRequestSync
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adp_mac_serial_if_set_state
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_persistent_data
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNeighbourDutyCycleUsageRF
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpDutyCycleUsageRF
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNeighbourPhaseDiff
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpShortAddress
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpRcCoord
</UL>

<P><STRONG><a name="[234]"></a>AdpMacGetRequest</STRONG> (Thumb, 82 bytes, Stack size 312 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = AdpMacGetRequest &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALGetRequestSync
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
</UL>

<P><STRONG><a name="[235]"></a>AdpMac_SetPanIdSync</STRONG> (Thumb, 54 bytes, Stack size 160 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = AdpMac_SetPanIdSync &rArr; HyALSetRequestSync &rArr; MacWrapperMlmeSetRequestSync &rArr; MacMlmeSetRequestSync &rArr; MacRtSetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_LoByte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_HiByte
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALSetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNetworkJoinRequest
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_RegisterDevice
</UL>

<P><STRONG><a name="[236]"></a>AdpMac_SetGroupMasterKeySync</STRONG> (Thumb, 64 bytes, Stack size 152 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = AdpMac_SetGroupMasterKeySync &rArr; HyALSetRequestSync &rArr; MacWrapperMlmeSetRequestSync &rArr; MacMlmeSetRequestSync &rArr; MacRtSetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALSetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Accepted
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_RegisterDevice
</UL>

<P><STRONG><a name="[237]"></a>AdpMac_DeleteGroupMasterKeySync</STRONG> (Thumb, 32 bytes, Stack size 152 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = AdpMac_DeleteGroupMasterKeySync &rArr; HyALSetRequestSync &rArr; MacWrapperMlmeSetRequestSync &rArr; MacMlmeSetRequestSync &rArr; MacRtSetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALSetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessParameters
</UL>

<P><STRONG><a name="[238]"></a>AdpMac_SetShortAddressSync</STRONG> (Thumb, 54 bytes, Stack size 160 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = AdpMac_SetShortAddressSync &rArr; HyALSetRequestSync &rArr; MacWrapperMlmeSetRequestSync &rArr; MacMlmeSetRequestSync &rArr; MacRtSetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_LoByte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_HiByte
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALSetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Accepted
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_RegisterDevice
</UL>

<P><STRONG><a name="[182]"></a>AdpMac_SetRcCoordSync</STRONG> (Thumb, 56 bytes, Stack size 160 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = AdpMac_SetRcCoordSync &rArr; HyALSetRequestSync &rArr; MacWrapperMlmeSetRequestSync &rArr; MacMlmeSetRequestSync &rArr; MacRtSetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_LoByte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_HiByte
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALSetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Accepted
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DeleteRoutePosition
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DeleteRoute
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessSuccessfulRREPConfirm
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_RREP
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateRoute
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteDiscover_Callback_MAC_DataConfirm
</UL>

<P><STRONG><a name="[239]"></a>AdpMac_SetExtendedAddressSync</STRONG> (Thumb, 92 bytes, Stack size 152 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = AdpMac_SetExtendedAddressSync &rArr; HyALSetRequestSync &rArr; MacWrapperMlmeSetRequestSync &rArr; MacMlmeSetRequestSync &rArr; MacRtSetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALSetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_RegisterDevice
</UL>

<P><STRONG><a name="[23a]"></a>AdpMac_SecurityResetSync</STRONG> (Thumb, 32 bytes, Stack size 152 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = AdpMac_SecurityResetSync &rArr; HyALSetRequestSync &rArr; MacWrapperMlmeSetRequestSync &rArr; MacMlmeSetRequestSync &rArr; MacRtSetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALSetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessParameters
</UL>

<P><STRONG><a name="[23b]"></a>AdpMac_SetMibSync</STRONG> (Thumb, 36 bytes, Stack size 160 bytes, adpmacinterface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALSetRequestSync
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[23c]"></a>AdpMacSetRequestSync</STRONG> (Thumb, 56 bytes, Stack size 168 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = AdpMacSetRequestSync &rArr; HyALSetRequestSync &rArr; MacWrapperMlmeSetRequestSync &rArr; MacMlmeSetRequestSync &rArr; MacRtSetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALSetRequestSync
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_persistent_info
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_coordinator_api_parser
</UL>

<P><STRONG><a name="[23d]"></a>AdpMacSetRequest</STRONG> (Thumb, 58 bytes, Stack size 176 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = AdpMacSetRequest &rArr; HyALSetRequestSync &rArr; MacWrapperMlmeSetRequestSync &rArr; MacMlmeSetRequestSync &rArr; MacRtSetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALSetRequestSync
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_set_param
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpConfirm
</UL>

<P><STRONG><a name="[1e5]"></a>IsResetPending</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adpmacinterface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpEventHandler
</UL>

<P><STRONG><a name="[23e]"></a>AdpNetworkStartRequest</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, adpnetwork.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = AdpNetworkStartRequest &rArr; AdpMac_StartRequest &rArr; HyALStartRequest &rArr; MacWrapperMlmeStartRequest &rArr; MacMlmeStartRequest &rArr; MacMlmeSetRequestSync &rArr; MacRtSetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_GetShortAddressSync
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_GetExtendedAddressSync
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_StartRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
</UL>

<P><STRONG><a name="[23f]"></a>Network_Join_Confirm</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, adpnetwork.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = Network_Join_Confirm &rArr; Routing_AddRoute &rArr; LOADNG_AddRoute &rArr; GetAdpMaxHops &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_IsDisabled
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_AdpDefaultCoordRouteEnabled
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_AddRoute
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNetworkJoinRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adpnetwork.o(.text)
</UL>
<P><STRONG><a name="[244]"></a>Network_Kick_Notify</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adpnetwork.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Network_Kick_Notify &rArr; Timer_Register
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adpnetwork.o(.text)
</UL>
<P><STRONG><a name="[206]"></a>Network_NetworkJoined</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, adpnetwork.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpDataRequest
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[245]"></a>AdpNetworkJoinRequest</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, adpnetwork.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = AdpNetworkJoinRequest &rArr; BootstrapWrapper_JoinRequest &rArr; LBP_JoinRequest &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootstrapWrapper_JoinRequest
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootstrapWrapper_ForceJoinStatus
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Join_Confirm
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetPanIdSync
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_GetExtendedAddressSync
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
</UL>

<P><STRONG><a name="[248]"></a>Network_Leave_Callback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adpnetwork.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = Network_Leave_Callback &rArr; AdpMac_ResetRequest &rArr; HyALResetRequest &rArr; MacWrapperMlmeResetRequest &rArr; MacMlmeResetRequest &rArr; MacLowResetRequest &rArr; MacRtResetRequest &rArr; pl360_g3_coup_tx_config
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_ResetRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adpnetwork.o(.text)
</UL>
<P><STRONG><a name="[202]"></a>Network_Coordinator</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, adpnetwork.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[249]"></a>AdpNetworkLeaveRequest</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, adpnetwork.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = AdpNetworkLeaveRequest &rArr; BootstrapWrapper_LeaveRequest &rArr; LBP_LeaveRequest &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootstrapWrapper_LeaveRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
</UL>

<P><STRONG><a name="[21d]"></a>Network_RegisterDevice</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, adpnetwork.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = Network_RegisterDevice &rArr; AdpMac_SetShortAddressSync &rArr; HyALSetRequestSync &rArr; MacWrapperMlmeSetRequestSync &rArr; MacMlmeSetRequestSync &rArr; MacRtSetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetShortAddressSync
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetGroupMasterKeySync
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootstrapWrapper_ForceJoined
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetExtendedAddressSync
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetPanIdSync
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpSetMib
</UL>

<P><STRONG><a name="[24c]"></a>AdpPathDiscoveryRequest</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adppathdiscovery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = AdpPathDiscoveryRequest &rArr; Routing_DiscoverPath &rArr; LOADNG_DiscoverPath &rArr; AdpMac_DataRequestHelper &rArr; AdpMac_DataRequest &rArr; HyALDataRequest &rArr; MacWrapperMcpsDataRequestRF &rArr; LogBuffer &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_DiscoverPath
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
</UL>

<P><STRONG><a name="[24e]"></a>AdpResetRequest</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adpreset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = AdpResetRequest &rArr; AdpMac_ResetRequest &rArr; HyALResetRequest &rArr; MacWrapperMlmeResetRequest &rArr; MacMlmeResetRequest &rArr; MacLowResetRequest &rArr; MacRtResetRequest &rArr; pl360_g3_coup_tx_config
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_ResetRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
</UL>

<P><STRONG><a name="[24f]"></a>AdpRouteDiscoveryRequest</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, adproutediscovery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = AdpRouteDiscoveryRequest &rArr; Routing_DiscoverRoute &rArr; LOADNG_DiscoverRoute &rArr; _DiscoverRoute &rArr;  _RREQRERRWait_FindEmptyQueueSlot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_DiscoverRoute
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
</UL>

<P><STRONG><a name="[167]"></a>MacConstantsInitialize</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, macconstants.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacInitialize
</UL>

<P><STRONG><a name="[159]"></a>MacLowTxRequest</STRONG> (Thumb, 662 bytes, Stack size 248 bytes, maclow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = MacLowTxRequest &rArr; cipher_wrapper_ccm_encrypt_and_tag &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_ccm_setkey
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_ccm_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_ccm_free
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_ccm_encrypt_and_tag
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtTxRequest
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTxConfirm
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFrameHeader
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeMhr
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_10
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibGetNeighbourEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeScanRequest
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacEventHandler
</UL>

<P><STRONG><a name="[157]"></a>MacLowResetRequest</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, maclow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = MacLowResetRequest &rArr; MacRtResetRequest &rArr; pl360_g3_coup_tx_config
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtResetRequest
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMibReset
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeResetRequest
</UL>

<P><STRONG><a name="[168]"></a>MacLowInitialize</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, maclow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = MacLowInitialize &rArr; MacRtInitialize &rArr; pl360_g3_coup_tx_config
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtInitialize
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacInitialize
</UL>

<P><STRONG><a name="[16a]"></a>MacLowEventHandler</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, maclow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = MacLowEventHandler &rArr; MacRtEventHandler &rArr; _restore_configuration &rArr; pl360_g3_coup_tx_config
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacEventHandler
</UL>

<P><STRONG><a name="[19f]"></a>ProtoLoadNg_RouteCost_GetLinkCost</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, protoloadng_routecost.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = ProtoLoadNg_RouteCost_GetLinkCost &rArr; ProtoLoadNg_RouteCost_GetLinkCost_CompositeMetric &rArr; ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_CompositeMetric &rArr; GetAdpBandContextTones &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCost_HopCount
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCost_CompositeMetric
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_ProcessMessage
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
</UL>

<P><STRONG><a name="[1a6]"></a>ProtoLoadNg_RouteCost_GetLinkCostUnidirectional</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, protoloadng_routecost.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = ProtoLoadNg_RouteCost_GetLinkCostUnidirectional &rArr; ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_CompositeMetric &rArr; GetAdpBandContextTones &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_HopCount
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_CompositeMetric
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_ProcessMessage
</UL>

<P><STRONG><a name="[19b]"></a>ProtoLoadNg_RouteCost_WeakLinkAdjust</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, protoloadng_routecost.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_WeakLinkAdjust_HopCount
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_WeakLinkAdjust_CompositeMetric
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_WeakLinkAdjust_CapacityMetric
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_RREP
</UL>

<P><STRONG><a name="[1a0]"></a>ProtoLoadNg_RouteCost_MetricSupported</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, protoloadng_routecost.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_SetMib
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
</UL>

<P><STRONG><a name="[1c8]"></a>MacLowTxRequestRF</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, macrflow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = MacLowTxRequestRF &rArr; MacSecurityEncrypt &rArr; cipher_wrapper_ccm_encrypt_and_tag &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTxConfirm
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeIE
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFrameHeader
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSecurityEncrypt
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeMhr
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibGetPOSEntryRF
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeScanRequestRF
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacEventHandlerRF
</UL>

<P><STRONG><a name="[1c6]"></a>MacLowResetRequestRF</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, macrflow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = MacLowResetRequestRF &rArr; PalRfResetRequest &rArr; at86rf_pib_set &rArr; rf215_bbc_set_phy_cfg &rArr; rf215_pll_set_chn_cfg &rArr; rf215_trx_switch_txprep &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfResetRequest
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMibResetRF
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeResetRequestRF
</UL>

<P><STRONG><a name="[1ce]"></a>MacLowInitializeRF</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, macrflow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MacLowInitializeRF &rArr; PalRfInitialize &rArr; at86rf_enable &rArr; rf215_bbc_init &rArr; rf215_pll_init &rArr; _pll_get_params
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfInitialize
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfGetParam
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacInitializeRF
</UL>

<P><STRONG><a name="[1d0]"></a>MacLowEventHandlerRF</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, macrflow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = MacLowEventHandlerRF &rArr; ProcessTxRequest &rArr; PalRfTxRequest &rArr; at86rf_tx_req &rArr; _tx_param_cfg &rArr; rf215_bbc_upd_tx_params &rArr; rf215_fe_set_txpwr &rArr; rf215_trx_switch_trxoff &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfGetPhyTime
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfEventHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTxRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacEventHandlerRF
</UL>

<P><STRONG><a name="[203]"></a>AdpCommon_SecurityEnabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adpcommon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[207]"></a>AdpCommon_DataSendEx</STRONG> (Thumb, 660 bytes, Stack size 56 bytes, adpcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AdpCommon_DataSendEx &rArr; _CheckBufferIndicationCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SignedSysGetUpTimeTenthsSeconds
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckBufferIndicationCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpCommon_DataSend
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[20d]"></a>AdpCommon_DataSend</STRONG> (Thumb, 72 bytes, Stack size 80 bytes, adpcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AdpCommon_DataSend &rArr; AdpCommon_DataSendEx &rArr; _CheckBufferIndicationCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpCommon_DataSendEx
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpLbpRequestExt
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpDataRequest
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpLbpRequest
</UL>

<P><STRONG><a name="[1a3]"></a>GenerateAdpPREQIndication</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adpcommon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
</UL>

<P><STRONG><a name="[29a]"></a>AdpCommon_CheckProcessingQueue</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, adpcommon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DataSendCallbackHelper
</UL>

<P><STRONG><a name="[1e8]"></a>AdpCommon_ProcessSendQueue</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, adpcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = AdpCommon_ProcessSendQueue &rArr; _StartSend &rArr; _ExecuteSend &rArr; Routing_GetRoute &rArr; LOADNG_GetRoute &rArr; GetAdpShortAddress &rArr; AdpMacGetRequestSync &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartSend
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DataSendCallbackHelper
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpEventHandler
</UL>

<P><STRONG><a name="[29b]"></a>AdpCommon_PurgeFullProcessingQueue</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, adpcommon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DataSendCallbackHelper
</UL>

<P><STRONG><a name="[1af]"></a>AdpCommon_PurgeProcessingQueue</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, adpcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = AdpCommon_PurgeProcessingQueue &rArr; Routing_NotifyRouteError &rArr; LOADNG_NotifyRouteError &rArr; _GenerateRouteError &rArr; _RREQRERRWait_FindEmptyQueueSlot &rArr;  _GenerateRouteError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_RouteExists
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_NotifyRouteError
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DataSendCallbackHelper
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteEstablished
</UL>

<P><STRONG><a name="[220]"></a>LoWPAN_Encode_CMD_Bootstrap</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, proto6lowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoWPAN_Encode_CMD_Bootstrap
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpLbpRequestExt
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpLbpRequest
</UL>

<P><STRONG><a name="[17a]"></a>LoWPAN_Encode_CMD_Loadng</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, proto6lowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoWPAN_Encode_CMD_Loadng
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_ProcessMessage
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DiscoverPath
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_RREP
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_TimerExpired_Callback
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PathForward_Callback_MAC_DataConfirm
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GenerateRouteError
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute_Callback_MAC_DataConfirm
</UL>

<P><STRONG><a name="[294]"></a>LoWPAN_Encode_IPv6</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, proto6lowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoWPAN_Encode_IPv6
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSend
</UL>

<P><STRONG><a name="[28a]"></a>LoWPAN_Encode_Broadcast</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, proto6lowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoWPAN_Encode_Broadcast
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSendNextFragment
</UL>

<P><STRONG><a name="[1f5]"></a>LoWPAN_Decode_Broadcast</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, proto6lowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LoWPAN_Decode_Broadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[286]"></a>LoWPAN_Sizeof_MeshHeader</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, proto6lowpan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSendNextFragment
</UL>

<P><STRONG><a name="[296]"></a>LoWPAN_Sizeof_IPv6Header</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, proto6lowpan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSend
</UL>

<P><STRONG><a name="[295]"></a>LoWPAN_Sizeof_Frag1Header</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, proto6lowpan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSend
</UL>

<P><STRONG><a name="[288]"></a>LoWPAN_Sizeof_FragNHeader</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, proto6lowpan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSendNextFragment
</UL>

<P><STRONG><a name="[287]"></a>LoWPAN_Sizeof_BroadcastHeader</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, proto6lowpan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSendNextFragment
</UL>

<P><STRONG><a name="[28c]"></a>LoWPAN_Encode_MeshHeader</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, proto6lowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoWPAN_Encode_MeshHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_LoByte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_HiByte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSendNextFragment
</UL>

<P><STRONG><a name="[1ed]"></a>LoWPAN_Decode_MeshHeader</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, proto6lowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LoWPAN_Decode_MeshHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[297]"></a>LoWPAN_Encode_Frag1Header</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, proto6lowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoWPAN_Encode_Frag1Header
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_LoByte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_HiByte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSend
</UL>

<P><STRONG><a name="[1f8]"></a>LoWPAN_Decode_Frag1Header</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, proto6lowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoWPAN_Decode_Frag1Header
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[289]"></a>LoWPAN_Encode_FragNHeader</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, proto6lowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoWPAN_Encode_FragNHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_LoByte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_HiByte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSendNextFragment
</UL>

<P><STRONG><a name="[1fb]"></a>LoWPAN_Decode_FragNHeader</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, proto6lowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LoWPAN_Decode_FragNHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[1ec]"></a>LoWPAN_IsMeshHeader</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, proto6lowpan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[1ff]"></a>LoWPAN_IsIPv6Header</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, proto6lowpan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[1fd]"></a>LoWPAN_IsCompressedIPv6Header</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, proto6lowpan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[1f4]"></a>LoWPAN_IsBroadcastHeader</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, proto6lowpan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[1ea]"></a>LoWPAN_IsEscHeader</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, proto6lowpan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[1f7]"></a>LoWPAN_IsFrag1Header</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, proto6lowpan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[1fa]"></a>LoWPAN_IsFragNHeader</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, proto6lowpan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[1eb]"></a>LoWPAN_Decode_EscHeader</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, proto6lowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LoWPAN_Decode_EscHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[200]"></a>LoWPAN_Decode_IPv6</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, proto6lowpan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[29c]"></a>GetFragmentedDataEntry</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, proto6lowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetFragmentedDataEntry &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SignedSysGetUpTimeTenthsSeconds
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFragmentReceived
</UL>

<P><STRONG><a name="[29d]"></a>AddFragment</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, proto6lowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AddFragment
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFragmentReceived
</UL>

<P><STRONG><a name="[1f9]"></a>DataFragmentReceived</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, proto6lowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = DataFragmentReceived &rArr; IPv6_DecompressHeader &rArr; _Decompress_NextHeaders &rArr;  _Decompress_NextHeaders (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_RepairHeader
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddFragment
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFragmentedDataEntry
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_DecompressHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[4e]"></a>LoWPAN_DataSend_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, proto6lowpan.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> adp.o(.text)
</UL>
<P><STRONG><a name="[1ef]"></a>IsGroupAddress</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, proto6lowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IsGroupAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[1f6]"></a>SearchBroadcastLogTable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, proto6lowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SearchBroadcastLogTable &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartSend
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[28b]"></a>AddBroadcastLogTable</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, proto6lowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AddBroadcastLogTable &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SignedSysGetUpTimeTenthsSeconds
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPastCmp
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSendNextFragment
</UL>

<P><STRONG><a name="[20a]"></a>IPv6_IsValid</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, protorfc6282.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IPv6_IsValid
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpDataRequest
</UL>

<P><STRONG><a name="[20b]"></a>IPv6_GetShortDestinationAddress</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, protorfc6282.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IPv6_GetShortDestinationAddress &rArr; Timer_IsPast10Seconds
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast10Seconds
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpDataRequest
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_CompressHeader
</UL>

<P><STRONG><a name="[20c]"></a>IPv6_IsMulticast</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, protorfc6282.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpDataRequest
</UL>

<P><STRONG><a name="[29e]"></a>IPv6_RepairHeader</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, protorfc6282.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IPv6_RepairHeader &rArr; _UDP_ComputeChk
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_N2Hs
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UDP_ComputeChk
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFragmentReceived
</UL>

<P><STRONG><a name="[1fe]"></a>IPv6_DecompressHeader</STRONG> (Thumb, 990 bytes, Stack size 112 bytes, protorfc6282.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = IPv6_DecompressHeader &rArr; _Decompress_NextHeaders &rArr;  _Decompress_NextHeaders (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Decompress_Address_Stateless
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Decompress_Address_Stateful
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Decompress_NextHeaders
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFragmentReceived
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[293]"></a>IPv6_CompressHeader</STRONG> (Thumb, 1446 bytes, Stack size 224 bytes, protorfc6282.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = IPv6_CompressHeader &rArr; _Compress_Address &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_LoByte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_HiByte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Compress_Address
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Compress_IPv6Extension
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_GetShortDestinationAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSend
</UL>

<P><STRONG><a name="[2a7]"></a>ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_CapacityMetric</STRONG> (Thumb, 270 bytes, Stack size 0 bytes, protoloadng_routecost_capacitymetric.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCost_CapacityMetric
</UL>

<P><STRONG><a name="[2a6]"></a>ProtoLoadNg_RouteCost_GetLinkCost_CapacityMetric</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, protoloadng_routecost_capacitymetric.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_CapacityMetric
</UL>

<P><STRONG><a name="[269]"></a>ProtoLoadNg_RouteCost_WeakLinkAdjust_CapacityMetric</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protoloadng_routecost_capacitymetric.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_WeakLinkAdjust
</UL>

<P><STRONG><a name="[265]"></a>ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_CompositeMetric</STRONG> (Thumb, 564 bytes, Stack size 48 bytes, protoloadng_routecost_compositemetric.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_CompositeMetric &rArr; GetAdpBandContextTones &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNeighbourDutyCycleUsageRF
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpDutyCycleUsageRF
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpBandContextTones
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCost_CompositeMetric
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCostUnidirectional
</UL>

<P><STRONG><a name="[263]"></a>ProtoLoadNg_RouteCost_GetLinkCost_CompositeMetric</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, protoloadng_routecost_compositemetric.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = ProtoLoadNg_RouteCost_GetLinkCost_CompositeMetric &rArr; ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_CompositeMetric &rArr; GetAdpBandContextTones &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_CompositeMetric
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCost
</UL>

<P><STRONG><a name="[268]"></a>ProtoLoadNg_RouteCost_WeakLinkAdjust_CompositeMetric</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protoloadng_routecost_compositemetric.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_WeakLinkAdjust
</UL>

<P><STRONG><a name="[264]"></a>ProtoLoadNg_RouteCost_GetLinkCost_HopCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protoloadng_routecost_hopcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCost
</UL>

<P><STRONG><a name="[266]"></a>ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_HopCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protoloadng_routecost_hopcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCostUnidirectional
</UL>

<P><STRONG><a name="[267]"></a>ProtoLoadNg_RouteCost_WeakLinkAdjust_HopCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protoloadng_routecost_hopcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_WeakLinkAdjust
</UL>

<P><STRONG><a name="[519]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[51a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[38b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_init
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1us_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_reset
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_reset
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_delay
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1us_hal_init
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pll_set_chn_cfg
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_pll_get_fdelta
</UL>

<P><STRONG><a name="[51b]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[2ae]"></a>vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogBuffer
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
</UL>

<P><STRONG><a name="[2b0]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_start
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_persistent_data_GPBR
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_persistent_info
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adp_mac_serial_if_set_state
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_set_param
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_launch_rekeying
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_kick_device
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_get_param
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rekeying_process
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpIndication
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpConfirm
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bootstrap_slots
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_lbds_list_entry
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_accepted_GMK_activation
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_show_slots_status
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_address
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootstrap_slot_by_addr
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_get_short_addr_by_ext
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_get_ext_addr_by_short
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_lbds_list_entry
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Joining0
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessLBPMessage
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_persistent_info
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtTxRequest
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtSetRequestSync
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtSetCoordinator
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtResetRequest
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtInitialize
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtGetToneMapResponseData
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtGetRequestSync
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtGetPhyTime
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_confirm_cb
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_restore_configuration
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_process_frame_cb
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_exception_event_cb
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usi_encode_and_send
</UL>

<P><STRONG><a name="[2c3]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2c4]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2b1]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2b2]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[118]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[2b4]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[11e]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[126]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[110]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[2b5]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[2b8]"></a>setbuf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, setbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setbuf &rArr; setvbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_hw
</UL>

<P><STRONG><a name="[2ba]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_random_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[130]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[14c]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message2
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message3
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_ProcessMessage
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge_ThirdMessage
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_decrypt_message
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootstrap_slot_by_addr
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessLBPMessage
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeSetRequestSync
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_fe_upd_phy_cfg
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_set_phy_cfg
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Compress_Address
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_CompressHeader
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtCbProcessFrame
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDsnEntry
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_GetShortDestinationAddress
</UL>

<P><STRONG><a name="[333]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
</UL>

<P><STRONG><a name="[3ba]"></a>memchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, memchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_process
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usi_encode_and_send
</UL>

<P><STRONG><a name="[145]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_tx_req
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message3
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message1
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message2
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message4
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message2
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message3
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message1
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpLbpRequestExt
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_ProcessMessage
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_LeaveRequest
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_JoinRequest
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Accepted
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_update
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_finish
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_key
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_send_spi_cmd
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl360_g3_coup_tx_config
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_random_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootstrapNotification_LeaveIndication
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNetworkStartRequest
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNetworkJoinRequest
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacSetRequestSync
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacGetRequest
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_triggerAdpSetRequest
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAdpNotification_RouteNotFoundIndication
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_NetworkStatusIndication
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpIndication
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_GetMacConfirm
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_GetConfirm
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_AdpdDataIndication
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_MIB_set_request
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_MIB_get_confirm
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpInitialize
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_MacSnifferIndicationRF
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_MacSnifferIndication
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_DataIndicationRF
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_DataIndication
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_CommStatusIndicationRF
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_CommStatusIndication
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_coordinator_api_parser
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacGetRequestSync
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacSetRequest
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpLbpRequest
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ids
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbp_init_functions
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeSetRequestSyncRF
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeSetRequestSync
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeGetRequestSyncRF
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeGetRequestSync
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMcpsDataRequestRF
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMcpsDataRequest
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacEventHandler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALDataRequest
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpCommStatusIndicationRF
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpCommStatusIndication
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_persistent_data
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_ProcessMessage
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetMib
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_send_wrrd_cmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_send_boot_cmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtSetRequestSync
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtResetRequest
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_restore_configuration
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_mib_backup_info
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_user_signature
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_write_storage
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_read_storage
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_udc_read_buf
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOM4_Handler
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_write
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_read
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usi_encode_and_send
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_req
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_req
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_comm_tx_stringify
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_sniffer_if_stringify_tx
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_sniffer_if_stringify_ind
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_multi_write_buf
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_multi_read_buf
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Compress_Address
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Decompress_Address_Stateful
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_CompressHeader
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSendNextFragment
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRFCbDataIndication
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSecurityEncrypt
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PathDiscovery_Callback
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetMibSync
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALDataIndication
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_RegisterDevice
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpSetMib
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetMib
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_DecompressHeader
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFragmentReceived
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpCommon_DataSendEx
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequestRF
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_DataRequestHelper
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequest
</UL>

<P><STRONG><a name="[2bb]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[51c]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_Encode_ChallengeRequest
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_Encode_AcceptedRequest
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_Encode_JoiningRequest
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeSetRequestSyncRF
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeSetRequestSync
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_checkDuplicates
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Compress_IPv6Extension
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Decompress_NextHeaders
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_MeshHeader
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_IPv6
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_FragNHeader
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_Frag1Header
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_Broadcast
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_CompressHeader
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePOSTableRF
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtCbTxConfirm
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtCbProcessFrame
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDsnEntry
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_CMD_Bootstrap
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_DecompressHeader
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxConfirmRF
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibGetDeviceEntryRF
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_CMD_Loadng
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxConfirm
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleToneMapResponse
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibGetDeviceEntry
</UL>

<P><STRONG><a name="[2bc]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[51d]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeResetRequestRF
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeResetRequest
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacInitializeRF
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacInitialize
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALInitialize
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_rx_event_handler
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSecurityDecrypt
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowResetRequestRF
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowInitializeRF
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibResetInternalRF
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_RREP
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteDiscover_Callback_MAC_DataConfirm
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowResetRequest
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowInitialize
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibResetInternal
</UL>

<P><STRONG><a name="[51e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[51f]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[520]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1us_set_int
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1us_cancel_int
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DeleteRoutePosition
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DeleteRoute
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_AddRouteEntry
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC2_Handler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowEventHandlerRF
</UL>

<P><STRONG><a name="[521]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2bd]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[522]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>memset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_util.o(.data)
</UL>
<P><STRONG><a name="[16b]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperInitialize
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_SetMib
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_Reset
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DiscoverPath
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALDataIndication
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_GetNeighbourDescriptorSync
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleToneMapResponse
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Initialize
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_init
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_process
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpInitialize
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbp_init_functions
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_bootstrap_message
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessLBPMessage
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeSetRequestSyncRF
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeSetRequestSync
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_Reset
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpConfGetProcessQueuePtr
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpConfGetFragmentedTransferTablePtr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpConfGet400BufPtr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpConfGet1280BufPtr
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpConfGet100BufPtr
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_send_wrrd_cmd
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_udc_start
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_calloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_req
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Decompress_NextHeaders
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpSetMib
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_Reset
</UL>

<P><STRONG><a name="[2c0]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[2bf]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[16d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_pib_set
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_enable
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_Reset
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Rekey_TimerExpired_Callback
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Confirm
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_init_and_key
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_end
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperInitializeRF
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperInitialize
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpInitialize
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbp_init_functions
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_Reset
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_init
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractFrameFromPsdu
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PathDiscovery_Callback
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowEventHandlerRF
</UL>

<P><STRONG><a name="[523]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[524]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2c1]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[4da]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[525]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[526]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[527]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[2b3]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[10e]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[2af]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>

<P><STRONG><a name="[2c7]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[120]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[2ca]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[11c]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[124]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[2b9]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
</UL>

<P><STRONG><a name="[2c9]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[528]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[2d3]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[2c5]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[2d4]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[128]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[12a]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[2d5]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[12c]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[12e]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[2c8]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[529]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[52a]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2d6]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[132]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2d2]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2cc]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[13c]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2cd]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2db]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[2da]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[2dc]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[2dd]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[2ce]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2cf]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2de]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[3d]"></a>ADC_Handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, adc2.o(i.ADC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[1d8]"></a>AdpConfGet100BufCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adpconf.o(i.AdpConfGet100BufCount))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_Reset
</UL>

<P><STRONG><a name="[1d5]"></a>AdpConfGet100BufPtr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, adpconf.o(i.AdpConfGet100BufPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AdpConfGet100BufPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_Reset
</UL>

<P><STRONG><a name="[1d6]"></a>AdpConfGet1280BufCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adpconf.o(i.AdpConfGet1280BufCount))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_Reset
</UL>

<P><STRONG><a name="[1d3]"></a>AdpConfGet1280BufPtr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, adpconf.o(i.AdpConfGet1280BufPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AdpConfGet1280BufPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_Reset
</UL>

<P><STRONG><a name="[1d7]"></a>AdpConfGet400BufCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adpconf.o(i.AdpConfGet400BufCount))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_Reset
</UL>

<P><STRONG><a name="[1d4]"></a>AdpConfGet400BufPtr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, adpconf.o(i.AdpConfGet400BufPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AdpConfGet400BufPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_Reset
</UL>

<P><STRONG><a name="[1dc]"></a>AdpConfGetFragmentedTransferTableCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adpconf.o(i.AdpConfGetFragmentedTransferTableCount))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_Reset
</UL>

<P><STRONG><a name="[1db]"></a>AdpConfGetFragmentedTransferTablePtr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, adpconf.o(i.AdpConfGetFragmentedTransferTablePtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AdpConfGetFragmentedTransferTablePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_Reset
</UL>

<P><STRONG><a name="[1da]"></a>AdpConfGetProcessQueueCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adpconf.o(i.AdpConfGetProcessQueueCount))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_Reset
</UL>

<P><STRONG><a name="[1d9]"></a>AdpConfGetProcessQueuePtr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, adpconf.o(i.AdpConfGetProcessQueuePtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AdpConfGetProcessQueuePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_Reset
</UL>

<P><STRONG><a name="[1dd]"></a>AdpConfGetSpecCompliance</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adpconf.o(i.AdpConfGetSpecCompliance))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_Reset
</UL>

<P><STRONG><a name="[246]"></a>BootstrapWrapper_ForceJoinStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bootstrapwrapper.o(i.BootstrapWrapper_ForceJoinStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = BootstrapWrapper_ForceJoinStatus &rArr; LBP_ForceJoinStatus &rArr; _SetBootState &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_ForceJoinStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNetworkJoinRequest
</UL>

<P><STRONG><a name="[24b]"></a>BootstrapWrapper_ForceJoined</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bootstrapwrapper.o(i.BootstrapWrapper_ForceJoined))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = BootstrapWrapper_ForceJoined &rArr; LBP_ForceJoined &rArr; _SetBootState &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_ForceJoined
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_RegisterDevice
</UL>

<P><STRONG><a name="[21c]"></a>BootstrapWrapper_InitEapPsk</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bootstrapwrapper.o(i.BootstrapWrapper_InitEapPsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 2416<LI>Call Chain = BootstrapWrapper_InitEapPsk &rArr; LBP_InitEapPsk &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_InitEapPsk
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpSetMib
</UL>

<P><STRONG><a name="[247]"></a>BootstrapWrapper_JoinRequest</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bootstrapwrapper.o(i.BootstrapWrapper_JoinRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = BootstrapWrapper_JoinRequest &rArr; LBP_JoinRequest &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_JoinRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNetworkJoinRequest
</UL>

<P><STRONG><a name="[24a]"></a>BootstrapWrapper_LeaveRequest</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bootstrapwrapper.o(i.BootstrapWrapper_LeaveRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = BootstrapWrapper_LeaveRequest &rArr; LBP_LeaveRequest &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_LeaveRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNetworkLeaveRequest
</UL>

<P><STRONG><a name="[205]"></a>BootstrapWrapper_ProcessMessage</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bootstrapwrapper.o(i.BootstrapWrapper_ProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 3744 + Unknown Stack Size
<LI>Call Chain = BootstrapWrapper_ProcessMessage &rArr; LBP_ProcessMessage &rArr; _Join_Process_Challenge &rArr; _Join_Process_Challenge_ThirdMessage &rArr; _ProcessParameters &rArr; AdpSetRequestSync &rArr; AdpSetMib &rArr; BootstrapWrapper_InitEapPsk &rArr; LBP_InitEapPsk &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_ProcessMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[1de]"></a>BootstrapWrapper_Reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bootstrapwrapper.o(i.BootstrapWrapper_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BootstrapWrapper_Reset &rArr; LBP_Reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_Reset
</UL>

<P><STRONG><a name="[176]"></a>Byte_HiByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, byte.o(i.Byte_HiByte))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random128
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetShortAddressSync
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetRcCoordSync
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_ProcessMessage
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Compress_Address
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Decompress_Address_Stateless
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Decompress_Address_Stateful
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_MeshHeader
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_FragNHeader
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_Frag1Header
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_CompressHeader
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetPanIdSync
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode_RREP
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode_RERR
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode_PREP
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode_RREQ
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode_PREQ
</UL>

<P><STRONG><a name="[177]"></a>Byte_LoByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, byte.o(i.Byte_LoByte))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random128
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetShortAddressSync
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetRcCoordSync
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_ProcessMessage
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Compress_Address
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Decompress_Address_Stateless
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Decompress_Address_Stateful
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_MeshHeader
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_FragNHeader
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_Frag1Header
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_CompressHeader
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetPanIdSync
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode_RREP
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode_RERR
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode_PREP
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode_RREQ
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode_PREQ
</UL>

<P><STRONG><a name="[19e]"></a>Byte_MakeWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, byte.o(i.Byte_MakeWord))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Decompress_NextHeaders
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_GetShortAddressSync
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
</UL>

<P><STRONG><a name="[29f]"></a>Byte_N2Hs</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, byte.o(i.Byte_N2Hs))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_RepairHeader
</UL>

<P><STRONG><a name="[34e]"></a>EAP_PSK_Decode_Message</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, protoeappsk.o(i.EAP_PSK_Decode_Message))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EAP_PSK_Decode_Message
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Accepted
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessLBPMessage
</UL>

<P><STRONG><a name="[2f8]"></a>EAP_PSK_Decode_Message1</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, protoeappsk.o(i.EAP_PSK_Decode_Message1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EAP_PSK_Decode_Message1
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge
</UL>

<P><STRONG><a name="[2f9]"></a>EAP_PSK_Decode_Message2</STRONG> (Thumb, 596 bytes, Stack size 288 bytes, protoeappsk.o(i.EAP_PSK_Decode_Message2))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = EAP_PSK_Decode_Message2 &rArr; cipher_wrapper_cipher_cmac_finish &rArr; mbedtls_cipher_cmac_finish &rArr; cmac_generate_subkeys &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_setup
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_info_from_type
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_free
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_cmac_update
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_cmac_starts
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_cmac_reset
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_cmac_finish
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessLBPMessage
</UL>

<P><STRONG><a name="[303]"></a>EAP_PSK_Decode_Message3</STRONG> (Thumb, 856 bytes, Stack size 352 bytes, protoeappsk.o(i.EAP_PSK_Decode_Message3))
<BR><BR>[Stack]<UL><LI>Max Depth = 2528 + Unknown Stack Size
<LI>Call Chain = EAP_PSK_Decode_Message3 &rArr; eax_decrypt_message &rArr; eax_init_message &rArr; aes_encrypt &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogBuffer
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_setup
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_info_from_type
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_free
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_cmac_update
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_cmac_starts
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_cmac_reset
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_cmac_finish
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_init_and_key
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_end
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_decrypt_message
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge_ThirdMessage
</UL>

<P><STRONG><a name="[308]"></a>EAP_PSK_Decode_Message4</STRONG> (Thumb, 496 bytes, Stack size 224 bytes, protoeappsk.o(i.EAP_PSK_Decode_Message4))
<BR><BR>[Stack]<UL><LI>Max Depth = 2400 + Unknown Stack Size
<LI>Call Chain = EAP_PSK_Decode_Message4 &rArr; eax_decrypt_message &rArr; eax_init_message &rArr; aes_encrypt &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogBuffer
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_init_and_key
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_end
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_decrypt_message
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessLBPMessage
</UL>

<P><STRONG><a name="[34b]"></a>EAP_PSK_Encode_EAP_Failure</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, protoeappsk.o(i.EAP_PSK_Encode_EAP_Failure))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessLBPMessage
</UL>

<P><STRONG><a name="[34f]"></a>EAP_PSK_Encode_EAP_Success</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, protoeappsk.o(i.EAP_PSK_Encode_EAP_Success))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessLBPMessage
</UL>

<P><STRONG><a name="[478]"></a>EAP_PSK_Encode_GMK_Activation</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, protoeappsk.o(i.EAP_PSK_Encode_GMK_Activation))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_accepted_GMK_activation
</UL>

<P><STRONG><a name="[309]"></a>EAP_PSK_Encode_Message1</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, protoeappsk.o(i.EAP_PSK_Encode_Message1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EAP_PSK_Encode_Message1
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Joining0
</UL>

<P><STRONG><a name="[30a]"></a>EAP_PSK_Encode_Message2</STRONG> (Thumb, 618 bytes, Stack size 240 bytes, protoeappsk.o(i.EAP_PSK_Encode_Message2))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = EAP_PSK_Encode_Message2 &rArr; cipher_wrapper_cipher_cmac_finish &rArr; mbedtls_cipher_cmac_finish &rArr; cmac_generate_subkeys &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogBuffer
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_setup
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_info_from_type
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_free
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_cmac_update
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_cmac_starts
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_cmac_reset
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_cmac_finish
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge
</UL>

<P><STRONG><a name="[30b]"></a>EAP_PSK_Encode_Message3</STRONG> (Thumb, 866 bytes, Stack size 352 bytes, protoeappsk.o(i.EAP_PSK_Encode_Message3))
<BR><BR>[Stack]<UL><LI>Max Depth = 2512 + Unknown Stack Size
<LI>Call Chain = EAP_PSK_Encode_Message3 &rArr; eax_encrypt_message &rArr; eax_init_message &rArr; aes_encrypt &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogBuffer
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_setup
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_info_from_type
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_free
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_cmac_update
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_cmac_starts
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_cmac_reset
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_cmac_finish
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_init_and_key
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_end
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_encrypt_message
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessLBPMessage
</UL>

<P><STRONG><a name="[30d]"></a>EAP_PSK_Encode_Message4</STRONG> (Thumb, 458 bytes, Stack size 200 bytes, protoeappsk.o(i.EAP_PSK_Encode_Message4))
<BR><BR>[Stack]<UL><LI>Max Depth = 2360 + Unknown Stack Size
<LI>Call Chain = EAP_PSK_Encode_Message4 &rArr; eax_encrypt_message &rArr; eax_init_message &rArr; aes_encrypt &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogBuffer
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_init_and_key
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_end
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_encrypt_message
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge_ThirdMessage
</UL>

<P><STRONG><a name="[30e]"></a>EAP_PSK_Initialize</STRONG> (Thumb, 116 bytes, Stack size 328 bytes, protoeappsk.o(i.EAP_PSK_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 2416<LI>Call Chain = EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrapper_aes_setkey_enc
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrapper_aes_init
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrapper_aes_free
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrapper_aes_encrypt
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_InitEapPsk
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Joining0
</UL>

<P><STRONG><a name="[313]"></a>EAP_PSK_InitializeTEK</STRONG> (Thumb, 78 bytes, Stack size 312 bytes, protoeappsk.o(i.EAP_PSK_InitializeTEK))
<BR><BR>[Stack]<UL><LI>Max Depth = 2400<LI>Call Chain = EAP_PSK_InitializeTEK &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrapper_aes_setkey_enc
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrapper_aes_init
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrapper_aes_free
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrapper_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessLBPMessage
</UL>

<P><STRONG><a name="[3ed]"></a>Encode_kick_to_LBD</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bs_functions.o(i.Encode_kick_to_LBD))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_kick_device
</UL>

<P><STRONG><a name="[29]"></a>FLEXCOM0_Handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, prf_if.o(i.FLEXCOM0_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCOM0_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_get_interrupt_status
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_enable_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>FLEXCOM4_Handler</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, busart_if.o(i.FLEXCOM4_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLEXCOM4_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_start
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_get_status
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdc_rx_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[2eb]"></a>GetGMK</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bs_functions.o(i.GetGMK))
<BR><BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpConfirm
</UL>

<P><STRONG><a name="[2e8]"></a>GetKeyIndex</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bs_functions.o(i.GetKeyIndex))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpConfirm
</UL>

<P><STRONG><a name="[2e9]"></a>GetRekeyGMK</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bs_functions.o(i.GetRekeyGMK))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpConfirm
</UL>

<P><STRONG><a name="[22a]"></a>HyALDataRequest</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, hyal.o(i.HyALDataRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = HyALDataRequest &rArr; MacWrapperMcpsDataRequestRF &rArr; LogBuffer &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogBuffer
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMcpsDataRequestRF
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMcpsDataRequest
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_DataRequest
</UL>

<P><STRONG><a name="[227]"></a>HyALEventHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hyal.o(i.HyALEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = HyALEventHandler &rArr; MacWrapperEventHandler &rArr; MacEventHandler &rArr; MacLowTxRequest &rArr; cipher_wrapper_ccm_encrypt_and_tag &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperEventHandlerRF
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_EventHandler
</UL>

<P><STRONG><a name="[217]"></a>HyALGetNeighbourTableSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hyal.o(i.HyALGetNeighbourTableSize))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperGetNeighbourTableSize
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetNeighbourLQI
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetMib
</UL>

<P><STRONG><a name="[1a7]"></a>HyALGetRequestSync</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hyal.o(i.HyALGetRequestSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeGetRequestSyncRF
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeGetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacGetRequest
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacGetRequestSync
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_ProcessMessage
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_GetMibSync
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_GetShortAddressSync
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_GetExtendedAddressSync
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_ResetRequest
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALDataIndication
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetNeighbourLQI
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetMib
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_GetNeighbourDescriptorSync
</UL>

<P><STRONG><a name="[226]"></a>HyALInitialize</STRONG> (Thumb, 176 bytes, Stack size 96 bytes, hyal.o(i.HyALInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = HyALInitialize &rArr; MacWrapperInitialize &rArr; MacInitialize &rArr; MacLowInitialize &rArr; MacRtInitialize &rArr; pl360_g3_coup_tx_config
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperInitializeRF
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperInitialize
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_Initialize
</UL>

<P><STRONG><a name="[22f]"></a>HyALResetRequest</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hyal.o(i.HyALResetRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = HyALResetRequest &rArr; MacWrapperMlmeResetRequest &rArr; MacMlmeResetRequest &rArr; MacLowResetRequest &rArr; MacRtResetRequest &rArr; pl360_g3_coup_tx_config
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeResetRequestRF
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeResetRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_ResetRequest
</UL>

<P><STRONG><a name="[22d]"></a>HyALScanRequest</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hyal.o(i.HyALScanRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = HyALScanRequest &rArr; MacWrapperMlmeScanRequest &rArr; MacMlmeScanRequest &rArr; MacLowTxRequest &rArr; cipher_wrapper_ccm_encrypt_and_tag &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeScanRequestRF
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeScanRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_ScanRequest
</UL>

<P><STRONG><a name="[230]"></a>HyALSetRequestSync</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hyal.o(i.HyALSetRequestSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = HyALSetRequestSync &rArr; MacWrapperMlmeSetRequestSync &rArr; MacMlmeSetRequestSync &rArr; MacRtSetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeSetRequestSync
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeSetRequestSyncRF
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetShortAddressSync
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetRcCoordSync
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetGroupMasterKeySync
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SecurityResetSync
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_DeleteGroupMasterKeySync
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacSetRequestSync
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacSetRequest
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetMibSync
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetExtendedAddressSync
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetPanIdSync
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_ResetRequest
</UL>

<P><STRONG><a name="[22c]"></a>HyALStartRequest</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hyal.o(i.HyALStartRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = HyALStartRequest &rArr; MacWrapperMlmeStartRequest &rArr; MacMlmeStartRequest &rArr; MacMlmeSetRequestSync &rArr; MacRtSetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeStartRequestRF
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeStartRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_StartRequest
</UL>

<P><STRONG><a name="[32f]"></a>LBP_Decode_Message</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, protolbp.o(i.LBP_Decode_Message))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LBP_Decode_Message
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_ProcessMessage
</UL>

<P><STRONG><a name="[32a]"></a>LBP_Encode_AcceptedRequest</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, protolbp.o(i.LBP_Encode_AcceptedRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LBP_Encode_AcceptedRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_accepted_GMK_activation
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessLBPMessage
</UL>

<P><STRONG><a name="[32b]"></a>LBP_Encode_ChallengeRequest</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, protolbp.o(i.LBP_Encode_ChallengeRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LBP_Encode_ChallengeRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Joining0
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessLBPMessage
</UL>

<P><STRONG><a name="[32c]"></a>LBP_Encode_JoiningRequest</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, protolbp.o(i.LBP_Encode_JoiningRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LBP_Encode_JoiningRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_JoinRequest
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge_ThirdMessage
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Accepted
</UL>

<P><STRONG><a name="[32e]"></a>LBP_Encode_KickFromLBDRequest</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, protolbp.o(i.LBP_Encode_KickFromLBDRequest))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_LeaveRequest
</UL>

<P><STRONG><a name="[2f1]"></a>LBP_ForceJoinStatus</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, processlbp.o(i.LBP_ForceJoinStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = LBP_ForceJoinStatus &rArr; _SetBootState &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBootState
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootstrapWrapper_ForceJoinStatus
</UL>

<P><STRONG><a name="[2f2]"></a>LBP_ForceJoined</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, processlbp.o(i.LBP_ForceJoined))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = LBP_ForceJoined &rArr; _SetBootState &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBootState
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootstrapWrapper_ForceJoined
</UL>

<P><STRONG><a name="[2f3]"></a>LBP_InitEapPsk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, processlbp.o(i.LBP_InitEapPsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 2416<LI>Call Chain = LBP_InitEapPsk &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootstrapWrapper_InitEapPsk
</UL>

<P><STRONG><a name="[2f4]"></a>LBP_JoinRequest</STRONG> (Thumb, 226 bytes, Stack size 328 bytes, processlbp.o(i.LBP_JoinRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = LBP_JoinRequest &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Register
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_Encode_JoiningRequest
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpLbpRequestExt
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetRequestSync
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBootState
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootstrapWrapper_JoinRequest
</UL>

<P><STRONG><a name="[2f5]"></a>LBP_LeaveRequest</STRONG> (Thumb, 84 bytes, Stack size 328 bytes, processlbp.o(i.LBP_LeaveRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = LBP_LeaveRequest &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_Encode_KickFromLBDRequest
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpLbpRequestExt
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetRequestSync
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootstrapWrapper_LeaveRequest
</UL>

<P><STRONG><a name="[2f6]"></a>LBP_ProcessMessage</STRONG> (Thumb, 674 bytes, Stack size 344 bytes, processlbp.o(i.LBP_ProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 3736 + Unknown Stack Size
<LI>Call Chain = LBP_ProcessMessage &rArr; _Join_Process_Challenge &rArr; _Join_Process_Challenge_ThirdMessage &rArr; _ProcessParameters &rArr; AdpSetRequestSync &rArr; AdpSetMib &rArr; BootstrapWrapper_InitEapPsk &rArr; LBP_InitEapPsk &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_Decode_Message
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpLbpRequestExt
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetRequestSync
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Accepted
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Confirm
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootstrapWrapper_ProcessMessage
</UL>

<P><STRONG><a name="[2f7]"></a>LBP_Reset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, processlbp.o(i.LBP_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LBP_Reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootstrapWrapper_Reset
</UL>

<P><STRONG><a name="[2fc]"></a>Log</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, logger.o(i.Log))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message3
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message4
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message2
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message4
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message2
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message3
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_ProcessMessage
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_JoinRequest
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBootState
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Rekey_TimerExpired_Callback
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessParameters
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_TimerExpired_Callback
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge_ThirdMessage
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Accepted
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Confirm
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeScanRequestRF
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeScanRequest
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMcpsDataRequestRF
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMcpsDataRequest
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperInitializeRF
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperInitialize
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMlmeScanConfirmRF
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMlmeScanConfirm
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMlmeBeaconNotifyRF
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMlmeBeaconNotify
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMcpsDataIndicationRF
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMcpsDataIndication
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMcpsDataConfirmRF
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMcpsDataConfirm
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALScanRequest
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALInitialize
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALDataRequest
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getDataReqEntryByHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpScanConfirmRF
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpScanConfirm
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpDataIndicationRF
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpDataIndication
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpDataConfirmRF
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpDataConfirm
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpBeaconNotifyRF
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpBeaconNotify
</UL>

<P><STRONG><a name="[305]"></a>LogBuffer</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, logger.o(i.LogBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = LogBuffer &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message3
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message4
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message4
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message2
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message3
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessParameters
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMcpsDataRequestRF
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMcpsDataRequest
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALDataRequest
</UL>

<P><STRONG><a name="[2fb]"></a>LogGetFileName</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, logger.o(i.LogGetFileName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LogGetFileName &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message3
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message4
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message2
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message4
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message2
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message3
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_ProcessMessage
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_JoinRequest
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBootState
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Rekey_TimerExpired_Callback
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessParameters
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_TimerExpired_Callback
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge_ThirdMessage
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Accepted
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Confirm
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeScanRequestRF
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeScanRequest
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMcpsDataRequestRF
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMcpsDataRequest
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperInitializeRF
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperInitialize
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMlmeScanConfirmRF
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMlmeScanConfirm
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMlmeBeaconNotifyRF
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMlmeBeaconNotify
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMcpsDataIndicationRF
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMcpsDataIndication
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMcpsDataConfirmRF
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMcpsDataConfirm
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALScanRequest
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALInitialize
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALDataRequest
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getDataReqEntryByHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpScanConfirmRF
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpScanConfirm
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpDataIndicationRF
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpDataIndication
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpDataConfirmRF
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpDataConfirm
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpBeaconNotifyRF
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpBeaconNotify
</UL>

<P><STRONG><a name="[261]"></a>MacRtEventHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pal.o(i.MacRtEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = MacRtEventHandler &rArr; _restore_configuration &rArr; pl360_g3_coup_tx_config
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_handle_events
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_restore_configuration
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_led_int_off
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowEventHandler
</UL>

<P><STRONG><a name="[162]"></a>MacRtGetPhyTime</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pal.o(i.MacRtGetPhyTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MacRtGetPhyTime &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacEventHandler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowRxIndication
</UL>

<P><STRONG><a name="[147]"></a>MacRtGetRequestSync</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pal.o(i.MacRtGetRequestSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeGetRequestSync
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacInitialize
</UL>

<P><STRONG><a name="[253]"></a>MacRtGetToneMapResponseData</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pal.o(i.MacRtGetToneMapResponseData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MacRtGetToneMapResponseData &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memset4_3
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
</UL>

<P><STRONG><a name="[260]"></a>MacRtInitialize</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, pal.o(i.MacRtInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = MacRtInitialize &rArr; pl360_g3_coup_tx_config
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl360_g3_coup_tx_config
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_enable
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_mib_backup_info
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowInitialize
</UL>

<P><STRONG><a name="[25f]"></a>MacRtResetRequest</STRONG> (Thumb, 144 bytes, Stack size 200 bytes, pal.o(i.MacRtResetRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = MacRtResetRequest &rArr; pl360_g3_coup_tx_config
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl360_g3_coup_tx_config
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_enable
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_mib_backup_info
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowResetRequest
</UL>

<P><STRONG><a name="[15b]"></a>MacRtSetCoordinator</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pal.o(i.MacRtSetCoordinator))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MacRtSetCoordinator &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeStartRequest
</UL>

<P><STRONG><a name="[14b]"></a>MacRtSetRequestSync</STRONG> (Thumb, 402 bytes, Stack size 16 bytes, pal.o(i.MacRtSetRequestSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = MacRtSetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeSetRequestSync
</UL>

<P><STRONG><a name="[25e]"></a>MacRtTxRequest</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, pal.o(i.MacRtTxRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = MacRtTxRequest &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequest
</UL>

<P><STRONG><a name="[31b]"></a>MacWrapperEventHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mac_wrapper.o(i.MacWrapperEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = MacWrapperEventHandler &rArr; MacEventHandler &rArr; MacLowTxRequest &rArr; cipher_wrapper_ccm_encrypt_and_tag &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adp_mac_serial_if_process
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALEventHandler
</UL>

<P><STRONG><a name="[31c]"></a>MacWrapperEventHandlerRF</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mac_wrapper.o(i.MacWrapperEventHandlerRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = MacWrapperEventHandlerRF &rArr; MacEventHandlerRF &rArr; MacLowTxRequestRF &rArr; MacSecurityEncrypt &rArr; cipher_wrapper_ccm_encrypt_and_tag &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacEventHandlerRF
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adp_mac_serial_if_process
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALEventHandler
</UL>

<P><STRONG><a name="[31d]"></a>MacWrapperGetNeighbourTableSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mac_wrapper.o(i.MacWrapperGetNeighbourTableSize))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALGetNeighbourTableSize
</UL>

<P><STRONG><a name="[320]"></a>MacWrapperInitialize</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, mac_wrapper.o(i.MacWrapperInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = MacWrapperInitialize &rArr; MacInitialize &rArr; MacLowInitialize &rArr; MacRtInitialize &rArr; pl360_g3_coup_tx_config
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacInitialize
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALInitialize
</UL>

<P><STRONG><a name="[321]"></a>MacWrapperInitializeRF</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, mac_wrapper.o(i.MacWrapperInitializeRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = MacWrapperInitializeRF &rArr; MacInitializeRF &rArr; MacLowInitializeRF &rArr; PalRfInitialize &rArr; at86rf_enable &rArr; rf215_bbc_init &rArr; rf215_pll_init &rArr; _pll_get_params
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacInitializeRF
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALInitialize
</UL>

<P><STRONG><a name="[319]"></a>MacWrapperMcpsDataRequest</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mac_wrapper.o(i.MacWrapperMcpsDataRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MacWrapperMcpsDataRequest &rArr; LogBuffer &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogBuffer
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMcpsDataRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALDataRequest
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpDataConfirmRF
</UL>

<P><STRONG><a name="[31a]"></a>MacWrapperMcpsDataRequestRF</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mac_wrapper.o(i.MacWrapperMcpsDataRequestRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MacWrapperMcpsDataRequestRF &rArr; LogBuffer &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogBuffer
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMcpsDataRequestRF
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALDataRequest
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpDataConfirm
</UL>

<P><STRONG><a name="[33c]"></a>MacWrapperMlmeGetRequest</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mac_wrapper.o(i.MacWrapperMlmeGetRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = MacWrapperMlmeGetRequest &rArr; MacMlmeGetRequest &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeGetRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
</UL>

<P><STRONG><a name="[33d]"></a>MacWrapperMlmeGetRequestRF</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mac_wrapper.o(i.MacWrapperMlmeGetRequestRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MacWrapperMlmeGetRequestRF &rArr; MacMlmeGetRequestRF &rArr; MacMlmeGetRequestSyncRF &rArr; PalRfGetParam &rArr; at86rf_pib_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeGetRequestRF
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
</UL>

<P><STRONG><a name="[31e]"></a>MacWrapperMlmeGetRequestSync</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mac_wrapper.o(i.MacWrapperMlmeGetRequestSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeGetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALGetRequestSync
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpDataConfirmRF
</UL>

<P><STRONG><a name="[31f]"></a>MacWrapperMlmeGetRequestSyncRF</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mac_wrapper.o(i.MacWrapperMlmeGetRequestSyncRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MacWrapperMlmeGetRequestSyncRF &rArr; MacMlmeGetRequestSyncRF &rArr; PalRfGetParam &rArr; at86rf_pib_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeGetRequestSyncRF
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALGetRequestSync
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpDataConfirm
</UL>

<P><STRONG><a name="[322]"></a>MacWrapperMlmeResetRequest</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mac_wrapper.o(i.MacWrapperMlmeResetRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = MacWrapperMlmeResetRequest &rArr; MacMlmeResetRequest &rArr; MacLowResetRequest &rArr; MacRtResetRequest &rArr; pl360_g3_coup_tx_config
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeResetRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALResetRequest
</UL>

<P><STRONG><a name="[323]"></a>MacWrapperMlmeResetRequestRF</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mac_wrapper.o(i.MacWrapperMlmeResetRequestRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = MacWrapperMlmeResetRequestRF &rArr; MacMlmeResetRequestRF &rArr; MacLowResetRequestRF &rArr; PalRfResetRequest &rArr; at86rf_pib_set &rArr; rf215_bbc_set_phy_cfg &rArr; rf215_pll_set_chn_cfg &rArr; rf215_trx_switch_txprep &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeResetRequestRF
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALResetRequest
</UL>

<P><STRONG><a name="[324]"></a>MacWrapperMlmeScanRequest</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mac_wrapper.o(i.MacWrapperMlmeScanRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = MacWrapperMlmeScanRequest &rArr; MacMlmeScanRequest &rArr; MacLowTxRequest &rArr; cipher_wrapper_ccm_encrypt_and_tag &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeScanRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALScanRequest
</UL>

<P><STRONG><a name="[325]"></a>MacWrapperMlmeScanRequestRF</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mac_wrapper.o(i.MacWrapperMlmeScanRequestRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = MacWrapperMlmeScanRequestRF &rArr; MacMlmeScanRequestRF &rArr; MacLowTxRequestRF &rArr; MacSecurityEncrypt &rArr; cipher_wrapper_ccm_encrypt_and_tag &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeScanRequestRF
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALScanRequest
</UL>

<P><STRONG><a name="[33e]"></a>MacWrapperMlmeSetRequest</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mac_wrapper.o(i.MacWrapperMlmeSetRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = MacWrapperMlmeSetRequest &rArr; MacMlmeSetRequest &rArr; MacMlmeSetRequestSync &rArr; MacRtSetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeSetRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
</UL>

<P><STRONG><a name="[33f]"></a>MacWrapperMlmeSetRequestRF</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mac_wrapper.o(i.MacWrapperMlmeSetRequestRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = MacWrapperMlmeSetRequestRF &rArr; MacMlmeSetRequestRF &rArr; MacMlmeSetRequestSyncRF &rArr; PalRfSetParam &rArr; at86rf_pib_set &rArr; rf215_bbc_set_phy_cfg &rArr; rf215_pll_set_chn_cfg &rArr; rf215_trx_switch_txprep &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeSetRequestRF
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
</UL>

<P><STRONG><a name="[326]"></a>MacWrapperMlmeSetRequestSync</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mac_wrapper.o(i.MacWrapperMlmeSetRequestSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = MacWrapperMlmeSetRequestSync &rArr; MacMlmeSetRequestSync &rArr; MacRtSetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeSetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALSetRequestSync
</UL>

<P><STRONG><a name="[327]"></a>MacWrapperMlmeSetRequestSyncRF</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mac_wrapper.o(i.MacWrapperMlmeSetRequestSyncRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = MacWrapperMlmeSetRequestSyncRF &rArr; MacMlmeSetRequestSyncRF &rArr; PalRfSetParam &rArr; at86rf_pib_set &rArr; rf215_bbc_set_phy_cfg &rArr; rf215_pll_set_chn_cfg &rArr; rf215_trx_switch_txprep &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeSetRequestSyncRF
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALSetRequestSync
</UL>

<P><STRONG><a name="[328]"></a>MacWrapperMlmeStartRequest</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mac_wrapper.o(i.MacWrapperMlmeStartRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = MacWrapperMlmeStartRequest &rArr; MacMlmeStartRequest &rArr; MacMlmeSetRequestSync &rArr; MacRtSetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeStartRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALStartRequest
</UL>

<P><STRONG><a name="[329]"></a>MacWrapperMlmeStartRequestRF</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mac_wrapper.o(i.MacWrapperMlmeStartRequestRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MacWrapperMlmeStartRequestRF &rArr; MacMlmeStartRequestRF
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeStartRequestRF
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALStartRequest
</UL>

<P><STRONG><a name="[2b]"></a>PIOA_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pio_handler.o(i.PIOA_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PIOA_Handler &rArr; pio_handler_process
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_handler_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PIOB_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pio_handler.o(i.PIOB_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PIOB_Handler &rArr; pio_handler_process
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_handler_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[27c]"></a>PalRfEventHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pal_rf.o(i.PalRfEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = PalRfEventHandler &rArr; at86rf_event_handler &rArr; rf215_tx_event_handler &rArr; rf215_addon_stringify_cfm &rArr; rf215_sniffer_if_stringify_cfm
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowEventHandlerRF
</UL>

<P><STRONG><a name="[1bd]"></a>PalRfGetParam</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, pal_rf.o(i.PalRfGetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PalRfGetParam &rArr; at86rf_pib_get
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_pib_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeSetRequestSyncRF
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeGetRequestSyncRF
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowInitializeRF
</UL>

<P><STRONG><a name="[1be]"></a>PalRfGetParamLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pal_rf.o(i.PalRfGetParamLen))
<BR><BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_pib_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeSetRequestSyncRF
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeGetRequestSyncRF
</UL>

<P><STRONG><a name="[27a]"></a>PalRfGetPhyTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pal_rf.o(i.PalRfGetPhyTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PalRfGetPhyTime &rArr; timer_1us_get
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1us_get
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTxRequest
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowEventHandlerRF
</UL>

<P><STRONG><a name="[279]"></a>PalRfInitialize</STRONG> (Thumb, 132 bytes, Stack size 96 bytes, pal_rf.o(i.PalRfInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = PalRfInitialize &rArr; at86rf_enable &rArr; rf215_bbc_init &rArr; rf215_pll_init &rArr; _pll_get_params
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1us_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowInitializeRF
</UL>

<P><STRONG><a name="[278]"></a>PalRfResetRequest</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, pal_rf.o(i.PalRfResetRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = PalRfResetRequest &rArr; at86rf_pib_set &rArr; rf215_bbc_set_phy_cfg &rArr; rf215_pll_set_chn_cfg &rArr; rf215_trx_switch_txprep &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_pib_set
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowResetRequestRF
</UL>

<P><STRONG><a name="[1c0]"></a>PalRfSetParam</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, pal_rf.o(i.PalRfSetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = PalRfSetParam &rArr; at86rf_pib_set &rArr; rf215_bbc_set_phy_cfg &rArr; rf215_pll_set_chn_cfg &rArr; rf215_trx_switch_txprep &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_pib_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeSetRequestSyncRF
</UL>

<P><STRONG><a name="[26d]"></a>PalRfTxCancel</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, pal_rf.o(i.PalRfTxCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = PalRfTxCancel &rArr; at86rf_tx_req &rArr; _tx_param_cfg &rArr; rf215_bbc_upd_tx_params &rArr; rf215_fe_set_txpwr &rArr; rf215_trx_switch_trxoff &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_tx_req
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
</UL>

<P><STRONG><a name="[272]"></a>PalRfTxRequest</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, pal_rf.o(i.PalRfTxRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = PalRfTxRequest &rArr; at86rf_tx_req &rArr; _tx_param_cfg &rArr; rf215_bbc_upd_tx_params &rArr; rf215_fe_set_txpwr &rArr; rf215_trx_switch_trxoff &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_tx_req
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_pib_get
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTxRequest
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
</UL>

<P><STRONG><a name="[2ee]"></a>ProcessLBPMessage</STRONG> (Thumb, 2088 bytes, Stack size 200 bytes, bs_functions.o(i.ProcessLBPMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 2712 + Unknown Stack Size
<LI>Call Chain = ProcessLBPMessage &rArr; EAP_PSK_Encode_Message3 &rArr; eax_encrypt_message &rArr; eax_init_message &rArr; aes_encrypt &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_Encode_ChallengeRequest
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_Encode_AcceptedRequest
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message3
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_EAP_Success
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_EAP_Failure
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message4
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message2
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_InitializeTEK
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpLbpRequest
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_show_slots_status
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_null_address
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootstrap_slot_by_addr
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Joining0
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpIndication
</UL>

<P><STRONG><a name="[34d]"></a>Process_Joining0</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, bs_functions.o(i.Process_Joining0))
<BR><BR>[Stack]<UL><LI>Max Depth = 2464 + Unknown Stack Size
<LI>Call Chain = Process_Joining0 &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_Encode_ChallengeRequest
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message1
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Initialize
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_random_32
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_lbds_list_entry
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_address
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_get_short_addr_by_ext
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rekeying_process
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessLBPMessage
</UL>

<P><STRONG><a name="[18a]"></a>Queue_Pop</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, queuemng.o(i.Queue_Pop))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RREQRERRWait_FindEmptyQueueSlot
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RREQRERRWait_TimerExpired_Callback
</UL>

<P><STRONG><a name="[189]"></a>Queue_Push</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, queuemng.o(i.Queue_Push))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GenerateRouteError
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute
</UL>

<P><STRONG><a name="[22]"></a>RSTC_Handler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, hal.o(i.RSTC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RSTC_Handler &rArr; udc_stop &rArr; udd_disable &rArr; udd_sleep_mode &rArr; cpu_irq_save
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_stop
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rstc_get_status
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_switch_mck_to_mainck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[356]"></a>Random128</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, random.o(i.Random128))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Random128 &rArr; platform_random_16
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_random_16
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_LoByte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_HiByte
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge
</UL>

<P><STRONG><a name="[1cb]"></a>Random16Ex</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, random.o(i.Random16Ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Random16Ex &rArr; platform_random_16
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_random_16
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSend
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowRxIndicationRF
</UL>

<P><STRONG><a name="[151]"></a>Random32</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, random.o(i.Random32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Random32 &rArr; platform_random_32
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_random_32
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTxRequest
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibResetInternalRF
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibResetInternal
</UL>

<P><STRONG><a name="[163]"></a>Random32Ex</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, random.o(i.Random32Ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Random32Ex &rArr; platform_random_32
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_random_32
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowRxIndication
</UL>

<P><STRONG><a name="[1e1]"></a>Random_Initialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, random.o(i.Random_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Random_Initialize &rArr; platform_random_init &rArr; flash_read_user_signature &rArr; efc_perform_read_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_random_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpInitialize
</UL>

<P><STRONG><a name="[211]"></a>RoutingGetMib</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, routingwrapper.o(i.RoutingGetMib))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RoutingGetMib &rArr; LOADNG_GetMib &rArr; LOADNG_GetRouteEntry &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetMib
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetMib
</UL>

<P><STRONG><a name="[21a]"></a>RoutingSetMib</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, routingwrapper.o(i.RoutingSetMib))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = RoutingSetMib &rArr; LOADNG_SetMib &rArr;  AdpSetRequestSync (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_SetMib
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpSetMib
</UL>

<P><STRONG><a name="[28f]"></a>Routing_AddBlacklistOnMedium</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, routingwrapper.o(i.Routing_AddBlacklistOnMedium))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Routing_AddBlacklistOnMedium &rArr; LOADNG_AddBlacklistOnMedium &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_AddBlacklistOnMedium
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MAC_DataConfirm
</UL>

<P><STRONG><a name="[1f2]"></a>Routing_AddCircularRoute</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, routingwrapper.o(i.Routing_AddCircularRoute))
<BR><BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_AddCircularRoute
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[241]"></a>Routing_AddRoute</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, routingwrapper.o(i.Routing_AddRoute))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = Routing_AddRoute &rArr; LOADNG_AddRoute &rArr; GetAdpMaxHops &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_AddRoute
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Join_Confirm
</UL>

<P><STRONG><a name="[240]"></a>Routing_AdpDefaultCoordRouteEnabled</STRONG> (Thumb, 28 bytes, Stack size 80 bytes, routingwrapper.o(i.Routing_AdpDefaultCoordRouteEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Routing_AdpDefaultCoordRouteEnabled &rArr; LOADNG_GetMib &rArr; LOADNG_GetRouteEntry &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetMib
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Join_Confirm
</UL>

<P><STRONG><a name="[21b]"></a>Routing_AdpRREPWait</STRONG> (Thumb, 22 bytes, Stack size 80 bytes, routingwrapper.o(i.Routing_AdpRREPWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Routing_AdpRREPWait &rArr; LOADNG_GetMib &rArr; LOADNG_GetRouteEntry &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetMib
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpSetMib
</UL>

<P><STRONG><a name="[1f3]"></a>Routing_DeleteRoute</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, routingwrapper.o(i.Routing_DeleteRoute))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = Routing_DeleteRoute &rArr; LOADNG_DeleteRoute &rArr; GetAdpCoordShortAddress &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DeleteRoute
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MAC_DataConfirm
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[24d]"></a>Routing_DiscoverPath</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, routingwrapper.o(i.Routing_DiscoverPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = Routing_DiscoverPath &rArr; LOADNG_DiscoverPath &rArr; AdpMac_DataRequestHelper &rArr; AdpMac_DataRequest &rArr; HyALDataRequest &rArr; MacWrapperMcpsDataRequestRF &rArr; LogBuffer &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DiscoverPath
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_IsDisabled
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpPathDiscoveryRequest
</UL>

<P><STRONG><a name="[250]"></a>Routing_DiscoverRoute</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, routingwrapper.o(i.Routing_DiscoverRoute))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = Routing_DiscoverRoute &rArr; LOADNG_DiscoverRoute &rArr; _DiscoverRoute &rArr;  _RREQRERRWait_FindEmptyQueueSlot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DiscoverRoute
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_IsDisabled
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpRouteDiscoveryRequest
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartSend
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MAC_DataConfirm
</UL>

<P><STRONG><a name="[242]"></a>Routing_GetDiscoverRouteGlobalSeqNo</STRONG> (Thumb, 22 bytes, Stack size 80 bytes, routingwrapper.o(i.Routing_GetDiscoverRouteGlobalSeqNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Routing_GetDiscoverRouteGlobalSeqNo &rArr; LOADNG_GetMib &rArr; LOADNG_GetRouteEntry &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetMib
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Leave_Callback_AdpMac_ResetConfirm
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Kick_Callback_AdpMac_ResetConfirm
</UL>

<P><STRONG><a name="[1f1]"></a>Routing_GetRoute</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, routingwrapper.o(i.Routing_GetRoute))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = Routing_GetRoute &rArr; LOADNG_GetRoute &rArr; GetAdpShortAddress &rArr; AdpMacGetRequestSync &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRoute
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartSend
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSendNextFragment
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[298]"></a>Routing_GetRouteAndMediaType</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, routingwrapper.o(i.Routing_GetRouteAndMediaType))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = Routing_GetRouteAndMediaType &rArr; LOADNG_GetRouteAndMediaType &rArr; GetAdpShortAddress &rArr; AdpMacGetRequestSync &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRouteAndMediaType
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteRepair_Callback
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartSend
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteDiscover_Callback
</UL>

<P><STRONG><a name="[216]"></a>Routing_GetRouteEntry</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, routingwrapper.o(i.Routing_GetRouteEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Routing_GetRouteEntry &rArr; Routing_IsDisabled &rArr; LOADNG_GetMib &rArr; LOADNG_GetRouteEntry &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRouteEntry
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_IsDisabled
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MAC_DataConfirm
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetMib
</UL>

<P><STRONG><a name="[291]"></a>Routing_IsAutoRREQDisabled</STRONG> (Thumb, 28 bytes, Stack size 80 bytes, routingwrapper.o(i.Routing_IsAutoRREQDisabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Routing_IsAutoRREQDisabled &rArr; LOADNG_GetMib &rArr; LOADNG_GetRouteEntry &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetMib
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartSend
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MAC_DataConfirm
</UL>

<P><STRONG><a name="[215]"></a>Routing_IsDisabled</STRONG> (Thumb, 28 bytes, Stack size 80 bytes, routingwrapper.o(i.Routing_IsDisabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Routing_IsDisabled &rArr; LOADNG_GetMib &rArr; LOADNG_GetRouteEntry &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetMib
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_GetRouteEntry
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_DiscoverRoute
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_DiscoverPath
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartSend
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSend
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MAC_DataConfirm
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSendNextFragment
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Join_Confirm
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Leave_Callback_AdpMac_ResetConfirm
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Kick_Callback_AdpMac_ResetConfirm
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpSetMib
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetMib
</UL>

<P><STRONG><a name="[1ee]"></a>Routing_IsInDestinationAddressSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, routingwrapper.o(i.Routing_IsInDestinationAddressSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Routing_IsInDestinationAddressSet &rArr; LOADNG_IsInDestinationAddressSet
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_IsInDestinationAddressSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[208]"></a>Routing_NotifyRouteError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, routingwrapper.o(i.Routing_NotifyRouteError))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = Routing_NotifyRouteError &rArr; LOADNG_NotifyRouteError &rArr; _GenerateRouteError &rArr; _RREQRERRWait_FindEmptyQueueSlot &rArr;  _GenerateRouteError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_NotifyRouteError
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteRepair_Callback
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpCommon_PurgeProcessingQueue
</UL>

<P><STRONG><a name="[201]"></a>Routing_ProcessMessage</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, routingwrapper.o(i.Routing_ProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944 + Unknown Stack Size
<LI>Call Chain = Routing_ProcessMessage &rArr; LOADNG_ProcessMessage &rArr; _ProcessMessage &rArr;  _ProcessMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_ProcessMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>

<P><STRONG><a name="[290]"></a>Routing_RefreshRoute</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, routingwrapper.o(i.Routing_RefreshRoute))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Routing_RefreshRoute &rArr; LOADNG_RefreshRoute &rArr; LOADNG_AddRouteEntry &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_RefreshRoute
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MAC_DataConfirm
</UL>

<P><STRONG><a name="[28e]"></a>Routing_RemoveBlacklistOnMedium</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, routingwrapper.o(i.Routing_RemoveBlacklistOnMedium))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Routing_RemoveBlacklistOnMedium &rArr; LOADNG_RemoveBlacklistOnMedium
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_RemoveBlacklistOnMedium
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MAC_DataConfirm
</UL>

<P><STRONG><a name="[1df]"></a>Routing_Reset</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, routingwrapper.o(i.Routing_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = Routing_Reset &rArr; LOADNG_Reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_Reset
</UL>

<P><STRONG><a name="[1f0]"></a>Routing_RouteExists</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, routingwrapper.o(i.Routing_RouteExists))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Routing_RouteExists &rArr; LOADNG_RouteExists &rArr; _IsBlacklisted &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_RouteExists
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteRepair_Callback
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartSend
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSendNextFragment
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpCommon_PurgeProcessingQueue
</UL>

<P><STRONG><a name="[243]"></a>Routing_SetDiscoverRouteGlobalSeqNo</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, routingwrapper.o(i.Routing_SetDiscoverRouteGlobalSeqNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = Routing_SetDiscoverRouteGlobalSeqNo &rArr; LOADNG_SetMib &rArr;  AdpSetRequestSync (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_SetMib
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Leave_Callback_AdpMac_ResetConfirm
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Kick_Callback_AdpMac_ResetConfirm
</UL>

<P><STRONG><a name="[21]"></a>SUPC_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal.o(i.SUPC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SUPC_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supc_get_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[2ec]"></a>SetKeyIndex</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bs_functions.o(i.SetKeyIndex))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_set_param
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpConfirm
</UL>

<P><STRONG><a name="[49f]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 176 bytes, Stack size 4 bytes, system_samg55.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_init
</UL>

<P><STRONG><a name="[42]"></a>SystemInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_samg55.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>TC2_Handler</STRONG> (Thumb, 702 bytes, Stack size 160 bytes, timer_1us.o(i.TC2_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TC2_Handler &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_get_status
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_enable_interrupt
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rb
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_ra
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_read_rb
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_read_ra
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_read_cv
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_get_interrupt_mask
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_disable_interrupt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TC3_Handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hal.o(i.TC3_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TC3_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_get_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TC4_Handler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, busart_if.o(i.TC4_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TC4_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_get_status
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_stop
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdc_read_rx_counter
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdc_rx_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[1e6]"></a>Timer_EventHandler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, timer.o(i.Timer_EventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Timer_EventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_100ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpEventHandler
</UL>

<P><STRONG><a name="[171]"></a>Timer_IsPast</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timer.o(i.Timer_IsPast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_100ms
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRouteEntry
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRouteCount
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetMib
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DeleteRoutePosition
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DeleteRoute
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_AddRouteEntry
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_AddBlacklistOnMedium
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Compress_Address
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFragmentedDataEntry
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_CompressHeader
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBroadcastLogTable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpCommon_CheckProcessingQueue
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCost_CompositeMetric
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetMib
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchBroadcastLogTable
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpCommon_ProcessSendQueue
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsRoutingTableFull
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessSuccessfulRREPConfirm
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_RREP
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddRouteToRoutingSet
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteDiscover_Callback_MAC_DataConfirm
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRouteEntryFromRoutingSet
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsBlacklisted
</UL>

<P><STRONG><a name="[212]"></a>Timer_IsPast10Seconds</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timer.o(i.Timer_IsPast10Seconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer_IsPast10Seconds
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_10s
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetMib
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_GetShortDestinationAddress
</UL>

<P><STRONG><a name="[17f]"></a>Timer_IsPastCmp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i.Timer_IsPastCmp))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_AddBlacklistOnMedium
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBroadcastLogTable
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddRouteToRoutingSet
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRouteEntryFromRoutingSet
</UL>

<P><STRONG><a name="[187]"></a>Timer_IsRegistered</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(i.Timer_IsRegistered))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_RREP
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GenerateRouteError
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute
</UL>

<P><STRONG><a name="[16f]"></a>Timer_Register</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, timer.o(i.Timer_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Timer_Register
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_100ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_JoinRequest
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DiscoverRoute
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MAC_DataConfirm
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Kick_Notify
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_RREP
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_TimerExpired_Callback
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteDiscover_Callback_MAC_DataConfirm
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteErrorGeneration_Callback_MAC_DataConfirm
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute_Callback_MAC_DataConfirm
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PathDiscovery_Callback_MAC_DataConfirm
</UL>

<P><STRONG><a name="[1d2]"></a>Timer_ResetAll</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.Timer_ResetAll))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_Reset
</UL>

<P><STRONG><a name="[213]"></a>Timer_SignedSysGetUpTime10Seconds</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.Timer_SignedSysGetUpTime10Seconds))
<BR><BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_10s
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpSetMib
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetMib
</UL>

<P><STRONG><a name="[17e]"></a>Timer_SignedSysGetUpTimeTenthsSeconds</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.Timer_SignedSysGetUpTimeTenthsSeconds))
<BR><BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_100ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_SetMib
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_RemoveBlacklistOnMedium
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_RefreshRoute
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetMib
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_AddRoute
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_AddBlacklistOnMedium
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFragmentedDataEntry
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBroadcastLogTable
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpSetMib
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetMib
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpCommon_DataSendEx
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessSuccessfulRREPConfirm
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_RREP
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddRouteToRoutingSet
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateRoute
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteDiscover_Callback_MAC_DataConfirm
</UL>

<P><STRONG><a name="[16e]"></a>Timer_Unregister</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timer.o(i.Timer_Unregister))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Accepted
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Confirm
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteEstablished
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_RREP
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PathDiscovery_Callback_MAC_DataConfirm
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PathDiscovery_TimerExpired_Callback
</UL>

<P><STRONG><a name="[40]"></a>UDP_Handler</STRONG> (Thumb, 466 bytes, Stack size 32 bytes, udp_device.o(i.UDP_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UDP_Handler &rArr; udd_ctrl_interrupt &rArr; udc_process_setup &rArr; udc_reqstd &rArr; udc_iface_enable &rArr; udd_ep_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_enable_periph_clk
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_cdc_suspend_action
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_cdc_sof_action
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_cdc_resume_action
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_sof_notify
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_reset
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_is_wakeup_clocks_restored
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_sleep_mode
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_interrupt
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ctrl_interrupt
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_disable_periph_clk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_samg55.o(RESET)
</UL>
<P><STRONG><a name="[14f]"></a>__ARM_common_memclr4_6</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, macmib.o(i.__ARM_common_memclr4_6))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibGetDeviceEntryRF
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_GetNeighbourDescriptorSync
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleToneMapResponse
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateToneMapResponse
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibGetDeviceEntry
</UL>

<P><STRONG><a name="[18c]"></a>__ARM_common_memclr4_8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bs_functions.o(i.__ARM_common_memclr4_8))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_lbds_list_entry
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RREQRERRWait_FindEmptyQueueSlot
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RREQRERRWait_TimerExpired_Callback
</UL>

<P><STRONG><a name="[165]"></a>__ARM_common_memcpy4_10</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, macsublayer.o(i.__ARM_common_memcpy4_10))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowMacSnifferIndicationRF
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequest
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowMacSnifferIndication
</UL>

<P><STRONG><a name="[14a]"></a>__ARM_common_memcpy4_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial_if_mib_common.o(i.__ARM_common_memcpy4_5))
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_MIB_set_request
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeSetRequestSync
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_tone_map_rsp
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtCbProcessFrame
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_DecompressHeader
</UL>

<P><STRONG><a name="[337]"></a>__ARM_common_memset4_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pal.o(i.__ARM_common_memset4_3))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtGetToneMapResponseData
</UL>

<P><STRONG><a name="[42e]"></a>__ARM_common_memset4_8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bs_functions.o(i.__ARM_common_memset4_8))
<BR><BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_bootstrap_slots
</UL>

<P><STRONG><a name="[2d1]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2b6]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[140]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2ed]"></a>add_lbds_list_entry</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, bs_functions.o(i.add_lbds_list_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = add_lbds_list_entry &rArr; bs_get_short_addr_by_ext &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_null_address
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_get_short_addr_by_ext
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_set_param
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpConfirm
</UL>

<P><STRONG><a name="[3f2]"></a>add_to_blacklist</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, bs_functions.o(i.add_to_blacklist))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = add_to_blacklist
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_set_param
</UL>

<P><STRONG><a name="[3a5]"></a>adp_mac_serial_if_get_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_if_common.o(i.adp_mac_serial_if_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_triggerAdpSetRequest
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_coordinator_api_parser
</UL>

<P><STRONG><a name="[c3]"></a>adp_mac_serial_if_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, serial_if_common.o(i.adp_mac_serial_if_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adp_mac_serial_if_init &rArr; usi_set_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_set_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[c4]"></a>adp_mac_serial_if_process</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, serial_if_common.o(i.adp_mac_serial_if_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 3944 + Unknown Stack Size
<LI>Call Chain = adp_mac_serial_if_process &rArr; AdpEventHandler &rArr; AdpMac_EventHandler &rArr; _ProcessMacNotifications &rArr; ADP_ProcessIncomingMessage &rArr; BootstrapWrapper_ProcessMessage &rArr; LBP_ProcessMessage &rArr; _Join_Process_Challenge &rArr; _Join_Process_Challenge_ThirdMessage &rArr; _ProcessParameters &rArr; AdpSetRequestSync &rArr; AdpSetMib &rArr; BootstrapWrapper_InitEapPsk &rArr; LBP_InitEapPsk &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperEventHandlerRF
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperEventHandler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpEventHandler
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[3c3]"></a>adp_mac_serial_if_set_state</STRONG> (Thumb, 364 bytes, Stack size 248 bytes, serial_if_common.o(i.adp_mac_serial_if_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = adp_mac_serial_if_set_state &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetRequestSync
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacGetRequestSync
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_coordinator_api_parser
</UL>

<P><STRONG><a name="[3c9]"></a>aes_encrypt</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, aes_wrapper.o(i.aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = aes_encrypt &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_init_message
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_init_and_key
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_crypt_data
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_compute_tag
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_auth_header
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_auth_data
</UL>

<P><STRONG><a name="[3cb]"></a>aes_key</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, aes_wrapper.o(i.aes_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aes_key
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_init_and_key
</UL>

<P><STRONG><a name="[311]"></a>aes_wrapper_aes_encrypt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aes_wrapper.o(i.aes_wrapper_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aes_wrapper_aes_encrypt &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_InitializeTEK
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Initialize
</UL>

<P><STRONG><a name="[312]"></a>aes_wrapper_aes_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aes_wrapper.o(i.aes_wrapper_aes_free))
<BR><BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_InitializeTEK
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Initialize
</UL>

<P><STRONG><a name="[30f]"></a>aes_wrapper_aes_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aes_wrapper.o(i.aes_wrapper_aes_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = aes_wrapper_aes_init &rArr; mbedtls_aes_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_InitializeTEK
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Initialize
</UL>

<P><STRONG><a name="[310]"></a>aes_wrapper_aes_setkey_enc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aes_wrapper.o(i.aes_wrapper_aes_setkey_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088<LI>Call Chain = aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_InitializeTEK
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Initialize
</UL>

<P><STRONG><a name="[347]"></a>at86rf_enable</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, at86rf215.o(i.at86rf_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = at86rf_enable &rArr; rf215_bbc_init &rArr; rf215_pll_init &rArr; _pll_get_params
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_addon_init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rf215_band_opm_to_phy_config
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_init
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_init
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_rx_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfResetRequest
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfInitialize
</UL>

<P><STRONG><a name="[342]"></a>at86rf_event_handler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, at86rf215.o(i.at86rf_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = at86rf_event_handler &rArr; rf215_tx_event_handler &rArr; rf215_addon_stringify_cfm &rArr; rf215_sniffer_if_stringify_cfm
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_event_handler
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_rx_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfEventHandler
</UL>

<P><STRONG><a name="[346]"></a>at86rf_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, at86rf215.o(i.at86rf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = at86rf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfInitialize
</UL>

<P><STRONG><a name="[343]"></a>at86rf_pib_get</STRONG> (Thumb, 562 bytes, Stack size 32 bytes, at86rf215.o(i.at86rf_pib_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at86rf_pib_get
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_pll_get_chn_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfTxRequest
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfGetParam
</UL>

<P><STRONG><a name="[344]"></a>at86rf_pib_get_len</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, at86rf215.o(i.at86rf_pib_get_len))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfGetParamLen
</UL>

<P><STRONG><a name="[348]"></a>at86rf_pib_set</STRONG> (Thumb, 1076 bytes, Stack size 64 bytes, at86rf215.o(i.at86rf_pib_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = at86rf_pib_set &rArr; rf215_bbc_set_phy_cfg &rArr; rf215_pll_set_chn_cfg &rArr; rf215_trx_switch_txprep &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_rx_check_aborts
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rf215_band_opm_to_phy_config
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_fe_upd_phy_cfg
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_set_phy_cfg
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_auto_stop
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_switch_trxoff
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfSetParam
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfResetRequest
</UL>

<P><STRONG><a name="[349]"></a>at86rf_tx_req</STRONG> (Thumb, 906 bytes, Stack size 72 bytes, rf215_tx.o(i.at86rf_tx_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = at86rf_tx_req &rArr; _tx_param_cfg &rArr; rf215_bbc_upd_tx_params &rArr; rf215_fe_set_txpwr &rArr; rf215_trx_switch_trxoff &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_rx_listen
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_addon_stringify_tx
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_auto_stop
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_upd_phy_stats
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_txprep
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_total_delay
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_param_cfg
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_cmd_delay
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_abort
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfTxRequest
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfTxCancel
</UL>

<P><STRONG><a name="[383]"></a>atpl360_boot_download_firmware</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, atpl360_boot.o(i.atpl360_boot_download_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = atpl360_boot_download_firmware &rArr; atpl360_spi_update_fw
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_spi_update_fw
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_spi_clk_boot_disable
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_spi_boot_write_cmd_enable
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_spi_boot_disable_cpuwait
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_spi_boot_config_sys
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_spi_status
</UL>

<P><STRONG><a name="[3df]"></a>atpl360_boot_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, atpl360_boot.o(i.atpl360_boot_init))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_enable
</UL>

<P><STRONG><a name="[382]"></a>atpl360_boot_without_load</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, atpl360_boot.o(i.atpl360_boot_without_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = atpl360_boot_without_load &rArr; atpl360_spi_boot_disable_cpuwait
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_spi_clk_boot_disable
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_spi_boot_disable_cpuwait
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_set_sleep
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_set_debug
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_spi_status
</UL>

<P><STRONG><a name="[388]"></a>atpl360_comm_set_event_info</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, atpl360_comm.o(i.atpl360_comm_set_event_info))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handler_atpl360_ext_int
</UL>

<P><STRONG><a name="[3b2]"></a>atpl360_comm_tx_stringify</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, atpl360_comm.o(i.atpl360_comm_tx_stringify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = atpl360_comm_tx_stringify
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_request
</UL>

<P><STRONG><a name="[339]"></a>atpl360_enable</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, atpl360.o(i.atpl360_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = atpl360_enable &rArr; _spi_send_cmd &rArr; atpl360_spi_write_buf &rArr; _check_spi_status &rArr; atpl360_boot_download_firmware &rArr; atpl360_spi_update_fw
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_send_cmd
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_boot_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtResetRequest
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtInitialize
</UL>

<P><STRONG><a name="[335]"></a>atpl360_handle_events</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, atpl360.o(i.atpl360_handle_events))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atpl360_handle_events
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtEventHandler
</UL>

<P><STRONG><a name="[338]"></a>atpl360_init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, atpl360.o(i.atpl360_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = atpl360_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_spi_initialize
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtResetRequest
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtInitialize
</UL>

<P><STRONG><a name="[39f]"></a>atpl360_set_debug</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, atpl360.o(i.atpl360_set_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = atpl360_set_debug &rArr; atpl360_spi_boot_write_cmd_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_boot_without_load
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_spi_boot_write_cmd_enable
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_spi_boot_config_sys
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_req
</UL>

<P><STRONG><a name="[39e]"></a>atpl360_set_sleep</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, atpl360.o(i.atpl360_set_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = atpl360_set_sleep &rArr; atpl360_spi_boot_write_cmd_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_boot_without_load
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_spi_boot_write_cmd_enable
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_spi_boot_config_sys
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_req
</UL>

<P><STRONG><a name="[3db]"></a>atpl360_spi_boot_config_sys</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, atpl360_hal_spi.o(i.atpl360_spi_boot_config_sys))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atpl360_spi_boot_config_sys
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_set_sleep
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_set_debug
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_boot_download_firmware
</UL>

<P><STRONG><a name="[3dd]"></a>atpl360_spi_boot_disable_cpuwait</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, atpl360_hal_spi.o(i.atpl360_spi_boot_disable_cpuwait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atpl360_spi_boot_disable_cpuwait
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_boot_without_load
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_boot_download_firmware
</UL>

<P><STRONG><a name="[385]"></a>atpl360_spi_boot_read_mem</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, atpl360_hal_spi.o(i.atpl360_spi_boot_read_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atpl360_spi_boot_read_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_req
</UL>

<P><STRONG><a name="[3da]"></a>atpl360_spi_boot_write_cmd_enable</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, atpl360_hal_spi.o(i.atpl360_spi_boot_write_cmd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = atpl360_spi_boot_write_cmd_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_set_sleep
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_set_debug
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_boot_download_firmware
</UL>

<P><STRONG><a name="[3de]"></a>atpl360_spi_clk_boot_disable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, atpl360_hal_spi.o(i.atpl360_spi_clk_boot_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atpl360_spi_clk_boot_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_boot_without_load
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_boot_download_firmware
</UL>

<P><STRONG><a name="[3a1]"></a>atpl360_spi_get_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, atpl360_hal_spi.o(i.atpl360_spi_get_status))
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_send_cmd
</UL>

<P><STRONG><a name="[387]"></a>atpl360_spi_get_status_info</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, atpl360_hal_spi.o(i.atpl360_spi_get_status_info))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handler_atpl360_ext_int
</UL>

<P><STRONG><a name="[3e0]"></a>atpl360_spi_initialize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, atpl360_hal_spi.o(i.atpl360_spi_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_init
</UL>

<P><STRONG><a name="[3a0]"></a>atpl360_spi_read_buf</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, atpl360_hal_spi.o(i.atpl360_spi_read_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = atpl360_spi_read_buf &rArr; _check_spi_status &rArr; atpl360_boot_download_firmware &rArr; atpl360_spi_update_fw
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_spi_status
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_send_cmd
</UL>

<P><STRONG><a name="[3dc]"></a>atpl360_spi_update_fw</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, atpl360_hal_spi.o(i.atpl360_spi_update_fw))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = atpl360_spi_update_fw
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_boot_download_firmware
</UL>

<P><STRONG><a name="[3a2]"></a>atpl360_spi_write_buf</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, atpl360_hal_spi.o(i.atpl360_spi_write_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = atpl360_spi_write_buf &rArr; _check_spi_status &rArr; atpl360_boot_download_firmware &rArr; atpl360_spi_update_fw
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_spi_status
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_send_cmd
</UL>

<P><STRONG><a name="[3e1]"></a>board_init</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, init.o(i.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = board_init &rArr; flexcom_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_enable_periph_clk
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexcom_set_opmode
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexcom_enable
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioport_set_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_hw
</UL>

<P><STRONG><a name="[3e5]"></a>bs_get_ext_addr_by_short</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bs_functions.o(i.bs_get_ext_addr_by_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = bs_get_ext_addr_by_short &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_null_address
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_kick_device
</UL>

<P><STRONG><a name="[492]"></a>bs_get_not_handlers</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bs_main.o(i.bs_get_not_handlers))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_coordinator_api_parser
</UL>

<P><STRONG><a name="[351]"></a>bs_get_short_addr_by_ext</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, bs_functions.o(i.bs_get_short_addr_by_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = bs_get_short_addr_by_ext &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_lbds_list_entry
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Joining0
</UL>

<P><STRONG><a name="[3e6]"></a>bs_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bs_main.o(i.bs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2512 + Unknown Stack Size
<LI>Call Chain = bs_init &rArr; AdpSetRequest &rArr; AdpSetMib &rArr; BootstrapWrapper_InitEapPsk &rArr; LBP_InitEapPsk &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpSetRequest
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacSetRequest
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bs_configuration
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbp_init_functions
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyIndex
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGMK
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_coordinator_api_parser
</UL>

<P><STRONG><a name="[3e9]"></a>bs_lbp_get_param</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, bs_main.o(i.bs_lbp_get_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = bs_lbp_get_param &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msg_timeout_value
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_initial_short_address
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ib_short_address_from_extended
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_is_in_list
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_coordinator_api_parser
</UL>

<P><STRONG><a name="[493]"></a>bs_lbp_join_ind_set_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bs_main.o(i.bs_lbp_join_ind_set_cb))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_coordinator_api_parser
</UL>

<P><STRONG><a name="[3ec]"></a>bs_lbp_kick_device</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, bs_main.o(i.bs_lbp_kick_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = bs_lbp_kick_device &rArr; AdpLbpRequest &rArr; AdpCommon_DataSend &rArr; AdpCommon_DataSendEx &rArr; _CheckBufferIndicationCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpLbpRequest
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_lbds_list_entry
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_nsdu_handler
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bs_configuration
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_is_in_list
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_get_ext_addr_by_short
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_kick_to_LBD
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_coordinator_api_parser
</UL>

<P><STRONG><a name="[3ee]"></a>bs_lbp_launch_rekeying</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bs_main.o(i.bs_lbp_launch_rekeying))
<BR><BR>[Stack]<UL><LI>Max Depth = 2536 + Unknown Stack Size
<LI>Call Chain = bs_lbp_launch_rekeying &rArr; _rekeying_process &rArr; Process_Joining0 &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rekeying_process
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbp_set_rekeying
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lbds_count
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_coordinator_api_parser
</UL>

<P><STRONG><a name="[494]"></a>bs_lbp_leave_ind_set_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bs_main.o(i.bs_lbp_leave_ind_set_cb))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_coordinator_api_parser
</UL>

<P><STRONG><a name="[3ef]"></a>bs_lbp_set_param</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, bs_main.o(i.bs_lbp_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 2528 + Unknown Stack Size
<LI>Call Chain = bs_lbp_set_param &rArr; AdpSetRequest &rArr; AdpSetMib &rArr; BootstrapWrapper_InitEapPsk &rArr; LBP_InitEapPsk &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpSetRequest
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacSetRequest
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rekey_gmk
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psk
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_msg_timeout_value
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_initial_short_address
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ids
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ib_short_address_from_extended
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gmk
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lbds_count
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_to_blacklist
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_lbds_list_entry
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyIndex
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_coordinator_api_parser
</UL>

<P><STRONG><a name="[3c2]"></a>bs_process</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bs_main.o(i.bs_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = bs_process &rArr; update_bootstrap_slots &rArr; AdpLbpRequest &rArr; AdpCommon_DataSend &rArr; AdpCommon_DataSendEx &rArr; _CheckBufferIndicationCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bootstrap_slots
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adp_mac_serial_if_process
</UL>

<P><STRONG><a name="[3bb]"></a>buart_if_is_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, buart_if.o(i.buart_if_is_free))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usi_encode_and_send
</UL>

<P><STRONG><a name="[4d7]"></a>buart_if_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, buart_if.o(i.buart_if_open))
<BR><BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_init
</UL>

<P><STRONG><a name="[4d8]"></a>buart_if_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, buart_if.o(i.buart_if_read))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_process
</UL>

<P><STRONG><a name="[3be]"></a>buart_if_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, buart_if.o(i.buart_if_write))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usi_encode_and_send
</UL>

<P><STRONG><a name="[3bc]"></a>busart_if_is_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, busart_if.o(i.busart_if_is_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = busart_if_is_free
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdc_read_tx_counter
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usi_encode_and_send
</UL>

<P><STRONG><a name="[3fb]"></a>busart_if_open</STRONG> (Thumb, 340 bytes, Stack size 72 bytes, busart_if.o(i.busart_if_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = busart_if_open &rArr; tc_find_mck_divisor
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init_rs232
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable_tx
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable_rx
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_start
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_init
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_enable_interrupt
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_enable_periph_clk
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_get_pdc_base
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable_interrupt
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_disable_interrupt
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_find_mck_divisor
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdc_tx_init
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdc_rx_init
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdc_enable_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_init
</UL>

<P><STRONG><a name="[407]"></a>busart_if_read</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, busart_if.o(i.busart_if_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = busart_if_read
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_process
</UL>

<P><STRONG><a name="[3bf]"></a>busart_if_write</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, busart_if.o(i.busart_if_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = busart_if_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdc_read_tx_counter
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdc_tx_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usi_encode_and_send
</UL>

<P><STRONG><a name="[262]"></a>cipher_wrapper_ccm_auth_decrypt</STRONG> (Thumb, 28 bytes, Stack size 48 bytes, cipher_wrapper.o(i.cipher_wrapper_ccm_auth_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = cipher_wrapper_ccm_auth_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; mbedtls_ccm_star_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_auth_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSecurityDecrypt
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSecurityDecrypt
</UL>

<P><STRONG><a name="[25c]"></a>cipher_wrapper_ccm_encrypt_and_tag</STRONG> (Thumb, 28 bytes, Stack size 48 bytes, cipher_wrapper.o(i.cipher_wrapper_ccm_encrypt_and_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = cipher_wrapper_ccm_encrypt_and_tag &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_encrypt_and_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSecurityEncrypt
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequest
</UL>

<P><STRONG><a name="[25d]"></a>cipher_wrapper_ccm_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrapper.o(i.cipher_wrapper_ccm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cipher_wrapper_ccm_free &rArr; mbedtls_ccm_free &rArr; mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSecurityDecrypt
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSecurityEncrypt
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSecurityDecrypt
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequest
</UL>

<P><STRONG><a name="[25a]"></a>cipher_wrapper_ccm_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrapper.o(i.cipher_wrapper_ccm_init))
<BR><BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSecurityDecrypt
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSecurityEncrypt
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSecurityDecrypt
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequest
</UL>

<P><STRONG><a name="[25b]"></a>cipher_wrapper_ccm_setkey</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrapper.o(i.cipher_wrapper_ccm_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cipher_wrapper_ccm_setkey &rArr; mbedtls_ccm_setkey &rArr; mbedtls_cipher_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSecurityDecrypt
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSecurityEncrypt
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSecurityDecrypt
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequest
</UL>

<P><STRONG><a name="[300]"></a>cipher_wrapper_cipher_cmac_finish</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrapper.o(i.cipher_wrapper_cipher_cmac_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = cipher_wrapper_cipher_cmac_finish &rArr; mbedtls_cipher_cmac_finish &rArr; cmac_generate_subkeys &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message3
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message2
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message2
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message3
</UL>

<P><STRONG><a name="[301]"></a>cipher_wrapper_cipher_cmac_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrapper.o(i.cipher_wrapper_cipher_cmac_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cipher_wrapper_cipher_cmac_reset &rArr; mbedtls_cipher_cmac_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message3
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message2
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message2
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message3
</UL>

<P><STRONG><a name="[2fe]"></a>cipher_wrapper_cipher_cmac_starts</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrapper.o(i.cipher_wrapper_cipher_cmac_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cipher_wrapper_cipher_cmac_starts &rArr; mbedtls_cipher_cmac_starts &rArr; mbedtls_cipher_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message3
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message2
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message2
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message3
</UL>

<P><STRONG><a name="[2ff]"></a>cipher_wrapper_cipher_cmac_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrapper.o(i.cipher_wrapper_cipher_cmac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = cipher_wrapper_cipher_cmac_update &rArr; mbedtls_cipher_cmac_update &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_update
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message3
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message2
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message2
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message3
</UL>

<P><STRONG><a name="[302]"></a>cipher_wrapper_cipher_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrapper.o(i.cipher_wrapper_cipher_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cipher_wrapper_cipher_free &rArr; mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message3
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message2
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message2
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message3
</UL>

<P><STRONG><a name="[2fa]"></a>cipher_wrapper_cipher_info_from_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrapper.o(i.cipher_wrapper_cipher_info_from_type))
<BR><BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message3
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message2
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message2
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message3
</UL>

<P><STRONG><a name="[2fd]"></a>cipher_wrapper_cipher_setup</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrapper.o(i.cipher_wrapper_cipher_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cipher_wrapper_cipher_setup &rArr; mbedtls_cipher_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message3
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message2
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message2
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message3
</UL>

<P><STRONG><a name="[1e2]"></a>crypto_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aes_wrapper.o(i.crypto_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crypto_init &rArr; mbedtls_memory_buffer_alloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpInitialize
</UL>

<P><STRONG><a name="[3ea]"></a>device_is_in_list</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, bs_functions.o(i.device_is_in_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = device_is_in_list
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_null_address
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_kick_device
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_get_param
</UL>

<P><STRONG><a name="[419]"></a>eax_auth_data</STRONG> (Thumb, 482 bytes, Stack size 24 bytes, eax.o(i.eax_auth_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 2128<LI>Call Chain = eax_auth_data &rArr; aes_encrypt &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_encrypt_message
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_decrypt_message
</UL>

<P><STRONG><a name="[41a]"></a>eax_auth_header</STRONG> (Thumb, 482 bytes, Stack size 24 bytes, eax.o(i.eax_auth_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 2128<LI>Call Chain = eax_auth_header &rArr; aes_encrypt &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_encrypt_message
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_decrypt_message
</UL>

<P><STRONG><a name="[41b]"></a>eax_compute_tag</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, eax.o(i.eax_compute_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120<LI>Call Chain = eax_compute_tag &rArr; aes_encrypt &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_encrypt_message
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_decrypt_message
</UL>

<P><STRONG><a name="[41c]"></a>eax_crypt_data</STRONG> (Thumb, 510 bytes, Stack size 24 bytes, eax.o(i.eax_crypt_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 2128<LI>Call Chain = eax_crypt_data &rArr; aes_encrypt &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_encrypt_message
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_decrypt_message
</UL>

<P><STRONG><a name="[306]"></a>eax_decrypt_message</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, eax.o(i.eax_decrypt_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176<LI>Call Chain = eax_decrypt_message &rArr; eax_init_message &rArr; aes_encrypt &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_init_message
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_crypt_data
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_compute_tag
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_auth_header
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_auth_data
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message4
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message3
</UL>

<P><STRONG><a name="[30c]"></a>eax_encrypt_message</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, eax.o(i.eax_encrypt_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160<LI>Call Chain = eax_encrypt_message &rArr; eax_init_message &rArr; aes_encrypt &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_init_message
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_crypt_data
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_compute_tag
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_auth_header
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_auth_data
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message3
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message4
</UL>

<P><STRONG><a name="[307]"></a>eax_end</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, eax.o(i.eax_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = eax_end &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message3
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message4
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message4
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message3
</UL>

<P><STRONG><a name="[304]"></a>eax_init_and_key</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, eax.o(i.eax_init_and_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120<LI>Call Chain = eax_init_and_key &rArr; aes_encrypt &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_key
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message3
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message4
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message4
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message3
</UL>

<P><STRONG><a name="[41d]"></a>eax_init_message</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, eax.o(i.eax_init_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2128<LI>Call Chain = eax_init_message &rArr; aes_encrypt &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_encrypt_message
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eax_decrypt_message
</UL>

<P><STRONG><a name="[41e]"></a>efc_perform_command</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, efc.o(i.efc_perform_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = efc_perform_command &rArr; efc_perform_fcr
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efc_perform_fcr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_user_signature
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_user_signature
</UL>

<P><STRONG><a name="[2c6]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[420]"></a>flash_erase_user_signature</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, flash_efc.o(i.flash_erase_user_signature))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = flash_erase_user_signature &rArr; efc_perform_command &rArr; efc_perform_fcr
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efc_perform_command
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_erase_storage
</UL>

<P><STRONG><a name="[421]"></a>flash_read_unique_id</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, flash_efc.o(i.flash_read_unique_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = flash_read_unique_id &rArr; efc_perform_read_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efc_perform_read_sequence (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_eui64
</UL>

<P><STRONG><a name="[423]"></a>flash_read_user_signature</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, flash_efc.o(i.flash_read_user_signature))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = flash_read_user_signature &rArr; efc_perform_read_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efc_perform_read_sequence (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_random_init
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_read_storage
</UL>

<P><STRONG><a name="[424]"></a>flash_write_user_signature</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, flash_efc.o(i.flash_write_user_signature))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = flash_write_user_signature &rArr; efc_perform_command &rArr; efc_perform_fcr
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efc_perform_command
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_write_storage
</UL>

<P><STRONG><a name="[3e3]"></a>flexcom_enable</STRONG> (Thumb, 386 bytes, Stack size 8 bytes, flexcom.o(i.flexcom_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flexcom_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_enable_periph_clk
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_switch_pck_to_mck
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_enable_pck
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_disable_pck
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_hw
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[3e4]"></a>flexcom_set_opmode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flexcom.o(i.flexcom_set_opmode))
<BR><BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_hw
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[67]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[34a]"></a>get_bootstrap_slot_by_addr</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bs_functions.o(i.get_bootstrap_slot_by_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = get_bootstrap_slot_by_addr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rekeying_process
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessLBPMessage
</UL>

<P><STRONG><a name="[2e1]"></a>get_bootstrap_slot_by_index</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bs_functions.o(i.get_bootstrap_slot_by_index))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpConfirm
</UL>

<P><STRONG><a name="[391]"></a>get_bs_configuration</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bs_functions.o(i.get_bs_configuration))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_kick_device
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rekeying_process
</UL>

<P><STRONG><a name="[3eb]"></a>get_ib_short_address_from_extended</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bs_functions.o(i.get_ib_short_address_from_extended))
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_get_param
</UL>

<P><STRONG><a name="[38f]"></a>get_initial_short_address</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bs_functions.o(i.get_initial_short_address))
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_get_param
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rekeying_process
</UL>

<P><STRONG><a name="[2e5]"></a>get_lbds_count</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, bs_functions.o(i.get_lbds_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_lbds_count
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_set_param
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_launch_rekeying
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpConfirm
</UL>

<P><STRONG><a name="[2e3]"></a>get_msg_timeout_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bs_functions.o(i.get_msg_timeout_value))
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_get_param
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rekeying_process
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpConfirm
</UL>

<P><STRONG><a name="[352]"></a>get_new_address</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, bs_functions.o(i.get_new_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = get_new_address &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Joining0
</UL>

<P><STRONG><a name="[390]"></a>get_next_nsdu_handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bs_functions.o(i.get_next_nsdu_handler))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_kick_device
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rekeying_process
</UL>

<P><STRONG><a name="[434]"></a>gpbr_read</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpbr.o(i.gpbr_read))
<BR><BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_persistent_info
</UL>

<P><STRONG><a name="[435]"></a>gpbr_write</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpbr.o(i.gpbr_write))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_persistent_data_GPBR
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_persistent_info
</UL>

<P><STRONG><a name="[42d]"></a>init_bootstrap_slots</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, bs_functions.o(i.init_bootstrap_slots))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_bootstrap_slots
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memset4_8
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbp_init_functions
</UL>

<P><STRONG><a name="[38d]"></a>initialize_bootstrap_message</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bs_functions.o(i.initialize_bootstrap_message))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rekeying_process
</UL>

<P><STRONG><a name="[34c]"></a>is_null_address</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bs_functions.o(i.is_null_address))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_lbds_list_entry
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_is_in_list
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_get_ext_addr_by_short
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_lbds_list_entry
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessLBPMessage
</UL>

<P><STRONG><a name="[2e4]"></a>lbp_get_rekeying</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bs_functions.o(i.lbp_get_rekeying))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpConfirm
</UL>

<P><STRONG><a name="[3e7]"></a>lbp_init_functions</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bs_functions.o(i.lbp_init_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lbp_init_functions &rArr; init_bootstrap_slots
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_bootstrap_slots
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_init
</UL>

<P><STRONG><a name="[2e7]"></a>lbp_set_rekeying</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bs_functions.o(i.lbp_set_rekeying))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_launch_rekeying
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpConfirm
</UL>

<P><STRONG><a name="[42f]"></a>load_persistent_info</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, storage.o(i.load_persistent_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 2528 + Unknown Stack Size
<LI>Call Chain = load_persistent_info &rArr; AdpSetRequestSync &rArr; AdpSetMib &rArr; BootstrapWrapper_InitEapPsk &rArr; LBP_InitEapPsk &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpSetRequestSync
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacSetRequestSync
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpbr_write
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpbr_read
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_reset_callback
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_pdd_callback
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_read_storage
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_storage
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_erase_storage
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
</UL>

<P><STRONG><a name="[2e2]"></a>log_show_slots_status</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, bs_functions.o(i.log_show_slots_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = log_show_slots_status &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpConfirm
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bootstrap_slots
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessLBPMessage
</UL>

<P><STRONG><a name="[13b]"></a>main</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = main &rArr; oss_init &rArr; platform_init_hw &rArr; sysclk_init &rArr; efc_perform_read_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_start
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_register_task
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[4b6]"></a>matrix_set_usb_device</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, matrix.o(i.matrix_set_usb_device))
<BR><BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_enable
</UL>

<P><STRONG><a name="[3c4]"></a>mbedtls_aes_crypt_ecb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, aes_tls.o(i.mbedtls_aes_crypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_encrypt
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrapper_aes_encrypt
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ecb_wrap
</UL>

<P><STRONG><a name="[3c7]"></a>mbedtls_aes_free</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, aes_tls.o(i.mbedtls_aes_free))
<BR><BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrapper_aes_free
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
</UL>

<P><STRONG><a name="[3c6]"></a>mbedtls_aes_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aes_tls.o(i.mbedtls_aes_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbedtls_aes_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrapper_aes_init
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
</UL>

<P><STRONG><a name="[3cc]"></a>mbedtls_aes_setkey_dec</STRONG> (Thumb, 226 bytes, Stack size 320 bytes, aes_tls.o(i.mbedtls_aes_setkey_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 2408<LI>Call Chain = mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_dec_wrap
</UL>

<P><STRONG><a name="[3ca]"></a>mbedtls_aes_setkey_enc</STRONG> (Thumb, 1000 bytes, Stack size 2088 bytes, aes_tls.o(i.mbedtls_aes_setkey_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088<LI>Call Chain = mbedtls_aes_setkey_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrapper_aes_setkey_enc
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_enc_wrap
</UL>

<P><STRONG><a name="[3c5]"></a>mbedtls_calloc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, platform.o(i.mbedtls_calloc))
<BR><BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_starts
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_alloc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_alloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
</UL>

<P><STRONG><a name="[40d]"></a>mbedtls_ccm_auth_decrypt</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, ccm.o(i.mbedtls_ccm_auth_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mbedtls_ccm_auth_decrypt &rArr; mbedtls_ccm_star_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_star_auth_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_ccm_auth_decrypt
</UL>

<P><STRONG><a name="[40e]"></a>mbedtls_ccm_encrypt_and_tag</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, ccm.o(i.mbedtls_ccm_encrypt_and_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_ccm_encrypt_and_tag
</UL>

<P><STRONG><a name="[40c]"></a>mbedtls_ccm_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ccm.o(i.mbedtls_ccm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ccm_free &rArr; mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_ccm_free
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_free
</UL>

<P><STRONG><a name="[40b]"></a>mbedtls_ccm_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ccm.o(i.mbedtls_ccm_init))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_ccm_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_alloc
</UL>

<P><STRONG><a name="[408]"></a>mbedtls_ccm_setkey</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ccm.o(i.mbedtls_ccm_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ccm_setkey &rArr; mbedtls_cipher_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_values
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_ccm_setkey
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_aes_setkey_wrap
</UL>

<P><STRONG><a name="[43c]"></a>mbedtls_ccm_star_auth_decrypt</STRONG> (Thumb, 114 bytes, Stack size 80 bytes, ccm.o(i.mbedtls_ccm_star_auth_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mbedtls_ccm_star_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_auth_decrypt
</UL>

<P><STRONG><a name="[40f]"></a>mbedtls_cipher_cmac_finish</STRONG> (Thumb, 298 bytes, Stack size 88 bytes, cmac.o(i.mbedtls_cipher_cmac_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mbedtls_cipher_cmac_finish &rArr; cmac_generate_subkeys &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_generate_subkeys
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_cmac_finish
</UL>

<P><STRONG><a name="[410]"></a>mbedtls_cipher_cmac_reset</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cmac.o(i.mbedtls_cipher_cmac_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_cmac_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_cmac_reset
</UL>

<P><STRONG><a name="[411]"></a>mbedtls_cipher_cmac_starts</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, cmac.o(i.mbedtls_cipher_cmac_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_cipher_cmac_starts &rArr; mbedtls_cipher_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_cmac_starts
</UL>

<P><STRONG><a name="[412]"></a>mbedtls_cipher_cmac_update</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, cmac.o(i.mbedtls_cipher_cmac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbedtls_cipher_cmac_update &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_cmac_update
</UL>

<P><STRONG><a name="[413]"></a>mbedtls_cipher_free</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cipher.o(i.mbedtls_cipher_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_free
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
</UL>

<P><STRONG><a name="[414]"></a>mbedtls_cipher_info_from_type</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_info_from_type
</UL>

<P><STRONG><a name="[43d]"></a>mbedtls_cipher_info_from_values</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, cipher.o(i.mbedtls_cipher_info_from_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbedtls_cipher_info_from_values
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[43e]"></a>mbedtls_cipher_setkey</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, cipher.o(i.mbedtls_cipher_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_starts
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[415]"></a>mbedtls_cipher_setup</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cipher.o(i.mbedtls_cipher_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_cipher_setup
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[40a]"></a>mbedtls_cipher_update</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, cipher.o(i.mbedtls_cipher_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_update
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_finish
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mask
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_generate_subkeys
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[3c8]"></a>mbedtls_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, platform.o(i.mbedtls_free))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_free
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_free
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
</UL>

<P><STRONG><a name="[42b]"></a>mbedtls_gcm_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gcm.o(i.mbedtls_gcm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_gcm_free &rArr; mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_free
</UL>

<P><STRONG><a name="[42a]"></a>mbedtls_gcm_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gcm.o(i.mbedtls_gcm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbedtls_gcm_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_alloc
</UL>

<P><STRONG><a name="[429]"></a>mbedtls_gcm_setkey</STRONG> (Thumb, 398 bytes, Stack size 64 bytes, gcm.o(i.mbedtls_gcm_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mbedtls_gcm_setkey &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_values
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_aes_setkey_wrap
</UL>

<P><STRONG><a name="[43f]"></a>mbedtls_gcm_update</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, gcm.o(i.mbedtls_gcm_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>

<P><STRONG><a name="[43a]"></a>mbedtls_internal_aes_decrypt</STRONG> (Thumb, 1172 bytes, Stack size 64 bytes, aes_tls.o(i.mbedtls_internal_aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[43b]"></a>mbedtls_internal_aes_encrypt</STRONG> (Thumb, 1164 bytes, Stack size 64 bytes, aes_tls.o(i.mbedtls_internal_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[418]"></a>mbedtls_memory_buffer_alloc_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, memory_buffer_alloc.o(i.mbedtls_memory_buffer_alloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_memory_buffer_alloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_calloc_free
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_init
</UL>

<P><STRONG><a name="[441]"></a>mbedtls_platform_set_calloc_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, platform.o(i.mbedtls_platform_set_calloc_free))
<BR><BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_init
</UL>

<P><STRONG><a name="[417]"></a>mbedtls_platform_zeroize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, platform_util.o(i.mbedtls_platform_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_starts
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_reset
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_finish
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_star_auth_decrypt
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mask
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_generate_subkeys
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_encrypt
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_decrypt
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
</UL>

<P><STRONG><a name="[366]"></a>oss_get_up_time_100ms</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oss_if.o(i.oss_get_up_time_100ms))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Register
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SignedSysGetUpTimeTenthsSeconds
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_EventHandler
</UL>

<P><STRONG><a name="[367]"></a>oss_get_up_time_10s</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oss_if.o(i.oss_get_up_time_10s))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SignedSysGetUpTime10Seconds
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast10Seconds
</UL>

<P><STRONG><a name="[153]"></a>oss_get_up_time_ms</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oss_if.o(i.oss_get_up_time_ms))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message3
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message4
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message2
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message4
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message2
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message3
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_ProcessMessage
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_JoinRequest
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBootState
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Rekey_TimerExpired_Callback
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessParameters
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_TimerExpired_Callback
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge_ThirdMessage
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Accepted
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Confirm
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeScanRequestRF
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeScanRequest
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMcpsDataRequestRF
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMcpsDataRequest
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperInitializeRF
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperInitialize
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rekeying_process
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpConfirm
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bootstrap_slots
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_show_slots_status
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessLBPMessage
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMcpsDataRequestRF
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMcpsDataRequest
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacEventHandlerRF
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacEventHandler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMlmeScanConfirmRF
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMlmeScanConfirm
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMlmeBeaconNotifyRF
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMlmeBeaconNotify
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMcpsDataIndicationRF
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMcpsDataIndication
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMcpsDataConfirmRF
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MacWrapperMcpsDataConfirm
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALScanRequest
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALInitialize
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALDataRequest
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getDataReqEntryByHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpScanConfirmRF
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpScanConfirm
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpDataIndicationRF
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpDataIndication
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpDataConfirmRF
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpDataConfirm
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpBeaconNotifyRF
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpBeaconNotify
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTxRequest
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutyCycleUpdate
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtCbTxConfirm
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequestRF
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowResetRequestRF
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowInitializeRF
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowEventHandlerRF
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowMacSnifferIndicationRF
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowRxIndicationRF
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxConfirmRF
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequest
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowResetRequest
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowInitialize
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowEventHandler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowMacSnifferIndication
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowRxIndication
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxConfirm
</UL>

<P><STRONG><a name="[437]"></a>oss_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, oss_if.o(i.oss_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = oss_init &rArr; platform_init_hw &rArr; sysclk_init &rArr; efc_perform_read_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_hw
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[438]"></a>oss_register_task</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, oss_if.o(i.oss_register_task))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[439]"></a>oss_start</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, oss_if.o(i.oss_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = oss_start &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_process
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_init
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_ms_callback
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_led_update
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_led_cfg_blink_rate
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_reset_det
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_power_down_det
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_1ms_timer
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_flag_call_process
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_flag_call_app_process
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_cfg_call_process_rate
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_cfg_call_app_process_rate
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_oss_execute_tasks
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b9]"></a>pcrc_calculate_crc</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, pcrc.o(i.pcrc_calculate_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pcrc_calculate_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_process
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usi_encode_and_send
</UL>

<P><STRONG><a name="[470]"></a>pdc_disable_transfer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pdc.o(i.pdc_disable_transfer))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_send_spi_cmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_send_wrrd_cmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_send_boot_cmd
</UL>

<P><STRONG><a name="[3fe]"></a>pdc_enable_transfer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pdc.o(i.pdc_enable_transfer))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_send_spi_cmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_send_wrrd_cmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_send_boot_cmd
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_open
</UL>

<P><STRONG><a name="[364]"></a>pdc_read_rx_counter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pdc.o(i.pdc_read_rx_counter))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC4_Handler
</UL>

<P><STRONG><a name="[3fa]"></a>pdc_read_tx_counter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pdc.o(i.pdc_read_tx_counter))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_write
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_is_free
</UL>

<P><STRONG><a name="[318]"></a>pdc_rx_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pdc.o(i.pdc_rx_init))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_send_spi_cmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_send_wrrd_cmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_send_boot_cmd
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC4_Handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOM4_Handler
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_open
</UL>

<P><STRONG><a name="[3ff]"></a>pdc_tx_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pdc.o(i.pdc_tx_init))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_send_spi_cmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_send_wrrd_cmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_send_boot_cmd
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_write
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_open
</UL>

<P><STRONG><a name="[451]"></a>pio_configure_interrupt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, pio.o(i.pio_configure_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_handler_set
</UL>

<P><STRONG><a name="[46d]"></a>pio_disable_interrupt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pio.o(i.pio_disable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_send_spi_cmd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_enable_interrupt
</UL>

<P><STRONG><a name="[315]"></a>pio_enable_interrupt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pio.o(i.pio_enable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_set_handler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_enable_interrupt
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOM0_Handler
</UL>

<P><STRONG><a name="[44f]"></a>pio_get_interrupt_mask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pio.o(i.pio_get_interrupt_mask))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_handler_process
</UL>

<P><STRONG><a name="[314]"></a>pio_get_interrupt_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pio.o(i.pio_get_interrupt_status))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_int_handler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOM0_Handler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_prf_if_int_handler
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_handler_process
</UL>

<P><STRONG><a name="[471]"></a>pio_get_pin_group_id</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pio.o(i.pio_get_pin_group_id))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_enable_interrupt
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_set_handler
</UL>

<P><STRONG><a name="[341]"></a>pio_handler_process</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, pio_handler.o(i.pio_handler_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pio_handler_process
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_get_interrupt_status
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_get_interrupt_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOB_Handler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOA_Handler
</UL>

<P><STRONG><a name="[450]"></a>pio_handler_set</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, pio_handler.o(i.pio_handler_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pio_handler_set
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_configure_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_set_handler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_set_handler
</UL>

<P><STRONG><a name="[473]"></a>pio_set_output</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, pio.o(i.pio_set_output))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_init
</UL>

<P><STRONG><a name="[33a]"></a>pl360_g3_coup_tx_config</STRONG> (Thumb, 340 bytes, Stack size 184 bytes, coup_tx_config.o(i.pl360_g3_coup_tx_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pl360_g3_coup_tx_config
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtResetRequest
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtInitialize
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_restore_configuration
</UL>

<P><STRONG><a name="[446]"></a>platform_cfg_call_app_process_rate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(i.platform_cfg_call_app_process_rate))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_start
</UL>

<P><STRONG><a name="[445]"></a>platform_cfg_call_process_rate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(i.platform_cfg_call_process_rate))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_start
</UL>

<P><STRONG><a name="[436]"></a>platform_erase_storage</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal.o(i.platform_erase_storage))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = platform_erase_storage &rArr; flash_erase_user_signature &rArr; efc_perform_command &rArr; efc_perform_fcr
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_user_signature
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_persistent_info
</UL>

<P><STRONG><a name="[44c]"></a>platform_flag_call_app_process</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal.o(i.platform_flag_call_app_process))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_start
</UL>

<P><STRONG><a name="[44b]"></a>platform_flag_call_process</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal.o(i.platform_flag_call_process))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_start
</UL>

<P><STRONG><a name="[44a]"></a>platform_init_1ms_timer</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hal.o(i.platform_init_1ms_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = platform_init_1ms_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_get_peripheral_hz
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_start
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_init
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_enable_interrupt
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_enable_periph_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_start
</UL>

<P><STRONG><a name="[453]"></a>platform_init_eui64</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, hal.o(i.platform_init_eui64))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = platform_init_eui64 &rArr; flash_read_unique_id &rArr; efc_perform_read_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_unique_id
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_coordinator_api_parser
</UL>

<P><STRONG><a name="[442]"></a>platform_init_hw</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, hal.o(i.platform_init_hw))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = platform_init_hw &rArr; sysclk_init &rArr; efc_perform_read_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_get_peripheral_hz
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init_rs232
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable_tx
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable_rx
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_init
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_enable_periph_clk
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexcom_set_opmode
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexcom_enable
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_init
</UL>

<P><STRONG><a name="[447]"></a>platform_init_power_down_det</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hal.o(i.platform_init_power_down_det))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = platform_init_power_down_det
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supc_set_monitor_threshold
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supc_set_monitor_sampling_period
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supc_enable_monitor_interrupt
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_enable_periph_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_start
</UL>

<P><STRONG><a name="[448]"></a>platform_init_reset_det</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal.o(i.platform_init_reset_det))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = platform_init_reset_det
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rstc_enable_user_reset_interrupt
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rstc_disable_user_reset
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_enable_periph_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_start
</UL>

<P><STRONG><a name="[432]"></a>platform_init_storage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal.o(i.platform_init_storage))
<BR><BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_persistent_info
</UL>

<P><STRONG><a name="[444]"></a>platform_led_cfg_blink_rate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal.o(i.platform_led_cfg_blink_rate))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_start
</UL>

<P><STRONG><a name="[336]"></a>platform_led_int_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal.o(i.platform_led_int_off))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtEventHandler
</UL>

<P><STRONG><a name="[38c]"></a>platform_led_int_on</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal.o(i.platform_led_int_on))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_process_frame_cb
</UL>

<P><STRONG><a name="[44e]"></a>platform_led_update</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal.o(i.platform_led_update))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_start
</UL>

<P><STRONG><a name="[357]"></a>platform_random_16</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal.o(i.platform_random_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = platform_random_16
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random128
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random16Ex
</UL>

<P><STRONG><a name="[350]"></a>platform_random_32</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hal.o(i.platform_random_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = platform_random_32
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random32Ex
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random32
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Joining0
</UL>

<P><STRONG><a name="[358]"></a>platform_random_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, hal.o(i.platform_random_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = platform_random_init &rArr; flash_read_user_signature &rArr; efc_perform_read_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_user_signature
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random_Initialize
</UL>

<P><STRONG><a name="[433]"></a>platform_read_storage</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal.o(i.platform_read_storage))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = platform_read_storage &rArr; flash_read_user_signature &rArr; efc_perform_read_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_user_signature
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_persistent_info
</UL>

<P><STRONG><a name="[443]"></a>platform_set_ms_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal.o(i.platform_set_ms_callback))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_start
</UL>

<P><STRONG><a name="[430]"></a>platform_set_pdd_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal.o(i.platform_set_pdd_callback))
<BR><BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_persistent_info
</UL>

<P><STRONG><a name="[431]"></a>platform_set_reset_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal.o(i.platform_set_reset_callback))
<BR><BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_persistent_info
</UL>

<P><STRONG><a name="[45b]"></a>platform_write_storage</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hal.o(i.platform_write_storage))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = platform_write_storage &rArr; flash_write_user_signature &rArr; efc_perform_command &rArr; efc_perform_fcr
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_user_signature
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_persistent_info
</UL>

<P><STRONG><a name="[425]"></a>pmc_disable_pck</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pmc.o(i.pmc_disable_pck))
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexcom_enable
</UL>

<P><STRONG><a name="[370]"></a>pmc_disable_periph_clk</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, pmc.o(i.pmc_disable_periph_clk))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Handler
</UL>

<P><STRONG><a name="[49d]"></a>pmc_disable_pllack</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pmc.o(i.pmc_disable_pllack))
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_init
</UL>

<P><STRONG><a name="[497]"></a>pmc_disable_pllbck</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pmc.o(i.pmc_disable_pllbck))
<BR><BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_enable_usb
</UL>

<P><STRONG><a name="[427]"></a>pmc_enable_pck</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pmc.o(i.pmc_enable_pck))
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexcom_enable
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1us_hal_init
</UL>

<P><STRONG><a name="[369]"></a>pmc_enable_periph_clk</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, pmc.o(i.pmc_enable_periph_clk))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1us_init
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_reset_det
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_power_down_det
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_hw
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_1ms_timer
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexcom_enable
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_open
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable_clock
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_enable
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Handler
</UL>

<P><STRONG><a name="[49a]"></a>pmc_enable_udpck</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pmc.o(i.pmc_enable_udpck))
<BR><BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_enable_usb
</UL>

<P><STRONG><a name="[49b]"></a>pmc_is_locked_pllack</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pmc.o(i.pmc_is_locked_pllack))
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_init
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_enable_usb
</UL>

<P><STRONG><a name="[498]"></a>pmc_is_locked_pllbck</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pmc.o(i.pmc_is_locked_pllbck))
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_init
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_enable_usb
</UL>

<P><STRONG><a name="[368]"></a>pmc_is_wakeup_clocks_restored</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sleep.o(i.pmc_is_wakeup_clocks_restored))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Handler
</UL>

<P><STRONG><a name="[460]"></a>pmc_osc_is_ready_32kxtal</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pmc.o(i.pmc_osc_is_ready_32kxtal))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_enable_source
</UL>

<P><STRONG><a name="[461]"></a>pmc_osc_is_ready_mainck</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pmc.o(i.pmc_osc_is_ready_mainck))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_enable_source
</UL>

<P><STRONG><a name="[4b7]"></a>pmc_set_fast_startup_input</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pmc.o(i.pmc_set_fast_startup_input))
<BR><BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_enable
</UL>

<P><STRONG><a name="[45e]"></a>pmc_switch_mainck_to_fastrc</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, pmc.o(i.pmc_switch_mainck_to_fastrc))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_enable_source
</UL>

<P><STRONG><a name="[45f]"></a>pmc_switch_mainck_to_xtal</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, pmc.o(i.pmc_switch_mainck_to_xtal))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_enable_source
</UL>

<P><STRONG><a name="[355]"></a>pmc_switch_mck_to_mainck</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, pmc.o(i.pmc_switch_mck_to_mainck))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTC_Handler
</UL>

<P><STRONG><a name="[49e]"></a>pmc_switch_mck_to_pllack</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, pmc.o(i.pmc_switch_mck_to_pllack))
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_init
</UL>

<P><STRONG><a name="[426]"></a>pmc_switch_pck_to_mck</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, pmc.o(i.pmc_switch_pck_to_mck))
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexcom_enable
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1us_hal_init
</UL>

<P><STRONG><a name="[45d]"></a>pmc_switch_sclk_to_32kxtal</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pmc.o(i.pmc_switch_sclk_to_32kxtal))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_enable_source
</UL>

<P><STRONG><a name="[499]"></a>pmc_switch_udpck_to_pllbck</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pmc.o(i.pmc_switch_udpck_to_pllbck))
<BR><BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_enable_usb
</UL>

<P><STRONG><a name="[462]"></a>pplc_if_config</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, pplc_if.o(i.pplc_if_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pplc_if_config
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_transfer_delay
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_peripheral_chip_select_value
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_clock_polarity
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_clock_phase
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bits_per_transfer
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_baudrate_div
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable_clock
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configure_cs_behavior
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_init
</UL>

<P><STRONG><a name="[88]"></a>pplc_if_delay</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, pplc_if.o(i.pplc_if_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pplc_if_delay &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_get_cpu_hz
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portable_delay_cycles (via Veneer)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pal.o(i.MacRtInitialize)
</UL>
<P><STRONG><a name="[87]"></a>pplc_if_enable_interrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pplc_if.o(i.pplc_if_enable_interrupt))
<BR><BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_enable_interrupt
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_disable_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pal.o(i.MacRtInitialize)
</UL>
<P><STRONG><a name="[89]"></a>pplc_if_get_thermal_warning</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pplc_if.o(i.pplc_if_get_thermal_warning))
<BR>[Address Reference Count : 1]<UL><LI> pal.o(i.MacRtInitialize)
</UL>
<P><STRONG><a name="[81]"></a>pplc_if_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, pplc_if.o(i.pplc_if_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pplc_if_init &rArr; pplc_if_config
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioport_set_pin_level
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioport_set_pin_dir
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pal.o(i.MacRtInitialize)
</UL>
<P><STRONG><a name="[82]"></a>pplc_if_reset</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, pplc_if.o(i.pplc_if_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pplc_if_reset &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_get_cpu_hz
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioport_set_pin_level
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioport_set_pin_dir
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portable_delay_cycles (via Veneer)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pal.o(i.MacRtInitialize)
</UL>
<P><STRONG><a name="[85]"></a>pplc_if_send_boot_cmd</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, pplc_if.o(i.pplc_if_send_boot_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pplc_if_send_boot_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bits_per_transfer
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdc_tx_init
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdc_rx_init
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdc_enable_transfer
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdc_disable_transfer
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pal.o(i.MacRtInitialize)
</UL>
<P><STRONG><a name="[86]"></a>pplc_if_send_wrrd_cmd</STRONG> (Thumb, 438 bytes, Stack size 40 bytes, pplc_if.o(i.pplc_if_send_wrrd_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pplc_if_send_wrrd_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bits_per_transfer
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdc_tx_init
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdc_rx_init
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdc_enable_transfer
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdc_disable_transfer
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pal.o(i.MacRtInitialize)
</UL>
<P><STRONG><a name="[84]"></a>pplc_if_set_handler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, pplc_if.o(i.pplc_if_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pplc_if_set_handler &rArr; pio_handler_set
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioport_set_pin_dir
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_handler_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pal.o(i.MacRtInitialize)
</UL>
<P><STRONG><a name="[83]"></a>pplc_if_set_stby_mode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pplc_if.o(i.pplc_if_set_stby_mode))
<BR>[Address Reference Count : 1]<UL><LI> pal.o(i.MacRtInitialize)
</UL>
<P><STRONG><a name="[a5]"></a>prf_if_enable_interrupt</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, prf_if.o(i.prf_if_enable_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prf_if_enable_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_get_pin_group_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pal_rf.o(i.PalRfInitialize)
</UL>
<P><STRONG><a name="[a3]"></a>prf_if_init</STRONG> (Thumb, 718 bytes, Stack size 56 bytes, prf_if.o(i.prf_if_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prf_if_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_set_output
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioport_set_pin_level
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_transfer_delay
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_clock_polarity
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_clock_phase
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bits_per_transfer
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_baudrate_div
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable_clock
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configure_cs_behavior
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_get_pin_group_id
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_disable_interrupt
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pal_rf.o(i.PalRfInitialize)
</UL>
<P><STRONG><a name="[a8]"></a>prf_if_is_spi_busy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, prf_if.o(i.prf_if_is_spi_busy))
<BR>[Address Reference Count : 1]<UL><LI> pal_rf.o(i.PalRfInitialize)
</UL>
<P><STRONG><a name="[a9]"></a>prf_if_led</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, prf_if.o(i.prf_if_led))
<BR><BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioport_set_pin_level
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pal_rf.o(i.PalRfInitialize)
</UL>
<P><STRONG><a name="[a4]"></a>prf_if_reset</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, prf_if.o(i.prf_if_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prf_if_reset &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portable_delay_cycles (via Veneer)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioport_set_pin_level
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pal_rf.o(i.PalRfInitialize)
</UL>
<P><STRONG><a name="[a7]"></a>prf_if_send_spi_cmd</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, prf_if.o(i.prf_if_send_spi_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prf_if_send_spi_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_peripheral_chip_select_value
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_disable_interrupt
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdc_tx_init
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdc_rx_init
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdc_enable_transfer
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdc_disable_transfer
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pal_rf.o(i.PalRfInitialize)
</UL>
<P><STRONG><a name="[a6]"></a>prf_if_set_handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, prf_if.o(i.prf_if_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prf_if_set_handler &rArr; pio_handler_set
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_handler_set
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_get_pin_group_id
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_enable_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pal_rf.o(i.PalRfInitialize)
</UL>
<P><STRONG><a name="[2e0]"></a>process_MIB_get_confirm</STRONG> (Thumb, 1628 bytes, Stack size 16 bytes, serial_if_mib_common.o(i.process_MIB_get_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = process_MIB_get_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy_to_usi_endianness_uint32
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_GetMacConfirm
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_GetConfirmRF
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_GetConfirm
</UL>

<P><STRONG><a name="[495]"></a>process_MIB_get_request</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, serial_if_mib_common.o(i.process_MIB_get_request))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
</UL>

<P><STRONG><a name="[334]"></a>process_MIB_set_confirm</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, serial_if_mib_common.o(i.process_MIB_set_confirm))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_SetConfirmRF
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_SetConfirm
</UL>

<P><STRONG><a name="[475]"></a>process_MIB_set_request</STRONG> (Thumb, 1418 bytes, Stack size 48 bytes, serial_if_mib_common.o(i.process_MIB_set_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = process_MIB_set_request &rArr; mem_copy_from_usi_endianness_uint16
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy_from_usi_endianness_uint32
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy_from_usi_endianness_uint16
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
</UL>

<P><STRONG><a name="[38e]"></a>process_accepted_GMK_activation</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, bs_functions.o(i.process_accepted_GMK_activation))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = process_accepted_GMK_activation &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_Encode_AcceptedRequest
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_GMK_Activation
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rekeying_process
</UL>

<P><STRONG><a name="[2ef]"></a>remove_lbds_list_entry</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bs_functions.o(i.remove_lbds_list_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = remove_lbds_list_entry &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_null_address
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_8
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_kick_device
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpIndication
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Joining0
</UL>

<P><STRONG><a name="[3d1]"></a>rf215_addon_init</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, rf215_sniffer_if.o(i.rf215_addon_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rf215_addon_init
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_enable
</UL>

<P><STRONG><a name="[479]"></a>rf215_addon_stringify_cfm</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, rf215_sniffer_if.o(i.rf215_addon_stringify_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rf215_addon_stringify_cfm &rArr; rf215_sniffer_if_stringify_cfm
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_sniffer_if_stringify_cfm
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_event_handler
</UL>

<P><STRONG><a name="[47b]"></a>rf215_addon_stringify_ind</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rf215_sniffer_if.o(i.rf215_addon_stringify_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rf215_addon_stringify_ind &rArr; rf215_sniffer_if_stringify_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_sniffer_if_stringify_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_rx_event_handler
</UL>

<P><STRONG><a name="[3d9]"></a>rf215_addon_stringify_tx</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rf215_sniffer_if.o(i.rf215_addon_stringify_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rf215_addon_stringify_tx &rArr; rf215_sniffer_if_stringify_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_sniffer_if_stringify_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_tx_req
</UL>

<P><STRONG><a name="[3b1]"></a>rf215_bbc_ccatx_abort</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rf215_bbc.o(i.rf215_bbc_ccatx_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rf215_bbc_ccatx_abort &rArr; rf215_spi_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_frame_end_event
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_auto_stop
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_prog_start
</UL>

<P><STRONG><a name="[47e]"></a>rf215_bbc_ccatx_edc_event</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, rf215_bbc.o(i.rf215_bbc_ccatx_edc_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rf215_bbc_ccatx_edc_event &rArr; rf215_spi_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_edc_event
</UL>

<P><STRONG><a name="[399]"></a>rf215_bbc_check_rx_params</STRONG> (Thumb, 738 bytes, Stack size 64 bytes, rf215_bbc.o(i.rf215_bbc_check_rx_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rf215_bbc_check_rx_params &rArr; rf215_trx_upd_sync &rArr; rf215_spi_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bbc_frame_duration
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_upd_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rf215_rx_start
</UL>

<P><STRONG><a name="[3a9]"></a>rf215_bbc_get_cnt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rf215_bbc.o(i.rf215_bbc_get_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rf215_bbc_get_cnt &rArr; rf215_spi_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_frame_end_event
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_abort
</UL>

<P><STRONG><a name="[39b]"></a>rf215_bbc_get_ofdm_scp</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rf215_bbc.o(i.rf215_bbc_get_ofdm_scp))
<BR><BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rxfe_regs
</UL>

<P><STRONG><a name="[3d0]"></a>rf215_bbc_init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, rf215_bbc.o(i.rf215_bbc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rf215_bbc_init &rArr; rf215_pll_init &rArr; _pll_get_params
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_pll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_enable
</UL>

<P><STRONG><a name="[3d7]"></a>rf215_bbc_set_phy_cfg</STRONG> (Thumb, 468 bytes, Stack size 48 bytes, rf215_bbc.o(i.rf215_bbc_set_phy_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rf215_bbc_set_phy_cfg &rArr; rf215_pll_set_chn_cfg &rArr; rf215_trx_switch_txprep &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_rx_listen
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_pll_set_chn_cfg
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_pll_check_chn_cfg
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_fe_upd_phy_cfg
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bbc_set_ofdm_cfg
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bbc_set_fsk_cfg
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bbc_ofdm_cfg_regs
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bbc_fsk_cfg_regs
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_auto_stop
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_wait_pll_lock
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_switch_trxoff
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_pib_set
</UL>

<P><STRONG><a name="[39d]"></a>rf215_bbc_set_rx_proc_delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rf215_bbc.o(i.rf215_bbc_set_rx_proc_delay))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rxfe_set_cfg
</UL>

<P><STRONG><a name="[485]"></a>rf215_bbc_trx_reset_event</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, rf215_bbc.o(i.rf215_bbc_trx_reset_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rf215_bbc_trx_reset_event &rArr; _bbc_set_fsk_cfg &rArr; rf215_spi_write_upd
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bbc_set_ofdm_cfg
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bbc_set_fsk_cfg
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bbc_ofdm_cfg_regs
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bbc_fsk_cfg_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_irq_handler
</UL>

<P><STRONG><a name="[3b4]"></a>rf215_bbc_tx_auto_cfg</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, rf215_bbc.o(i.rf215_bbc_tx_auto_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rf215_bbc_tx_auto_cfg &rArr; rf215_spi_write_upd
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_write_upd
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_txprep
</UL>

<P><STRONG><a name="[486]"></a>rf215_bbc_tx_auto_stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rf215_bbc.o(i.rf215_bbc_tx_auto_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rf215_bbc_tx_auto_stop &rArr; rf215_spi_write_upd
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_write_upd
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_auto_stop
</UL>

<P><STRONG><a name="[3ac]"></a>rf215_bbc_upd_tx_params</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, rf215_bbc.o(i.rf215_bbc_upd_tx_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rf215_bbc_upd_tx_params &rArr; rf215_fe_set_txpwr &rArr; rf215_trx_switch_trxoff &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_fe_set_txpwr
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bbc_frame_duration
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_switch_trxoff
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_param_cfg
</UL>

<P><STRONG><a name="[487]"></a>rf215_fe_set_txpwr</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, rf215_fe.o(i.rf215_fe_set_txpwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rf215_fe_set_txpwr &rArr; rf215_trx_switch_trxoff &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_switch_trxoff
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_upd_tx_params
</UL>

<P><STRONG><a name="[488]"></a>rf215_fe_trx_reset_event</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, rf215_fe.o(i.rf215_fe_trx_reset_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rf215_fe_trx_reset_event &rArr; _rxfe_regs &rArr; rf215_pll_get_fdelta &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txfe_set_cfg
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txfe_regs
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rxfe_set_cfg
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rxfe_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_irq_handler
</UL>

<P><STRONG><a name="[3d8]"></a>rf215_fe_upd_phy_cfg</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, rf215_fe.o(i.rf215_fe_upd_phy_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rf215_fe_upd_phy_cfg &rArr; _rxfe_regs &rArr; rf215_pll_get_fdelta &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txfe_set_cfg
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txfe_regs
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rxfe_set_cfg
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rxfe_regs
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_switch_trxoff
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_pib_set
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_set_phy_cfg
</UL>

<P><STRONG><a name="[b6]"></a>rf215_irq_handler</STRONG> (Thumb, 616 bytes, Stack size 48 bytes, rf215_irq.o(i.rf215_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rf215_irq_handler &rArr; rf215_rx_event &rArr; _rf215_rx_agcr &rArr; _rf215_rx_psdu_end &rArr; rf215_tx_abort_by_rx &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_trxrdy_event
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_rx_check_aborts
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_frame_end_event
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_edc_event
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_rx_listen
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_rx_event
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_pll_trx_reset_event
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_fe_trx_reset_event
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_trx_reset_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at86rf215.o(i.at86rf_enable)
</UL>
<P><STRONG><a name="[481]"></a>rf215_pll_check_chn_cfg</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, rf215_pll.o(i.rf215_pll_check_chn_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rf215_pll_check_chn_cfg &rArr; _pll_get_params
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pll_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_set_phy_cfg
</UL>

<P><STRONG><a name="[37b]"></a>rf215_pll_get_chn_freq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rf215_pll.o(i.rf215_pll_get_chn_freq))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_pib_get
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bbc_ofdm_cfg_regs
</UL>

<P><STRONG><a name="[37c]"></a>rf215_pll_get_fdelta</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, rf215_pll.o(i.rf215_pll_get_fdelta))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rf215_pll_get_fdelta &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rxfe_regs
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bbc_ofdm_cfg_regs
</UL>

<P><STRONG><a name="[480]"></a>rf215_pll_init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, rf215_pll.o(i.rf215_pll_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rf215_pll_init &rArr; _pll_get_params
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pll_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_init
</UL>

<P><STRONG><a name="[482]"></a>rf215_pll_set_chn_cfg</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, rf215_pll.o(i.rf215_pll_set_chn_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rf215_pll_set_chn_cfg &rArr; rf215_trx_switch_txprep &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pll_set_chn_cfg
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pll_get_params
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_wait_pll_lock
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_switch_txprep
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_switch_trxoff
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_set_phy_cfg
</UL>

<P><STRONG><a name="[48a]"></a>rf215_pll_trx_reset_event</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rf215_pll.o(i.rf215_pll_trx_reset_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rf215_pll_trx_reset_event &rArr; _pll_set_chn_cfg &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pll_set_chn_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_irq_handler
</UL>

<P><STRONG><a name="[490]"></a>rf215_rx_abort</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, rf215_rx.o(i.rf215_rx_abort))
<BR><BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_rx_check_aborts
</UL>

<P><STRONG><a name="[48e]"></a>rf215_rx_event</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, rf215_rx.o(i.rf215_rx_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rf215_rx_event &rArr; _rf215_rx_agcr &rArr; _rf215_rx_psdu_end &rArr; rf215_tx_abort_by_rx &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rf215_rx_start
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rf215_rx_frame_end
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rf215_rx_agcr
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_irq_handler
</UL>

<P><STRONG><a name="[3d3]"></a>rf215_rx_event_handler</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, rf215_rx.o(i.rf215_rx_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rf215_rx_event_handler &rArr; rf215_addon_stringify_ind &rArr; rf215_sniffer_if_stringify_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_addon_stringify_ind
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_event_handler
</UL>

<P><STRONG><a name="[3cf]"></a>rf215_rx_init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rf215_rx.o(i.rf215_rx_init))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_enable
</UL>

<P><STRONG><a name="[47a]"></a>rf215_sniffer_if_stringify_cfm</STRONG> (Thumb, 148 bytes, Stack size 4 bytes, rf215_sniffer_if_g3.o(i.rf215_sniffer_if_stringify_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rf215_sniffer_if_stringify_cfm
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_addon_stringify_cfm
</UL>

<P><STRONG><a name="[47c]"></a>rf215_sniffer_if_stringify_ind</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, rf215_sniffer_if_g3.o(i.rf215_sniffer_if_stringify_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rf215_sniffer_if_stringify_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_addon_stringify_ind
</UL>

<P><STRONG><a name="[47d]"></a>rf215_sniffer_if_stringify_tx</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rf215_sniffer_if_g3.o(i.rf215_sniffer_if_stringify_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rf215_sniffer_if_stringify_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_addon_stringify_tx
</UL>

<P><STRONG><a name="[393]"></a>rf215_spi_send_cmd</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rf215_spi.o(i.rf215_spi_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rf215_spi_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_tx_req
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_pib_set
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_frame_end_event
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_rx_listen
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_rx_event
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_trx_reset_event
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_irq_handler
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_fe_set_txpwr
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_set_phy_cfg
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_upd_tx_params
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_tx_auto_cfg
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_get_cnt
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_ccatx_edc_event
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_ccatx_abort
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_auto_stop
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_txprep
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_prog_start
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_check_rx_params
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rf215_rx_start
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rf215_rx_psdu_end
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rf215_rx_agcr
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_wait_pll_lock
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_upd_sync
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_switch_txprep
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_switch_trxoff
</UL>

<P><STRONG><a name="[37e]"></a>rf215_spi_write_upd</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, rf215_spi.o(i.rf215_spi_write_upd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rf215_spi_write_upd
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pll_set_chn_cfg
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txfe_set_cfg
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rxfe_set_cfg
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bbc_set_ofdm_cfg
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bbc_set_fsk_cfg
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_tx_auto_stop
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_tx_auto_cfg
</UL>

<P><STRONG><a name="[396]"></a>rf215_trx_rx_listen</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, rf215_trx_ctl.o(i.rf215_trx_rx_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rf215_trx_rx_listen &rArr; rf215_spi_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_tx_req
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_frame_end_event
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_edc_event
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_irq_handler
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_set_phy_cfg
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_prog_start
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_prog_handler
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rf215_rx_start
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rf215_rx_frame_end
</UL>

<P><STRONG><a name="[3d6]"></a>rf215_trx_switch_trxoff</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rf215_trx_ctl.o(i.rf215_trx_switch_trxoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rf215_trx_switch_trxoff &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_rx_check_aborts
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_pib_set
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_pll_set_chn_cfg
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_fe_upd_phy_cfg
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_fe_set_txpwr
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_set_phy_cfg
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_upd_tx_params
</UL>

<P><STRONG><a name="[3b3]"></a>rf215_trx_switch_txprep</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rf215_trx_ctl.o(i.rf215_trx_switch_txprep))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rf215_trx_switch_txprep &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_rx_check_aborts
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_pll_set_chn_cfg
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_txprep
</UL>

<P><STRONG><a name="[3b5]"></a>rf215_trx_upd_sync</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, rf215_trx_ctl.o(i.rf215_trx_upd_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rf215_trx_upd_sync &rArr; rf215_spi_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_txprep
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_check_rx_params
</UL>

<P><STRONG><a name="[484]"></a>rf215_trx_wait_pll_lock</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rf215_trx_ctl.o(i.rf215_trx_wait_pll_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rf215_trx_wait_pll_lock &rArr; rf215_spi_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_pll_set_chn_cfg
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_set_phy_cfg
</UL>

<P><STRONG><a name="[397]"></a>rf215_tx_abort_by_rx</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rf215_tx.o(i.rf215_tx_abort_by_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rf215_tx_abort_by_rx &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rf215_rx_psdu_end
</UL>

<P><STRONG><a name="[3d5]"></a>rf215_tx_auto_stop</STRONG> (Thumb, 548 bytes, Stack size 48 bytes, rf215_tx.o(i.rf215_tx_auto_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rf215_tx_auto_stop &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_tx_auto_stop
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_ccatx_abort
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_tx_req
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_pib_set
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_set_phy_cfg
</UL>

<P><STRONG><a name="[48c]"></a>rf215_tx_edc_event</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, rf215_tx.o(i.rf215_tx_edc_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rf215_tx_edc_event &rArr; _tx_prog_start &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_rx_listen
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_ccatx_edc_event
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_txprep
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_total_delay
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_prog_start
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_irq_handler
</UL>

<P><STRONG><a name="[3d2]"></a>rf215_tx_event_handler</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, rf215_tx.o(i.rf215_tx_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rf215_tx_event_handler &rArr; rf215_addon_stringify_cfm &rArr; rf215_sniffer_if_stringify_cfm
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_addon_stringify_cfm
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_event_handler
</UL>

<P><STRONG><a name="[48d]"></a>rf215_tx_frame_end_event</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, rf215_tx.o(i.rf215_tx_frame_end_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rf215_tx_frame_end_event &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_rx_listen
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_get_cnt
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_ccatx_abort
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_confirm
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_irq_handler
</UL>

<P><STRONG><a name="[3ce]"></a>rf215_tx_init</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, rf215_tx.o(i.rf215_tx_init))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_enable
</UL>

<P><STRONG><a name="[3d4]"></a>rf215_tx_rx_check_aborts</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, rf215_tx.o(i.rf215_tx_rx_check_aborts))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_abort
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_rx_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_pib_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_irq_handler
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_switch_txprep
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_switch_trxoff
</UL>

<P><STRONG><a name="[37f]"></a>rf215_tx_set_bb_delay</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rf215_tx.o(i.rf215_tx_set_bb_delay))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bbc_set_ofdm_cfg
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bbc_set_fsk_cfg
</UL>

<P><STRONG><a name="[3b7]"></a>rf215_tx_set_proc_delay</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rf215_tx.o(i.rf215_tx_set_proc_delay))
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txfe_set_cfg
</UL>

<P><STRONG><a name="[48b]"></a>rf215_tx_trxrdy_event</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, rf215_tx.o(i.rf215_tx_trxrdy_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rf215_tx_trxrdy_event &rArr; _tx_prog_start &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_prog_start
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_irq_handler
</UL>

<P><STRONG><a name="[458]"></a>rstc_disable_user_reset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rstc.o(i.rstc_disable_user_reset))
<BR><BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_reset_det
</UL>

<P><STRONG><a name="[459]"></a>rstc_enable_user_reset_interrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rstc.o(i.rstc_enable_user_reset_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_reset_det
</UL>

<P><STRONG><a name="[353]"></a>rstc_get_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rstc.o(i.rstc_get_status))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTC_Handler
</UL>

<P><STRONG><a name="[491]"></a>serial_if_adp_get_notifications</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, serial_if_adp.o(i.serial_if_adp_get_notifications))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_coordinator_api_parser
</UL>

<P><STRONG><a name="[b5]"></a>serial_if_coordinator_api_parser</STRONG> (Thumb, 664 bytes, Stack size 224 bytes, serial_if_coordinator.o(i.serial_if_coordinator_api_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 2760 + Unknown Stack Size
<LI>Call Chain = serial_if_coordinator_api_parser &rArr; bs_lbp_launch_rekeying &rArr; _rekeying_process &rArr; Process_Joining0 &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetRequestSync
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacSetRequestSync
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_adp_get_notifications
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_eui64
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpInitialize
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adp_mac_serial_if_set_state
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adp_mac_serial_if_get_state
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_set_param
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_leave_ind_set_cb
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_launch_rekeying
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_kick_device
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_join_ind_set_cb
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_get_param
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_init
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_get_not_handlers
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_common.o(i.adp_mac_serial_if_init)
</UL>
<P><STRONG><a name="[b4]"></a>serial_if_g3adp_api_parser</STRONG> (Thumb, 794 bytes, Stack size 64 bytes, serial_if_adp.o(i.serial_if_g3adp_api_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 2592 + Unknown Stack Size
<LI>Call Chain = serial_if_g3adp_api_parser &rArr; load_persistent_info &rArr; AdpSetRequestSync &rArr; AdpSetMib &rArr; BootstrapWrapper_InitEapPsk &rArr; LBP_InitEapPsk &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_persistent_info
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpRouteDiscoveryRequest
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpResetRequest
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpPathDiscoveryRequest
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNetworkStartRequest
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNetworkLeaveRequest
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNetworkJoinRequest
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacSetRequestSync
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacGetRequest
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetRequest
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpDiscoveryRequest
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpDataRequest
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_adp_get_notifications
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_triggerAdpSetRequest
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_MIB_set_request
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_eui64
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpInitialize
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adp_mac_serial_if_set_state
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adp_mac_serial_if_get_state
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacSetRequest
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpLbpRequest
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_common.o(i.adp_mac_serial_if_init)
</UL>
<P><STRONG><a name="[b3]"></a>serial_if_g3mac_api_parser</STRONG> (Thumb, 1164 bytes, Stack size 208 bytes, serial_if_mac.o(i.serial_if_g3mac_api_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = serial_if_g3mac_api_parser &rArr; adp_mac_serial_if_set_state &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_MIB_set_request
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_MIB_get_request
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_eui64
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeStartRequestRF
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeStartRequest
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeSetRequestSync
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeSetRequestRF
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeSetRequest
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeScanRequestRF
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeScanRequest
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeResetRequestRF
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeResetRequest
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeGetRequestRF
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeGetRequest
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMcpsDataRequestRF
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMcpsDataRequest
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperInitializeRF
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperInitialize
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpInitialize
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adp_mac_serial_if_set_state
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adp_mac_serial_if_get_state
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_common.o(i.adp_mac_serial_if_init)
</UL>
<P><STRONG><a name="[3e8]"></a>set_bs_configuration</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, bs_functions.o(i.set_bs_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = set_bs_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_init
</UL>

<P><STRONG><a name="[2ea]"></a>set_gmk</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bs_functions.o(i.set_gmk))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_set_param
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpConfirm
</UL>

<P><STRONG><a name="[3f5]"></a>set_ib_short_address_from_extended</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bs_functions.o(i.set_ib_short_address_from_extended))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_set_param
</UL>

<P><STRONG><a name="[3f0]"></a>set_ids</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bs_functions.o(i.set_ids))
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_set_param
</UL>

<P><STRONG><a name="[3f1]"></a>set_initial_short_address</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bs_functions.o(i.set_initial_short_address))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_set_param
</UL>

<P><STRONG><a name="[3f6]"></a>set_msg_timeout_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bs_functions.o(i.set_msg_timeout_value))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_set_param
</UL>

<P><STRONG><a name="[3f3]"></a>set_psk</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bs_functions.o(i.set_psk))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_set_param
</UL>

<P><STRONG><a name="[3f4]"></a>set_rekey_gmk</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bs_functions.o(i.set_rekey_gmk))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_set_param
</UL>

<P><STRONG><a name="[46a]"></a>spi_configure_cs_behavior</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, spi.o(i.spi_configure_cs_behavior))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_init
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_config
</UL>

<P><STRONG><a name="[463]"></a>spi_enable_clock</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, spi.o(i.spi_enable_clock))
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_enable_periph_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_init
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_config
</UL>

<P><STRONG><a name="[468]"></a>spi_set_baudrate_div</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, spi.o(i.spi_set_baudrate_div))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_init
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_config
</UL>

<P><STRONG><a name="[467]"></a>spi_set_bits_per_transfer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi.o(i.spi_set_bits_per_transfer))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_send_wrrd_cmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_send_boot_cmd
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_config
</UL>

<P><STRONG><a name="[466]"></a>spi_set_clock_phase</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, spi.o(i.spi_set_clock_phase))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_init
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_config
</UL>

<P><STRONG><a name="[465]"></a>spi_set_clock_polarity</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, spi.o(i.spi_set_clock_polarity))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_init
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_config
</UL>

<P><STRONG><a name="[464]"></a>spi_set_peripheral_chip_select_value</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi.o(i.spi_set_peripheral_chip_select_value))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_send_spi_cmd
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_config
</UL>

<P><STRONG><a name="[469]"></a>spi_set_transfer_delay</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi.o(i.spi_set_transfer_delay))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_init
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_config
</UL>

<P><STRONG><a name="[2f0]"></a>store_persistent_data_GPBR</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, storage.o(i.store_persistent_data_GPBR))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = store_persistent_data_GPBR &rArr; _get_persistent_data &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpbr_write
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_persistent_data
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAdpNotification_UpdNonVolatileDataIndication
</UL>

<P><STRONG><a name="[c2]"></a>store_persistent_info</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, storage.o(i.store_persistent_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = store_persistent_info &rArr; _get_persistent_data &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_persistent_data
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_write_storage
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(i.load_persistent_info)
</UL>
<P><STRONG><a name="[457]"></a>supc_enable_monitor_interrupt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, supc.o(i.supc_enable_monitor_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_power_down_det
</UL>

<P><STRONG><a name="[35a]"></a>supc_get_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, supc.o(i.supc_get_status))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPC_Handler
</UL>

<P><STRONG><a name="[455]"></a>supc_set_monitor_sampling_period</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, supc.o(i.supc_set_monitor_sampling_period))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_power_down_det
</UL>

<P><STRONG><a name="[456]"></a>supc_set_monitor_threshold</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, supc.o(i.supc_set_monitor_threshold))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_power_down_det
</UL>

<P><STRONG><a name="[4a0]"></a>supc_set_regulator_trim_user</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, supc.o(i.supc_set_regulator_trim_user))
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_init
</UL>

<P><STRONG><a name="[496]"></a>sysclk_enable_usb</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sysclk.o(i.sysclk_enable_usb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sysclk_enable_usb &rArr; pll_enable_source
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_switch_udpck_to_pllbck
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_is_locked_pllbck
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_is_locked_pllack
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_enable_udpck
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_disable_pllbck
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_enable_source
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_enable
</UL>

<P><STRONG><a name="[454]"></a>sysclk_init</STRONG> (Thumb, 146 bytes, Stack size 152 bytes, sysclk.o(i.sysclk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = sysclk_init &rArr; efc_perform_read_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init_flash
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efc_perform_read_sequence (via Veneer)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supc_set_regulator_trim_user
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_switch_mck_to_pllack
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_is_locked_pllbck
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_is_locked_pllack
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_disable_pllack
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_enable_source
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_hw
</UL>

<P><STRONG><a name="[49c]"></a>system_init_flash</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, system_samg55.o(i.system_init_flash))
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_init
</UL>

<P><STRONG><a name="[35e]"></a>tc_disable_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tc.o(i.tc_disable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1us_cancel_int
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC2_Handler
</UL>

<P><STRONG><a name="[362]"></a>tc_enable_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tc.o(i.tc_enable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1us_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_1ms_timer
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC2_Handler
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_assign_int
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_open
</UL>

<P><STRONG><a name="[404]"></a>tc_find_mck_divisor</STRONG> (Thumb, 102 bytes, Stack size 36 bytes, tc.o(i.tc_find_mck_divisor))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tc_find_mck_divisor
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_open
</UL>

<P><STRONG><a name="[360]"></a>tc_get_interrupt_mask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tc.o(i.tc_get_interrupt_mask))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC2_Handler
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_assign_int
</UL>

<P><STRONG><a name="[35b]"></a>tc_get_status</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tc.o(i.tc_get_status))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC3_Handler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC2_Handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC4_Handler
</UL>

<P><STRONG><a name="[405]"></a>tc_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tc.o(i.tc_init))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1us_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_1ms_timer
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_open
</UL>

<P><STRONG><a name="[35c]"></a>tc_read_cv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tc.o(i.tc_read_cv))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1us_set_int
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1us_get
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC2_Handler
</UL>

<P><STRONG><a name="[35d]"></a>tc_read_ra</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tc.o(i.tc_read_ra))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC2_Handler
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_assign_int
</UL>

<P><STRONG><a name="[35f]"></a>tc_read_rb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tc.o(i.tc_read_rb))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC2_Handler
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_assign_int
</UL>

<P><STRONG><a name="[317]"></a>tc_start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tc.o(i.tc_start))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1us_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_1ms_timer
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOM4_Handler
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_open
</UL>

<P><STRONG><a name="[365]"></a>tc_stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tc.o(i.tc_stop))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC4_Handler
</UL>

<P><STRONG><a name="[361]"></a>tc_write_ra</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tc.o(i.tc_write_ra))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1us_set_int
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC2_Handler
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_assign_int
</UL>

<P><STRONG><a name="[363]"></a>tc_write_rb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tc.o(i.tc_write_rb))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1us_set_int
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC2_Handler
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_assign_int
</UL>

<P><STRONG><a name="[406]"></a>tc_write_rc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tc.o(i.tc_write_rc))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1us_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_1ms_timer
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_open
</UL>

<P><STRONG><a name="[ad]"></a>timer_1us_cancel_int</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, timer_1us.o(i.timer_1us_cancel_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_1us_cancel_int &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_disable_interrupt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pal_rf.o(i.PalRfInitialize)
</UL>
<P><STRONG><a name="[ab]"></a>timer_1us_enable_interrupt</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, timer_1us.o(i.timer_1us_enable_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> pal_rf.o(i.PalRfInitialize)
</UL>
<P><STRONG><a name="[aa]"></a>timer_1us_get</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, timer_1us.o(i.timer_1us_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_1us_get
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_read_cv
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfGetPhyTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pal_rf.o(i.PalRfInitialize)
</UL>
<P><STRONG><a name="[4a1]"></a>timer_1us_hal_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, timer_1us_hal.o(i.timer_1us_hal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = timer_1us_hal_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_switch_pck_to_mck
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_enable_pck
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1us_init
</UL>

<P><STRONG><a name="[345]"></a>timer_1us_init</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, timer_1us.o(i.timer_1us_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = timer_1us_init &rArr; timer_1us_hal_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_start
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_init
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_enable_interrupt
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_enable_periph_clk
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1us_hal_init
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfInitialize
</UL>

<P><STRONG><a name="[ac]"></a>timer_1us_set_int</STRONG> (Thumb, 438 bytes, Stack size 56 bytes, timer_1us.o(i.timer_1us_set_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = timer_1us_set_int &rArr; _tc_assign_int
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rb
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_ra
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_read_cv
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_assign_int
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pal_rf.o(i.PalRfInitialize)
</UL>
<P><STRONG><a name="[4a7]"></a>udc_process_setup</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, udc.o(i.udc_process_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = udc_process_setup &rArr; udc_reqstd &rArr; udc_iface_enable &rArr; udd_ep_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_update_iface_desc
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_reqstd
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ctrl_interrupt
</UL>

<P><STRONG><a name="[372]"></a>udc_reset</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, udc.o(i.udc_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udc_reset &rArr; udd_ep_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_free
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_update_iface_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_stop
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Handler
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_reqstd
</UL>

<P><STRONG><a name="[36a]"></a>udc_sof_notify</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, udc.o(i.udc_sof_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udc_sof_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Handler
</UL>

<P><STRONG><a name="[4af]"></a>udc_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, udc.o(i.udc_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = udc_start &rArr; udd_enable &rArr; sysclk_enable_usb &rArr; pll_enable_source
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_udc_start
</UL>

<P><STRONG><a name="[354]"></a>udc_stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, udc.o(i.udc_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = udc_stop &rArr; udd_disable &rArr; udd_sleep_mode &rArr; cpu_irq_save
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_reset
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTC_Handler
</UL>

<P><STRONG><a name="[4b1]"></a>udd_disable</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, udp_device.o(i.udd_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = udd_disable &rArr; udd_sleep_mode &rArr; cpu_irq_save
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_sleep_mode
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_stop
</UL>

<P><STRONG><a name="[4b0]"></a>udd_enable</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, udp_device.o(i.udd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = udd_enable &rArr; sysclk_enable_usb &rArr; pll_enable_source
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_enable_periph_clk
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_set_usb_device
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_enable_usb
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_set_fast_startup_input
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_sleep_mode
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_start
</UL>

<P><STRONG><a name="[4ad]"></a>udd_ep_abort</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, udp_device.o(i.udd_ep_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = udd_ep_abort &rArr; cpu_irq_save
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_finish_job
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_reqstd
</UL>

<P><STRONG><a name="[4a6]"></a>udd_ep_alloc</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, udp_device.o(i.udd_ep_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udd_ep_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_reqstd
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_iface_enable
</UL>

<P><STRONG><a name="[4ac]"></a>udd_ep_clear_halt</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, udp_device.o(i.udd_ep_clear_halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udd_ep_clear_halt
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_reqstd
</UL>

<P><STRONG><a name="[4a4]"></a>udd_ep_free</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, udp_device.o(i.udd_ep_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udd_ep_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_finish_job
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_reset
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_iface_disable
</UL>

<P><STRONG><a name="[4aa]"></a>udd_ep_is_halted</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, udp_device.o(i.udd_ep_is_halted))
<BR><BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_reqstd
</UL>

<P><STRONG><a name="[4bb]"></a>udd_ep_run</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, udp_device.o(i.udd_ep_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = udd_ep_run &rArr; udd_ep_in_sent
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_in_sent
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_tx_send
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_rx_start
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_data_received
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_ctrl_state_notify
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_ctrl_state_change
</UL>

<P><STRONG><a name="[4ae]"></a>udd_ep_set_halt</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, udp_device.o(i.udd_ep_set_halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = udd_ep_set_halt &rArr; cpu_irq_save
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_reqstd
</UL>

<P><STRONG><a name="[4d0]"></a>udd_get_frame_number</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, udp_device.o(i.udd_get_frame_number))
<BR><BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_tx_send
</UL>

<P><STRONG><a name="[4cf]"></a>udd_get_micro_frame_number</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, udp_device.o(i.udd_get_micro_frame_number))
<BR><BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_tx_send
</UL>

<P><STRONG><a name="[4ab]"></a>udd_getaddress</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, udp_device.o(i.udd_getaddress))
<BR><BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_reqstd
</UL>

<P><STRONG><a name="[4ce]"></a>udd_is_high_speed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, udp_device.o(i.udd_is_high_speed))
<BR><BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_tx_send
</UL>

<P><STRONG><a name="[4b2]"></a>udd_set_address</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, udp_device.o(i.udd_set_address))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_valid_address
</UL>

<P><STRONG><a name="[4a9]"></a>udd_set_setup_payload</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udp_device.o(i.udd_set_setup_payload))
<BR><BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_reqstd
</UL>

<P><STRONG><a name="[b]"></a>udi_cdc_comm_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, udi_cdc.o(i.udi_cdc_comm_disable))
<BR>[Address Reference Count : 1]<UL><LI> udi_cdc.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>udi_cdc_comm_enable</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, udi_cdc.o(i.udi_cdc_comm_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udi_cdc_comm_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_cdc_set_coding_ext
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_cdc_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udi_cdc.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>udi_cdc_comm_setup</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, udi_cdc.o(i.udi_cdc_comm_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udi_cdc_comm_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_cdc_set_dtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udi_cdc.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>udi_cdc_data_disable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, udi_cdc.o(i.udi_cdc_data_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udi_cdc_data_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_cdc_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udi_cdc.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>udi_cdc_data_enable</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, udi_cdc.o(i.udi_cdc_data_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = udi_cdc_data_enable &rArr; udi_cdc_tx_send &rArr; udd_ep_run &rArr; udd_ep_in_sent
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_tx_send
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_rx_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udi_cdc.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>udi_cdc_data_setup</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, udi_cdc.o(i.udi_cdc_data_setup))
<BR>[Address Reference Count : 1]<UL><LI> udi_cdc.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>udi_cdc_data_sof_notify</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udi_cdc.o(i.udi_cdc_data_sof_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = udi_cdc_data_sof_notify &rArr; udi_cdc_tx_send &rArr; udd_ep_run &rArr; udd_ep_in_sent
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_tx_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udi_cdc.o(.data)
</UL>
<P><STRONG><a name="[4c6]"></a>udi_cdc_get_nb_received_data</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, udi_cdc.o(i.udi_cdc_get_nb_received_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = udi_cdc_get_nb_received_data &rArr; cpu_irq_save
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_cdc_rx_notify
</UL>

<P><STRONG><a name="[d]"></a>udi_cdc_getsetting</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, udi_cdc.o(i.udi_cdc_getsetting))
<BR>[Address Reference Count : 2]<UL><LI> udi_cdc.o(.data)
<LI> udi_cdc.o(.data)
</UL>
<P><STRONG><a name="[4c7]"></a>udi_cdc_is_tx_ready</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, udi_cdc.o(i.udi_cdc_is_tx_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = udi_cdc_is_tx_ready &rArr; udi_cdc_multi_get_free_tx_buffer &rArr; cpu_irq_save
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_multi_get_free_tx_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_udc_write_buf
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_udc_is_tx_ready
</UL>

<P><STRONG><a name="[4c8]"></a>udi_cdc_multi_get_free_tx_buffer</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, udi_cdc.o(i.udi_cdc_multi_get_free_tx_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = udi_cdc_multi_get_free_tx_buffer &rArr; cpu_irq_save
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_is_tx_ready
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_multi_write_buf
</UL>

<P><STRONG><a name="[4c9]"></a>udi_cdc_multi_read_buf</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, udi_cdc.o(i.udi_cdc_multi_read_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + In Cycle
<LI>Call Chain = udi_cdc_multi_read_buf &rArr;  udi_cdc_rx_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_rx_start
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_read_buf
</UL>

<P><STRONG><a name="[4ca]"></a>udi_cdc_multi_write_buf</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, udi_cdc.o(i.udi_cdc_multi_write_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = udi_cdc_multi_write_buf &rArr; udi_cdc_multi_get_free_tx_buffer &rArr; cpu_irq_save
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_multi_get_free_tx_buffer
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_write_buf
</UL>

<P><STRONG><a name="[4cb]"></a>udi_cdc_read_buf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, udi_cdc.o(i.udi_cdc_read_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = udi_cdc_read_buf &rArr; udi_cdc_multi_read_buf &rArr;  udi_cdc_rx_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_multi_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_cdc_rx_notify
</UL>

<P><STRONG><a name="[4cd]"></a>udi_cdc_signal_overrun</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, udi_cdc.o(i.udi_cdc_signal_overrun))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = udi_cdc_signal_overrun &rArr; udi_cdc_ctrl_state_change &rArr; udd_ep_run &rArr; udd_ep_in_sent
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_ctrl_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_udc_write_buf
</UL>

<P><STRONG><a name="[4d1]"></a>udi_cdc_write_buf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, udi_cdc.o(i.udi_cdc_write_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = udi_cdc_write_buf &rArr; udi_cdc_multi_write_buf &rArr; udi_cdc_multi_get_free_tx_buffer &rArr; cpu_irq_save
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_multi_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_udc_write_buf
</UL>

<P><STRONG><a name="[3f7]"></a>update_bootstrap_slots</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, bs_functions.o(i.update_bootstrap_slots))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = update_bootstrap_slots &rArr; AdpLbpRequest &rArr; AdpCommon_DataSend &rArr; AdpCommon_DataSendEx &rArr; _CheckBufferIndicationCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpLbpRequest
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_show_slots_status
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_process
</UL>

<P><STRONG><a name="[400]"></a>usart_disable_interrupt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(i.usart_disable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_open
</UL>

<P><STRONG><a name="[401]"></a>usart_enable_interrupt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(i.usart_enable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_open
</UL>

<P><STRONG><a name="[403]"></a>usart_enable_rx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(i.usart_enable_rx))
<BR><BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_hw
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_open
</UL>

<P><STRONG><a name="[402]"></a>usart_enable_tx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(i.usart_enable_tx))
<BR><BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_hw
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_open
</UL>

<P><STRONG><a name="[3fd]"></a>usart_get_pdc_base</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, usart.o(i.usart_get_pdc_base))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_open
</UL>

<P><STRONG><a name="[316]"></a>usart_get_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(i.usart_get_status))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOM4_Handler
</UL>

<P><STRONG><a name="[3fc]"></a>usart_init_rs232</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, usart.o(i.usart_init_rs232))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_init_rs232 &rArr; usart_set_async_baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_reset
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_set_async_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_hw
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_open
</UL>

<P><STRONG><a name="[4d4]"></a>usart_read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(i.usart_read))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_serial_getchar
</UL>

<P><STRONG><a name="[4d2]"></a>usart_reset</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usart.o(i.usart_reset))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init_rs232
</UL>

<P><STRONG><a name="[4d3]"></a>usart_set_async_baudrate</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, usart.o(i.usart_set_async_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usart_set_async_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init_rs232
</UL>

<P><STRONG><a name="[428]"></a>usart_write</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(i.usart_write))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_serial_putchar
</UL>

<P><STRONG><a name="[4c3]"></a>usb_wrp_cdc_disable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_wrp.o(i.usb_wrp_cdc_disable))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_data_disable
</UL>

<P><STRONG><a name="[4bd]"></a>usb_wrp_cdc_enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_wrp.o(i.usb_wrp_cdc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_comm_enable
</UL>

<P><STRONG><a name="[36f]"></a>usb_wrp_cdc_resume_action</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_wrp.o(i.usb_wrp_cdc_resume_action))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Handler
</UL>

<P><STRONG><a name="[4cc]"></a>usb_wrp_cdc_rx_notify</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, usb_wrp.o(i.usb_wrp_cdc_rx_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = usb_wrp_cdc_rx_notify &rArr; udi_cdc_read_buf &rArr; udi_cdc_multi_read_buf &rArr;  udi_cdc_rx_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_read_buf
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_get_nb_received_data
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_rx_start
</UL>

<P><STRONG><a name="[4bc]"></a>usb_wrp_cdc_set_coding_ext</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_wrp.o(i.usb_wrp_cdc_set_coding_ext))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_comm_enable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_line_coding_received
</UL>

<P><STRONG><a name="[4be]"></a>usb_wrp_cdc_set_dtr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_wrp.o(i.usb_wrp_cdc_set_dtr))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_comm_setup
</UL>

<P><STRONG><a name="[36b]"></a>usb_wrp_cdc_sof_action</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_wrp.o(i.usb_wrp_cdc_sof_action))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Handler
</UL>

<P><STRONG><a name="[371]"></a>usb_wrp_cdc_suspend_action</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_wrp.o(i.usb_wrp_cdc_suspend_action))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Handler
</UL>

<P><STRONG><a name="[3bd]"></a>usb_wrp_udc_is_tx_ready</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_wrp.o(i.usb_wrp_udc_is_tx_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usb_wrp_udc_is_tx_ready &rArr; udi_cdc_is_tx_ready &rArr; udi_cdc_multi_get_free_tx_buffer &rArr; cpu_irq_save
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_is_tx_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usi_encode_and_send
</UL>

<P><STRONG><a name="[4d5]"></a>usb_wrp_udc_read_buf</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, usb_wrp.o(i.usb_wrp_udc_read_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usb_wrp_udc_read_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_process
</UL>

<P><STRONG><a name="[4d6]"></a>usb_wrp_udc_start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usb_wrp.o(i.usb_wrp_udc_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usb_wrp_udc_start &rArr; udc_start &rArr; udd_enable &rArr; sysclk_enable_usb &rArr; pll_enable_source
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_start
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portable_delay_cycles (via Veneer)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_init
</UL>

<P><STRONG><a name="[3c0]"></a>usb_wrp_udc_write_buf</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usb_wrp.o(i.usb_wrp_udc_write_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usb_wrp_udc_write_buf &rArr; udi_cdc_signal_overrun &rArr; udi_cdc_ctrl_state_change &rArr; udd_ep_run &rArr; udd_ep_in_sent
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_write_buf
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_signal_overrun
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_is_tx_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usi_encode_and_send
</UL>

<P><STRONG><a name="[449]"></a>usi_init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, usi.o(i.usi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = usi_init &rArr; busart_if_open &rArr; tc_find_mck_divisor
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_udc_start
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buart_if_open
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_open
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_start
</UL>

<P><STRONG><a name="[44d]"></a>usi_process</STRONG> (Thumb, 1196 bytes, Stack size 48 bytes, usi.o(i.usi_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = usi_process &rArr; usb_wrp_udc_read_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcrc_calculate_crc
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_udc_read_buf
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buart_if_read
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_read
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usi_prot_id2idx
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_start
</UL>

<P><STRONG><a name="[2df]"></a>usi_send_cmd</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, usi.o(i.usi_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usi_prot_id2idx
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usi_encode_and_send
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootstrapNotification_LeaveIndication
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootstrapNotification_JoinIndication
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAdpNotification_RouteNotFoundIndication
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAdpNotification_PREQIndication
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_SetMacConfirm
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_SetConfirm
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_RouteDiscoveryConfirm
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_ResetConfirm
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_PathDiscoveryConfirm
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_NetworkStatusIndication
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_NetworkStartConfirm
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_NetworkLeaveIndication
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_NetworkLeaveConfirm
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_NetworkJoinConfirm
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpIndication
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpConfirm
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_GetMacConfirm
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_GetConfirm
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_DiscoveryIndication
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_DiscoveryConfirm
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_DataConfirm
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_BufferIndication
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_AdpdDataIndication
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_StartConfirmRF
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_StartConfirm
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_SetConfirmRF
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_SetConfirm
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_ScanConfirmRF
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_ScanConfirm
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_ResetConfirmRF
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_ResetConfirm
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_MacSnifferIndicationRF
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_MacSnifferIndication
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_GetConfirmRF
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_GetConfirm
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_DataIndicationRF
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_DataIndication
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_DataConfirmRF
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_DataConfirm
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_CommStatusIndicationRF
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_CommStatusIndication
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_BeaconNotifyRF
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacNotification_BeaconNotify
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3mac_api_parser
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_coordinator_api_parser
</UL>

<P><STRONG><a name="[3c1]"></a>usi_set_callback</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usi.o(i.usi_set_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usi_set_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usi_prot_id2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adp_mac_serial_if_init
</UL>

<P><STRONG><a name="[135]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[69]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[281]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePOSTableRF
</UL>

<P><STRONG><a name="[4db]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[280]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePOSTableRF
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCost_CompositeMetric
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_CompositeMetric
</UL>

<P><STRONG><a name="[4de]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[4e1]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[4e6]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[2aa]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCost_CompositeMetric
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_CompositeMetric
</UL>

<P><STRONG><a name="[4e3]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2ad]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCost_CompositeMetric
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_CompositeMetric
</UL>

<P><STRONG><a name="[4e4]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[27d]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePOSTableRF
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCost_CompositeMetric
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_CompositeMetric
</UL>

<P><STRONG><a name="[52b]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[2ac]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_CompositeMetric
</UL>

<P><STRONG><a name="[4e5]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[4e9]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[27e]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePOSTableRF
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCost_CompositeMetric
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_CompositeMetric
</UL>

<P><STRONG><a name="[4e7]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[4dd]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[4e0]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[2ab]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_CompositeMetric
</UL>

<P><STRONG><a name="[4e8]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[2a9]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_CompositeMetric
</UL>

<P><STRONG><a name="[4ea]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[2a8]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCostUnidirectional_CompositeMetric
</UL>

<P><STRONG><a name="[4ec]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[282]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePOSTableRF
</UL>

<P><STRONG><a name="[4ed]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[4ee]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
</UL>

<P><STRONG><a name="[4dc]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[112]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[116]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[4e2]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[27f]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePOSTableRF
</UL>

<P><STRONG><a name="[4ef]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[52c]"></a>efc_write_fmr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, efc.o(.ramfunc), UNUSED)

<P><STRONG><a name="[41f]"></a>efc_perform_fcr</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, efc.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = efc_perform_fcr
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efc_perform_command (via Veneer)
</UL>

<P><STRONG><a name="[422]"></a>efc_perform_read_sequence</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, efc.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = efc_perform_read_sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_init (via Veneer)
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_user_signature (via Veneer)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_unique_id (via Veneer)
</UL>

<P><STRONG><a name="[46c]"></a>portable_delay_cycles</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cycle_counter.o(.ramfunc))
<BR><BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portable_delay_cycles
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_reset (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_reset (via Veneer)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_delay (via Veneer)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_udc_start (via Veneer)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portable_delay_cycles
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ae]"></a>_at86rf_exception_cb</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pal_rf.o(i._at86rf_exception_cb))
<BR>[Address Reference Count : 1]<UL><LI> pal_rf.o(i.PalRfInitialize)
</UL>
<P><STRONG><a name="[b0]"></a>_at86rf_rx_ind_cb</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, pal_rf.o(i._at86rf_rx_ind_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _at86rf_rx_ind_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pal_rf.o(i.PalRfInitialize)
</UL>
<P><STRONG><a name="[af]"></a>_at86rf_tx_cfm_cb</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, pal_rf.o(i._at86rf_tx_cfm_cb))
<BR>[Address Reference Count : 1]<UL><LI> pal_rf.o(i.PalRfInitialize)
</UL>
<P><STRONG><a name="[80]"></a>_Dummy_Callback_DataSend</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, processlbp.o(i._Dummy_Callback_DataSend))
<BR>[Address Reference Count : 2]<UL><LI> processlbp.o(i._Join_Process_Accepted)
<LI> processlbp.o(i.LBP_ProcessMessage)
</UL>
<P><STRONG><a name="[377]"></a>_IsBootState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, processlbp.o(i._IsBootState))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Accepted
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Callback_DataSend
</UL>

<P><STRONG><a name="[7f]"></a>_Join_Callback_DataSend</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, processlbp.o(i._Join_Callback_DataSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = _Join_Callback_DataSend &rArr; _Join_Confirm &rArr; _SetBootState &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBootState
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Confirm
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsBootState
</UL>
<BR>[Address Reference Count : 3]<UL><LI> processlbp.o(i._Join_Process_Challenge)
<LI> processlbp.o(i._Join_Process_Challenge_ThirdMessage)
<LI> processlbp.o(i.LBP_JoinRequest)
</UL>
<P><STRONG><a name="[332]"></a>_Join_Confirm</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, processlbp.o(i._Join_Confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = _Join_Confirm &rArr; _SetBootState &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Unregister
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBootState
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_ProcessMessage
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_TimerExpired_Callback
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Accepted
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Callback_DataSend
</UL>

<P><STRONG><a name="[331]"></a>_Join_Process_Accepted</STRONG> (Thumb, 628 bytes, Stack size 280 bytes, processlbp.o(i._Join_Process_Accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 2896 + Unknown Stack Size
<LI>Call Chain = _Join_Process_Accepted &rArr; _ProcessParameters &rArr; AdpSetRequestSync &rArr; AdpSetMib &rArr; BootstrapWrapper_InitEapPsk &rArr; LBP_InitEapPsk &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Unregister
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_Encode_JoiningRequest
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetShortAddressSync
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetRcCoordSync
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetGroupMasterKeySync
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpLbpRequestExt
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetRequestSync
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBootState
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessParameters
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Confirm
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsBootState
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_ProcessMessage
</UL>

<P><STRONG><a name="[330]"></a>_Join_Process_Challenge</STRONG> (Thumb, 674 bytes, Stack size 456 bytes, processlbp.o(i._Join_Process_Challenge))
<BR><BR>[Stack]<UL><LI>Max Depth = 3392 + Unknown Stack Size
<LI>Call Chain = _Join_Process_Challenge &rArr; _Join_Process_Challenge_ThirdMessage &rArr; _ProcessParameters &rArr; AdpSetRequestSync &rArr; AdpSetMib &rArr; BootstrapWrapper_InitEapPsk &rArr; LBP_InitEapPsk &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Register
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random128
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_Encode_JoiningRequest
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_InitializeTEK
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message2
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message1
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpLbpRequestExt
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetRequestSync
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBootState
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge_ThirdMessage
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsBootState
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_ProcessMessage
</UL>

<P><STRONG><a name="[379]"></a>_Join_Process_Challenge_ThirdMessage</STRONG> (Thumb, 424 bytes, Stack size 320 bytes, processlbp.o(i._Join_Process_Challenge_ThirdMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 2936 + Unknown Stack Size
<LI>Call Chain = _Join_Process_Challenge_ThirdMessage &rArr; _ProcessParameters &rArr; AdpSetRequestSync &rArr; AdpSetMib &rArr; BootstrapWrapper_InitEapPsk &rArr; LBP_InitEapPsk &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_Encode_JoiningRequest
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Encode_Message4
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAP_PSK_Decode_Message3
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpLbpRequestExt
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBootState
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessParameters
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge
</UL>

<P><STRONG><a name="[7e]"></a>_Join_TimerExpired_Callback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, processlbp.o(i._Join_TimerExpired_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = _Join_TimerExpired_Callback &rArr; _Join_Confirm &rArr; _SetBootState &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Confirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> processlbp.o(i.LBP_JoinRequest)
</UL>
<P><STRONG><a name="[378]"></a>_ProcessParameters</STRONG> (Thumb, 784 bytes, Stack size 136 bytes, processlbp.o(i._ProcessParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 2616 + Unknown Stack Size
<LI>Call Chain = _ProcessParameters &rArr; AdpSetRequestSync &rArr; AdpSetMib &rArr; BootstrapWrapper_InitEapPsk &rArr; LBP_InitEapPsk &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogBuffer
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpSetRequestSync
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SecurityResetSync
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_DeleteGroupMasterKeySync
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetRequestSync
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge_ThirdMessage
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Accepted
</UL>

<P><STRONG><a name="[b1]"></a>_Rekey_TimerExpired_Callback</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, processlbp.o(i._Rekey_TimerExpired_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = _Rekey_TimerExpired_Callback &rArr; _SetBootState &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBootState
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> processlbp.o(i._Join_Process_Challenge)
</UL>
<P><STRONG><a name="[32d]"></a>_SetBootState</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, processlbp.o(i._SetBootState))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _SetBootState &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_JoinRequest
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_ForceJoined
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBP_ForceJoinStatus
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Rekey_TimerExpired_Callback
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge_ThirdMessage
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Challenge
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Process_Accepted
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Confirm
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Join_Callback_DataSend
</UL>

<P><STRONG><a name="[c0]"></a>AdpNotification_LbpConfirm</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, bs_main.o(i.AdpNotification_LbpConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 2584 + Unknown Stack Size
<LI>Call Chain = AdpNotification_LbpConfirm &rArr; _rekeying_process &rArr; Process_Joining0 &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpSetRequest
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacSetRequest
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rekeying_process
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gmk
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_show_slots_status
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbp_set_rekeying
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbp_get_rekeying
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msg_timeout_value
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lbds_count
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootstrap_slot_by_index
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_lbds_list_entry
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyIndex
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRekeyGMK
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyIndex
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGMK
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bs_main.o(i.bs_get_not_handlers)
</UL>
<P><STRONG><a name="[c1]"></a>AdpNotification_LbpIndication</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bs_main.o(i.AdpNotification_LbpIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 2728 + Unknown Stack Size
<LI>Call Chain = AdpNotification_LbpIndication &rArr; ProcessLBPMessage &rArr; EAP_PSK_Encode_Message3 &rArr; eax_encrypt_message &rArr; eax_init_message &rArr; aes_encrypt &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_lbds_list_entry
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessLBPMessage
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bs_main.o(i.bs_get_not_handlers)
</UL>
<P><STRONG><a name="[2e6]"></a>_rekeying_process</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, bs_main.o(i._rekeying_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 2528 + Unknown Stack Size
<LI>Call Chain = _rekeying_process &rArr; Process_Joining0 &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpLbpRequest
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_accepted_GMK_activation
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_bootstrap_message
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_nsdu_handler
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msg_timeout_value
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_initial_short_address
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bs_configuration
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootstrap_slot_by_addr
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Joining0
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_lbp_launch_rekeying
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpNotification_LbpConfirm
</UL>

<P><STRONG><a name="[e9]"></a>MacNotification_BeaconNotify</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, serial_if_mac.o(i.MacNotification_BeaconNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = MacNotification_BeaconNotify &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_mac.o(i.serial_if_g3mac_api_parser)
</UL>
<P><STRONG><a name="[f3]"></a>MacNotification_BeaconNotifyRF</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, serial_if_mac.o(i.MacNotification_BeaconNotifyRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = MacNotification_BeaconNotifyRF &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_mac.o(i.serial_if_g3mac_api_parser)
</UL>
<P><STRONG><a name="[ec]"></a>MacNotification_CommStatusIndication</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, serial_if_mac.o(i.MacNotification_CommStatusIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = MacNotification_CommStatusIndication &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_mac.o(i.serial_if_g3mac_api_parser)
</UL>
<P><STRONG><a name="[f6]"></a>MacNotification_CommStatusIndicationRF</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, serial_if_mac.o(i.MacNotification_CommStatusIndicationRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = MacNotification_CommStatusIndicationRF &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_mac.o(i.serial_if_g3mac_api_parser)
</UL>
<P><STRONG><a name="[e4]"></a>MacNotification_DataConfirm</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, serial_if_mac.o(i.MacNotification_DataConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = MacNotification_DataConfirm &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_mac.o(i.serial_if_g3mac_api_parser)
</UL>
<P><STRONG><a name="[ee]"></a>MacNotification_DataConfirmRF</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, serial_if_mac.o(i.MacNotification_DataConfirmRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = MacNotification_DataConfirmRF &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_mac.o(i.serial_if_g3mac_api_parser)
</UL>
<P><STRONG><a name="[e5]"></a>MacNotification_DataIndication</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, serial_if_mac.o(i.MacNotification_DataIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = MacNotification_DataIndication &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_mac.o(i.serial_if_g3mac_api_parser)
</UL>
<P><STRONG><a name="[ef]"></a>MacNotification_DataIndicationRF</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, serial_if_mac.o(i.MacNotification_DataIndicationRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = MacNotification_DataIndicationRF &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_mac.o(i.serial_if_g3mac_api_parser)
</UL>
<P><STRONG><a name="[e6]"></a>MacNotification_GetConfirm</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, serial_if_mac.o(i.MacNotification_GetConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = MacNotification_GetConfirm &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_MIB_get_confirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_mac.o(i.serial_if_g3mac_api_parser)
</UL>
<P><STRONG><a name="[f0]"></a>MacNotification_GetConfirmRF</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, serial_if_mac.o(i.MacNotification_GetConfirmRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = MacNotification_GetConfirmRF &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_MIB_get_confirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_mac.o(i.serial_if_g3mac_api_parser)
</UL>
<P><STRONG><a name="[ed]"></a>MacNotification_MacSnifferIndication</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, serial_if_mac.o(i.MacNotification_MacSnifferIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = MacNotification_MacSnifferIndication &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_mac.o(i.serial_if_g3mac_api_parser)
</UL>
<P><STRONG><a name="[f7]"></a>MacNotification_MacSnifferIndicationRF</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, serial_if_mac.o(i.MacNotification_MacSnifferIndicationRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = MacNotification_MacSnifferIndicationRF &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_mac.o(i.serial_if_g3mac_api_parser)
</UL>
<P><STRONG><a name="[e8]"></a>MacNotification_ResetConfirm</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, serial_if_mac.o(i.MacNotification_ResetConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = MacNotification_ResetConfirm &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_mac.o(i.serial_if_g3mac_api_parser)
</UL>
<P><STRONG><a name="[f2]"></a>MacNotification_ResetConfirmRF</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, serial_if_mac.o(i.MacNotification_ResetConfirmRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = MacNotification_ResetConfirmRF &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_mac.o(i.serial_if_g3mac_api_parser)
</UL>
<P><STRONG><a name="[ea]"></a>MacNotification_ScanConfirm</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, serial_if_mac.o(i.MacNotification_ScanConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = MacNotification_ScanConfirm &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_mac.o(i.serial_if_g3mac_api_parser)
</UL>
<P><STRONG><a name="[f4]"></a>MacNotification_ScanConfirmRF</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, serial_if_mac.o(i.MacNotification_ScanConfirmRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = MacNotification_ScanConfirmRF &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_mac.o(i.serial_if_g3mac_api_parser)
</UL>
<P><STRONG><a name="[e7]"></a>MacNotification_SetConfirm</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, serial_if_mac.o(i.MacNotification_SetConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = MacNotification_SetConfirm &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_MIB_set_confirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_mac.o(i.serial_if_g3mac_api_parser)
</UL>
<P><STRONG><a name="[f1]"></a>MacNotification_SetConfirmRF</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, serial_if_mac.o(i.MacNotification_SetConfirmRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = MacNotification_SetConfirmRF &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_MIB_set_confirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_mac.o(i.serial_if_g3mac_api_parser)
</UL>
<P><STRONG><a name="[eb]"></a>MacNotification_StartConfirm</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, serial_if_mac.o(i.MacNotification_StartConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = MacNotification_StartConfirm &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_mac.o(i.serial_if_g3mac_api_parser)
</UL>
<P><STRONG><a name="[f5]"></a>MacNotification_StartConfirmRF</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, serial_if_mac.o(i.MacNotification_StartConfirmRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = MacNotification_StartConfirmRF &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_mac.o(i.serial_if_g3mac_api_parser)
</UL>
<P><STRONG><a name="[cd]"></a>AdpNotification_AdpdDataIndication</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, serial_if_adp.o(i.AdpNotification_AdpdDataIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = AdpNotification_AdpdDataIndication &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_adp.o(i.serial_if_adp_get_notifications)
</UL>
<P><STRONG><a name="[de]"></a>AdpNotification_BufferIndication</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, serial_if_adp.o(i.AdpNotification_BufferIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = AdpNotification_BufferIndication &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_adp.o(i.serial_if_adp_get_notifications)
</UL>
<P><STRONG><a name="[cc]"></a>AdpNotification_DataConfirm</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, serial_if_adp.o(i.AdpNotification_DataConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = AdpNotification_DataConfirm &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_adp.o(i.serial_if_adp_get_notifications)
</UL>
<P><STRONG><a name="[ce]"></a>AdpNotification_DiscoveryConfirm</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, serial_if_adp.o(i.AdpNotification_DiscoveryConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = AdpNotification_DiscoveryConfirm &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_adp.o(i.serial_if_adp_get_notifications)
</UL>
<P><STRONG><a name="[cf]"></a>AdpNotification_DiscoveryIndication</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, serial_if_adp.o(i.AdpNotification_DiscoveryIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = AdpNotification_DiscoveryIndication &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_adp.o(i.serial_if_adp_get_notifications)
</UL>
<P><STRONG><a name="[d7]"></a>AdpNotification_GetConfirm</STRONG> (Thumb, 744 bytes, Stack size 24 bytes, serial_if_adp.o(i.AdpNotification_GetConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = AdpNotification_GetConfirm &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_adp.o(i.serial_if_adp_get_notifications)
</UL>
<P><STRONG><a name="[d8]"></a>AdpNotification_GetMacConfirm</STRONG> (Thumb, 80 bytes, Stack size 168 bytes, serial_if_adp.o(i.AdpNotification_GetMacConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = AdpNotification_GetMacConfirm &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_MIB_get_confirm
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_adp.o(i.serial_if_adp_get_notifications)
</UL>
<P><STRONG><a name="[d9]"></a>AdpNotification_LbpConfirm</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, serial_if_adp.o(i.AdpNotification_LbpConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = AdpNotification_LbpConfirm &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_adp.o(i.serial_if_adp_get_notifications)
</UL>
<P><STRONG><a name="[da]"></a>AdpNotification_LbpIndication</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, serial_if_adp.o(i.AdpNotification_LbpIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = AdpNotification_LbpIndication &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_adp.o(i.serial_if_adp_get_notifications)
</UL>
<P><STRONG><a name="[d1]"></a>AdpNotification_NetworkJoinConfirm</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, serial_if_adp.o(i.AdpNotification_NetworkJoinConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = AdpNotification_NetworkJoinConfirm &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_adp.o(i.serial_if_adp_get_notifications)
</UL>
<P><STRONG><a name="[d3]"></a>AdpNotification_NetworkLeaveConfirm</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, serial_if_adp.o(i.AdpNotification_NetworkLeaveConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = AdpNotification_NetworkLeaveConfirm &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_adp.o(i.serial_if_adp_get_notifications)
</UL>
<P><STRONG><a name="[d2]"></a>AdpNotification_NetworkLeaveIndication</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, serial_if_adp.o(i.AdpNotification_NetworkLeaveIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = AdpNotification_NetworkLeaveIndication &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_adp.o(i.serial_if_adp_get_notifications)
</UL>
<P><STRONG><a name="[d0]"></a>AdpNotification_NetworkStartConfirm</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, serial_if_adp.o(i.AdpNotification_NetworkStartConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = AdpNotification_NetworkStartConfirm &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_adp.o(i.serial_if_adp_get_notifications)
</UL>
<P><STRONG><a name="[dd]"></a>AdpNotification_NetworkStatusIndication</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, serial_if_adp.o(i.AdpNotification_NetworkStatusIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = AdpNotification_NetworkStatusIndication &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_adp.o(i.serial_if_adp_get_notifications)
</UL>
<P><STRONG><a name="[dc]"></a>AdpNotification_PathDiscoveryConfirm</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, serial_if_adp.o(i.AdpNotification_PathDiscoveryConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = AdpNotification_PathDiscoveryConfirm &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_adp.o(i.serial_if_adp_get_notifications)
</UL>
<P><STRONG><a name="[d4]"></a>AdpNotification_ResetConfirm</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, serial_if_adp.o(i.AdpNotification_ResetConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = AdpNotification_ResetConfirm &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_adp.o(i.serial_if_adp_get_notifications)
</UL>
<P><STRONG><a name="[db]"></a>AdpNotification_RouteDiscoveryConfirm</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, serial_if_adp.o(i.AdpNotification_RouteDiscoveryConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = AdpNotification_RouteDiscoveryConfirm &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_adp.o(i.serial_if_adp_get_notifications)
</UL>
<P><STRONG><a name="[d5]"></a>AdpNotification_SetConfirm</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, serial_if_adp.o(i.AdpNotification_SetConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = AdpNotification_SetConfirm &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_adp.o(i.serial_if_adp_get_notifications)
</UL>
<P><STRONG><a name="[d6]"></a>AdpNotification_SetMacConfirm</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, serial_if_adp.o(i.AdpNotification_SetMacConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = AdpNotification_SetMacConfirm &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_adp.o(i.serial_if_adp_get_notifications)
</UL>
<P><STRONG><a name="[df]"></a>AppAdpNotification_PREQIndication</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, serial_if_adp.o(i.AppAdpNotification_PREQIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = AppAdpNotification_PREQIndication &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_adp.o(i.serial_if_adp_get_notifications)
</UL>
<P><STRONG><a name="[e1]"></a>AppAdpNotification_RouteNotFoundIndication</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, serial_if_adp.o(i.AppAdpNotification_RouteNotFoundIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = AppAdpNotification_RouteNotFoundIndication &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_adp.o(i.serial_if_adp_get_notifications)
</UL>
<P><STRONG><a name="[e0]"></a>AppAdpNotification_UpdNonVolatileDataIndication</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, serial_if_adp.o(i.AppAdpNotification_UpdNonVolatileDataIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = AppAdpNotification_UpdNonVolatileDataIndication &rArr; store_persistent_data_GPBR &rArr; _get_persistent_data &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_persistent_data_GPBR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_adp.o(i.serial_if_adp_get_notifications)
</UL>
<P><STRONG><a name="[3a4]"></a>_triggerAdpSetRequest</STRONG> (Thumb, 778 bytes, Stack size 32 bytes, serial_if_adp.o(i._triggerAdpSetRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 2528 + Unknown Stack Size
<LI>Call Chain = _triggerAdpSetRequest &rArr; AdpSetRequest &rArr; AdpSetMib &rArr; BootstrapWrapper_InitEapPsk &rArr; LBP_InitEapPsk &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy_from_usi_endianness_uint16
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adp_mac_serial_if_get_state
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpSetRequest
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_if_g3adp_api_parser
</UL>

<P><STRONG><a name="[3a6]"></a>mem_copy_from_usi_endianness_uint16</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, serial_if_adp.o(i.mem_copy_from_usi_endianness_uint16))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mem_copy_from_usi_endianness_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_triggerAdpSetRequest
</UL>

<P><STRONG><a name="[e2]"></a>BootstrapNotification_JoinIndication</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, serial_if_coordinator.o(i.BootstrapNotification_JoinIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = BootstrapNotification_JoinIndication &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_coordinator.o(i.serial_if_coordinator_api_parser)
</UL>
<P><STRONG><a name="[e3]"></a>BootstrapNotification_LeaveIndication</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, serial_if_coordinator.o(i.BootstrapNotification_LeaveIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = BootstrapNotification_LeaveIndication &rArr; usi_send_cmd &rArr; _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_if_coordinator.o(i.serial_if_coordinator_api_parser)
</UL>
<P><STRONG><a name="[476]"></a>mem_copy_from_usi_endianness_uint16</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, serial_if_mib_common.o(i.mem_copy_from_usi_endianness_uint16))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mem_copy_from_usi_endianness_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_MIB_set_request
</UL>

<P><STRONG><a name="[477]"></a>mem_copy_from_usi_endianness_uint32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, serial_if_mib_common.o(i.mem_copy_from_usi_endianness_uint32))
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_MIB_set_request
</UL>

<P><STRONG><a name="[474]"></a>mem_copy_to_usi_endianness_uint32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, serial_if_mib_common.o(i.mem_copy_to_usi_endianness_uint32))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_MIB_get_confirm
</UL>

<P><STRONG><a name="[c7]"></a>_oss_1ms_timer_handler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, oss_if.o(i._oss_1ms_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _oss_1ms_timer_handler &rArr; _oss_execute_tasks
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_oss_execute_tasks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oss_if.o(i.oss_start)
</UL>
<P><STRONG><a name="[389]"></a>_oss_execute_tasks</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, oss_if.o(i._oss_execute_tasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _oss_execute_tasks
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_start
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_oss_1ms_timer_handler
</UL>

<P><STRONG><a name="[452]"></a>sysclk_get_peripheral_hz</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal.o(i.sysclk_get_peripheral_hz))
<BR><BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_hw
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_1ms_timer
</UL>

<P><STRONG><a name="[c9]"></a>usart_serial_getchar</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, hal.o(i.usart_serial_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_serial_getchar
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(i.platform_init_hw)
</UL>
<P><STRONG><a name="[c8]"></a>usart_serial_putchar</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, hal.o(i.usart_serial_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_serial_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(i.platform_init_hw)
</UL>
<P><STRONG><a name="[8d]"></a>_exception_event_cb</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, pal.o(i._exception_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _exception_event_cb &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pal.o(i.MacRtInitialize)
<LI> pal.o(i.MacRtResetRequest)
</UL>
<P><STRONG><a name="[8c]"></a>_plme_get_confirm_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pal.o(i._plme_get_confirm_cb))
<BR>[Address Reference Count : 2]<UL><LI> pal.o(i.MacRtInitialize)
<LI> pal.o(i.MacRtResetRequest)
</UL>
<P><STRONG><a name="[8b]"></a>_process_frame_cb</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pal.o(i._process_frame_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _process_frame_cb &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_led_int_on
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pal.o(i.MacRtInitialize)
<LI> pal.o(i.MacRtResetRequest)
</UL>
<P><STRONG><a name="[33b]"></a>_read_mib_backup_info</STRONG> (Thumb, 70 bytes, Stack size 160 bytes, pal.o(i._read_mib_backup_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _read_mib_backup_info
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtResetRequest
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtInitialize
</UL>

<P><STRONG><a name="[8e]"></a>_restore_configuration</STRONG> (Thumb, 112 bytes, Stack size 176 bytes, pal.o(i._restore_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _restore_configuration &rArr; pl360_g3_coup_tx_config
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pl360_g3_coup_tx_config
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtEventHandler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pal.o(i.MacRtInitialize)
<LI> pal.o(i.MacRtResetRequest)
</UL>
<P><STRONG><a name="[8a]"></a>_tx_confirm_cb</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pal.o(i._tx_confirm_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _tx_confirm_cb &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pal.o(i.MacRtInitialize)
<LI> pal.o(i.MacRtResetRequest)
</UL>
<P><STRONG><a name="[384]"></a>_get_persistent_data</STRONG> (Thumb, 116 bytes, Stack size 248 bytes, storage.o(i._get_persistent_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = _get_persistent_data &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetRequestSync
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMacGetRequestSync
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_persistent_data_GPBR
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_persistent_info
</UL>

<P><STRONG><a name="[6f]"></a>_Callback_HyALMacWrpBeaconNotify</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, hyal.o(i._Callback_HyALMacWrpBeaconNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = _Callback_HyALMacWrpBeaconNotify &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyal.o(i.HyALInitialize)
</UL>
<P><STRONG><a name="[79]"></a>_Callback_HyALMacWrpBeaconNotifyRF</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, hyal.o(i._Callback_HyALMacWrpBeaconNotifyRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = _Callback_HyALMacWrpBeaconNotifyRF &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyal.o(i.HyALInitialize)
</UL>
<P><STRONG><a name="[72]"></a>_Callback_HyALMacWrpCommStatusIndication</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, hyal.o(i._Callback_HyALMacWrpCommStatusIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _Callback_HyALMacWrpCommStatusIndication
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyal.o(i.HyALInitialize)
</UL>
<P><STRONG><a name="[7c]"></a>_Callback_HyALMacWrpCommStatusIndicationRF</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, hyal.o(i._Callback_HyALMacWrpCommStatusIndicationRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _Callback_HyALMacWrpCommStatusIndicationRF
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyal.o(i.HyALInitialize)
</UL>
<P><STRONG><a name="[6a]"></a>_Callback_HyALMacWrpDataConfirm</STRONG> (Thumb, 462 bytes, Stack size 184 bytes, hyal.o(i._Callback_HyALMacWrpDataConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _Callback_HyALMacWrpDataConfirm &rArr; MacWrapperMcpsDataRequestRF &rArr; LogBuffer &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMcpsDataRequestRF
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeGetRequestSyncRF
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getDataReqEntryByHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyal.o(i.HyALInitialize)
</UL>
<P><STRONG><a name="[74]"></a>_Callback_HyALMacWrpDataConfirmRF</STRONG> (Thumb, 502 bytes, Stack size 184 bytes, hyal.o(i._Callback_HyALMacWrpDataConfirmRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = _Callback_HyALMacWrpDataConfirmRF &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMcpsDataRequest
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacWrapperMlmeGetRequestSync
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getDataReqEntryByHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyal.o(i.HyALInitialize)
</UL>
<P><STRONG><a name="[6b]"></a>_Callback_HyALMacWrpDataIndication</STRONG> (Thumb, 286 bytes, Stack size 72 bytes, hyal.o(i._Callback_HyALMacWrpDataIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = _Callback_HyALMacWrpDataIndication &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_checkDuplicates
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyal.o(i.HyALInitialize)
</UL>
<P><STRONG><a name="[75]"></a>_Callback_HyALMacWrpDataIndicationRF</STRONG> (Thumb, 156 bytes, Stack size 72 bytes, hyal.o(i._Callback_HyALMacWrpDataIndicationRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = _Callback_HyALMacWrpDataIndicationRF &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_checkDuplicates
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyal.o(i.HyALInitialize)
</UL>
<P><STRONG><a name="[6c]"></a>_Callback_HyALMacWrpGetConfirm</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hyal.o(i._Callback_HyALMacWrpGetConfirm))
<BR>[Address Reference Count : 1]<UL><LI> hyal.o(i.HyALInitialize)
</UL>
<P><STRONG><a name="[76]"></a>_Callback_HyALMacWrpGetConfirmRF</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hyal.o(i._Callback_HyALMacWrpGetConfirmRF))
<BR>[Address Reference Count : 1]<UL><LI> hyal.o(i.HyALInitialize)
</UL>
<P><STRONG><a name="[6e]"></a>_Callback_HyALMacWrpResetConfirm</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, hyal.o(i._Callback_HyALMacWrpResetConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Callback_HyALMacWrpResetConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyal.o(i.HyALInitialize)
</UL>
<P><STRONG><a name="[78]"></a>_Callback_HyALMacWrpResetConfirmRF</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, hyal.o(i._Callback_HyALMacWrpResetConfirmRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Callback_HyALMacWrpResetConfirmRF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyal.o(i.HyALInitialize)
</UL>
<P><STRONG><a name="[70]"></a>_Callback_HyALMacWrpScanConfirm</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, hyal.o(i._Callback_HyALMacWrpScanConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _Callback_HyALMacWrpScanConfirm &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyal.o(i.HyALInitialize)
</UL>
<P><STRONG><a name="[7a]"></a>_Callback_HyALMacWrpScanConfirmRF</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, hyal.o(i._Callback_HyALMacWrpScanConfirmRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _Callback_HyALMacWrpScanConfirmRF &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyal.o(i.HyALInitialize)
</UL>
<P><STRONG><a name="[6d]"></a>_Callback_HyALMacWrpSetConfirm</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hyal.o(i._Callback_HyALMacWrpSetConfirm))
<BR>[Address Reference Count : 1]<UL><LI> hyal.o(i.HyALInitialize)
</UL>
<P><STRONG><a name="[77]"></a>_Callback_HyALMacWrpSetConfirmRF</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hyal.o(i._Callback_HyALMacWrpSetConfirmRF))
<BR>[Address Reference Count : 1]<UL><LI> hyal.o(i.HyALInitialize)
</UL>
<P><STRONG><a name="[73]"></a>_Callback_HyALMacWrpSnifferIndication</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hyal.o(i._Callback_HyALMacWrpSnifferIndication))
<BR>[Address Reference Count : 1]<UL><LI> hyal.o(i.HyALInitialize)
</UL>
<P><STRONG><a name="[7d]"></a>_Callback_HyALMacWrpSnifferIndicationRF</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hyal.o(i._Callback_HyALMacWrpSnifferIndicationRF))
<BR>[Address Reference Count : 1]<UL><LI> hyal.o(i.HyALInitialize)
</UL>
<P><STRONG><a name="[71]"></a>_Callback_HyALMacWrpStartConfirm</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, hyal.o(i._Callback_HyALMacWrpStartConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Callback_HyALMacWrpStartConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyal.o(i.HyALInitialize)
</UL>
<P><STRONG><a name="[7b]"></a>_Callback_HyALMacWrpStartConfirmRF</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, hyal.o(i._Callback_HyALMacWrpStartConfirmRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Callback_HyALMacWrpStartConfirmRF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyal.o(i.HyALInitialize)
</UL>
<P><STRONG><a name="[376]"></a>_checkDuplicates</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, hyal.o(i._checkDuplicates))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _checkDuplicates
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpDataIndicationRF
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpDataIndication
</UL>

<P><STRONG><a name="[375]"></a>_getDataReqEntryByHandler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, hyal.o(i._getDataReqEntryByHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = _getDataReqEntryByHandler &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpDataConfirmRF
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALMacWrpDataConfirm
</UL>

<P><STRONG><a name="[8f]"></a>_Callback_MacWrapperMcpsDataConfirm</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mac_wrapper.o(i._Callback_MacWrapperMcpsDataConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _Callback_MacWrapperMcpsDataConfirm &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mac_wrapper.o(i.MacWrapperInitialize)
</UL>
<P><STRONG><a name="[99]"></a>_Callback_MacWrapperMcpsDataConfirmRF</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mac_wrapper.o(i._Callback_MacWrapperMcpsDataConfirmRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _Callback_MacWrapperMcpsDataConfirmRF &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mac_wrapper.o(i.MacWrapperInitializeRF)
</UL>
<P><STRONG><a name="[90]"></a>_Callback_MacWrapperMcpsDataIndication</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mac_wrapper.o(i._Callback_MacWrapperMcpsDataIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _Callback_MacWrapperMcpsDataIndication &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mac_wrapper.o(i.MacWrapperInitialize)
</UL>
<P><STRONG><a name="[9a]"></a>_Callback_MacWrapperMcpsDataIndicationRF</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mac_wrapper.o(i._Callback_MacWrapperMcpsDataIndicationRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _Callback_MacWrapperMcpsDataIndicationRF &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mac_wrapper.o(i.MacWrapperInitializeRF)
</UL>
<P><STRONG><a name="[98]"></a>_Callback_MacWrapperMcpsMacSnifferIndication</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mac_wrapper.o(i._Callback_MacWrapperMcpsMacSnifferIndication))
<BR>[Address Reference Count : 1]<UL><LI> mac_wrapper.o(i.MacWrapperInitialize)
</UL>
<P><STRONG><a name="[a2]"></a>_Callback_MacWrapperMcpsMacSnifferIndicationRF</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mac_wrapper.o(i._Callback_MacWrapperMcpsMacSnifferIndicationRF))
<BR>[Address Reference Count : 1]<UL><LI> mac_wrapper.o(i.MacWrapperInitializeRF)
</UL>
<P><STRONG><a name="[94]"></a>_Callback_MacWrapperMlmeBeaconNotify</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mac_wrapper.o(i._Callback_MacWrapperMlmeBeaconNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _Callback_MacWrapperMlmeBeaconNotify &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mac_wrapper.o(i.MacWrapperInitialize)
</UL>
<P><STRONG><a name="[9e]"></a>_Callback_MacWrapperMlmeBeaconNotifyRF</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mac_wrapper.o(i._Callback_MacWrapperMlmeBeaconNotifyRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _Callback_MacWrapperMlmeBeaconNotifyRF &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mac_wrapper.o(i.MacWrapperInitializeRF)
</UL>
<P><STRONG><a name="[97]"></a>_Callback_MacWrapperMlmeCommStatusIndication</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mac_wrapper.o(i._Callback_MacWrapperMlmeCommStatusIndication))
<BR>[Address Reference Count : 1]<UL><LI> mac_wrapper.o(i.MacWrapperInitialize)
</UL>
<P><STRONG><a name="[a1]"></a>_Callback_MacWrapperMlmeCommStatusIndicationRF</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mac_wrapper.o(i._Callback_MacWrapperMlmeCommStatusIndicationRF))
<BR>[Address Reference Count : 1]<UL><LI> mac_wrapper.o(i.MacWrapperInitializeRF)
</UL>
<P><STRONG><a name="[91]"></a>_Callback_MacWrapperMlmeGetConfirm</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mac_wrapper.o(i._Callback_MacWrapperMlmeGetConfirm))
<BR>[Address Reference Count : 1]<UL><LI> mac_wrapper.o(i.MacWrapperInitialize)
</UL>
<P><STRONG><a name="[9b]"></a>_Callback_MacWrapperMlmeGetConfirmRF</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mac_wrapper.o(i._Callback_MacWrapperMlmeGetConfirmRF))
<BR>[Address Reference Count : 1]<UL><LI> mac_wrapper.o(i.MacWrapperInitializeRF)
</UL>
<P><STRONG><a name="[93]"></a>_Callback_MacWrapperMlmeResetConfirm</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mac_wrapper.o(i._Callback_MacWrapperMlmeResetConfirm))
<BR>[Address Reference Count : 1]<UL><LI> mac_wrapper.o(i.MacWrapperInitialize)
</UL>
<P><STRONG><a name="[9d]"></a>_Callback_MacWrapperMlmeResetConfirmRF</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mac_wrapper.o(i._Callback_MacWrapperMlmeResetConfirmRF))
<BR>[Address Reference Count : 1]<UL><LI> mac_wrapper.o(i.MacWrapperInitializeRF)
</UL>
<P><STRONG><a name="[95]"></a>_Callback_MacWrapperMlmeScanConfirm</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mac_wrapper.o(i._Callback_MacWrapperMlmeScanConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _Callback_MacWrapperMlmeScanConfirm &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mac_wrapper.o(i.MacWrapperInitialize)
</UL>
<P><STRONG><a name="[9f]"></a>_Callback_MacWrapperMlmeScanConfirmRF</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mac_wrapper.o(i._Callback_MacWrapperMlmeScanConfirmRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _Callback_MacWrapperMlmeScanConfirmRF &rArr; Log &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetFileName
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mac_wrapper.o(i.MacWrapperInitializeRF)
</UL>
<P><STRONG><a name="[92]"></a>_Callback_MacWrapperMlmeSetConfirm</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mac_wrapper.o(i._Callback_MacWrapperMlmeSetConfirm))
<BR>[Address Reference Count : 1]<UL><LI> mac_wrapper.o(i.MacWrapperInitialize)
</UL>
<P><STRONG><a name="[9c]"></a>_Callback_MacWrapperMlmeSetConfirmRF</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mac_wrapper.o(i._Callback_MacWrapperMlmeSetConfirmRF))
<BR>[Address Reference Count : 1]<UL><LI> mac_wrapper.o(i.MacWrapperInitializeRF)
</UL>
<P><STRONG><a name="[96]"></a>_Callback_MacWrapperMlmeStartConfirm</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mac_wrapper.o(i._Callback_MacWrapperMlmeStartConfirm))
<BR>[Address Reference Count : 1]<UL><LI> mac_wrapper.o(i.MacWrapperInitialize)
</UL>
<P><STRONG><a name="[a0]"></a>_Callback_MacWrapperMlmeStartConfirmRF</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mac_wrapper.o(i._Callback_MacWrapperMlmeStartConfirmRF))
<BR>[Address Reference Count : 1]<UL><LI> mac_wrapper.o(i.MacWrapperInitializeRF)
</UL>
<P><STRONG><a name="[409]"></a>ccm_auth_crypt</STRONG> (Thumb, 794 bytes, Stack size 112 bytes, ccm.o(i.ccm_auth_crypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_encrypt_and_tag
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_star_auth_decrypt
</UL>

<P><STRONG><a name="[c6]"></a>buffer_alloc_calloc</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, memory_buffer_alloc.o(i.buffer_alloc_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = buffer_alloc_calloc &rArr; verify_chain
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_chain
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memory_buffer_alloc.o(i.mbedtls_memory_buffer_alloc_init)
</UL>
<P><STRONG><a name="[c5]"></a>buffer_alloc_free</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, memory_buffer_alloc.o(i.buffer_alloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = buffer_alloc_free &rArr; verify_chain
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_header
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_chain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memory_buffer_alloc.o(i.mbedtls_memory_buffer_alloc_init)
</UL>
<P><STRONG><a name="[3f8]"></a>verify_chain</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, memory_buffer_alloc.o(i.verify_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = verify_chain
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_header
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_free
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_calloc
</UL>

<P><STRONG><a name="[3f9]"></a>verify_header</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, memory_buffer_alloc.o(i.verify_header))
<BR><BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_chain
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_free
</UL>

<P><STRONG><a name="[fd]"></a>aes_crypt_ecb_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(i.aes_crypt_ecb_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aes_crypt_ecb_wrap &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>aes_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cipher_wrap.o(i.aes_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aes_ctx_alloc &rArr; mbedtls_aes_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>aes_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cipher_wrap.o(i.aes_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aes_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>aes_setkey_dec_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(i.aes_setkey_dec_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2408<LI>Call Chain = aes_setkey_dec_wrap &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>aes_setkey_enc_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(i.aes_setkey_enc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088<LI>Call Chain = aes_setkey_enc_wrap &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>ccm_aes_setkey_wrap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cipher_wrap.o(i.ccm_aes_setkey_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ccm_aes_setkey_wrap &rArr; mbedtls_ccm_setkey &rArr; mbedtls_cipher_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>ccm_ctx_alloc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cipher_wrap.o(i.ccm_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ccm_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_init
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>ccm_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cipher_wrap.o(i.ccm_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ccm_ctx_free &rArr; mbedtls_ccm_free &rArr; mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>gcm_aes_setkey_wrap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cipher_wrap.o(i.gcm_aes_setkey_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = gcm_aes_setkey_wrap &rArr; mbedtls_gcm_setkey &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>gcm_ctx_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cipher_wrap.o(i.gcm_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gcm_ctx_alloc &rArr; mbedtls_gcm_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>gcm_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cipher_wrap.o(i.gcm_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gcm_ctx_free &rArr; mbedtls_gcm_free &rArr; mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[5]"></a>platform_calloc_uninit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, platform.o(i.platform_calloc_uninit))
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>platform_exit_uninit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, platform.o(i.platform_exit_uninit))
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>platform_free_uninit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, platform.o(i.platform_free_uninit))
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>platform_printf_uninit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, platform.o(i.platform_printf_uninit))
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[416]"></a>cmac_generate_subkeys</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, cmac.o(i.cmac_generate_subkeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = cmac_generate_subkeys &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_finish
</UL>

<P><STRONG><a name="[42c]"></a>gcm_mask</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, gcm.o(i.gcm_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
</UL>

<P><STRONG><a name="[440]"></a>gcm_mult</STRONG> (Thumb, 266 bytes, Stack size 36 bytes, gcm.o(i.gcm_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gcm_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
</UL>

<P><STRONG><a name="[46f]"></a>ioport_set_pin_dir</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pplc_if.o(i.ioport_set_pin_dir))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_set_handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_reset
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_init
</UL>

<P><STRONG><a name="[46e]"></a>ioport_set_pin_level</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pplc_if.o(i.ioport_set_pin_level))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_reset
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_init
</UL>

<P><STRONG><a name="[ca]"></a>pplc_if_int_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pplc_if.o(i.pplc_if_int_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pplc_if_int_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_get_interrupt_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pplc_if.o(i.pplc_if_set_handler)
</UL>
<P><STRONG><a name="[46b]"></a>sysclk_get_cpu_hz</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pplc_if.o(i.sysclk_get_cpu_hz))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_reset
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pplc_if_delay
</UL>

<P><STRONG><a name="[3b8]"></a>_usi_encode_and_send</STRONG> (Thumb, 904 bytes, Stack size 56 bytes, usi.o(i._usi_encode_and_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = _usi_encode_and_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcrc_calculate_crc
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_udc_write_buf
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_udc_is_tx_ready
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buart_if_write
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buart_if_is_free
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_write
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busart_if_is_free
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
</UL>

<P><STRONG><a name="[4d9]"></a>_usi_prot_id2idx</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, usi.o(i._usi_prot_id2idx))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_process
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_send_cmd
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usi_set_callback
</UL>

<P><STRONG><a name="[3a3]"></a>_tc_assign_int</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, timer_1us.o(i._tc_assign_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _tc_assign_int
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_enable_interrupt
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rb
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_ra
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_read_rb
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_read_ra
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_get_interrupt_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1us_set_int
</UL>

<P><STRONG><a name="[cb]"></a>_prf_if_int_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, prf_if.o(i._prf_if_int_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _prf_if_int_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_get_interrupt_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prf_if.o(i.prf_if_set_handler)
</UL>
<P><STRONG><a name="[472]"></a>ioport_set_pin_level</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, prf_if.o(i.ioport_set_pin_level))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_reset
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_if_led
</UL>

<P><STRONG><a name="[374]"></a>cpu_irq_restore</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, udp_device.o(i.cpu_irq_restore))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_set_halt
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_run
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_abort
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_enable
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_disable
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Handler
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_sleep_mode
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ctrl_in_sent
</UL>

<P><STRONG><a name="[373]"></a>cpu_irq_save</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, udp_device.o(i.cpu_irq_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cpu_irq_save
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_set_halt
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_run
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_abort
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_enable
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_disable
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Handler
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_sleep_mode
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ctrl_in_sent
</UL>

<P><STRONG><a name="[4b3]"></a>udd_ctrl_in_sent</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, udp_device.o(i.udd_ctrl_in_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = udd_ctrl_in_sent &rArr; cpu_irq_save
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ctrl_interrupt
</UL>

<P><STRONG><a name="[36c]"></a>udd_ctrl_interrupt</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, udp_device.o(i.udd_ctrl_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = udd_ctrl_interrupt &rArr; udc_process_setup &rArr; udc_reqstd &rArr; udc_iface_enable &rArr; udd_ep_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_process_setup
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ctrl_stall_data
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ctrl_out_received
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ctrl_in_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Handler
</UL>

<P><STRONG><a name="[4b5]"></a>udd_ctrl_out_received</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, udp_device.o(i.udd_ctrl_out_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = udd_ctrl_out_received &rArr; udd_ctrl_stall_data
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ctrl_stall_data
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ctrl_interrupt
</UL>

<P><STRONG><a name="[4b4]"></a>udd_ctrl_stall_data</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, udp_device.o(i.udd_ctrl_stall_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = udd_ctrl_stall_data
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ctrl_out_received
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ctrl_interrupt
</UL>

<P><STRONG><a name="[4b9]"></a>udd_ep_ack_out_received</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, udp_device.o(i.udd_ep_ack_out_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udd_ep_ack_out_received
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_interrupt
</UL>

<P><STRONG><a name="[4b8]"></a>udd_ep_finish_job</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, udp_device.o(i.udd_ep_finish_job))
<BR><BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_free
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_abort
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_interrupt
</UL>

<P><STRONG><a name="[4ba]"></a>udd_ep_in_sent</STRONG> (Thumb, 270 bytes, Stack size 20 bytes, udp_device.o(i.udd_ep_in_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = udd_ep_in_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_run
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_interrupt
</UL>

<P><STRONG><a name="[36d]"></a>udd_ep_interrupt</STRONG> (Thumb, 840 bytes, Stack size 40 bytes, udp_device.o(i.udd_ep_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = udd_ep_interrupt &rArr; udd_ep_in_sent
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_in_sent
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_finish_job
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_ack_out_received
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Handler
</UL>

<P><STRONG><a name="[36e]"></a>udd_sleep_mode</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, udp_device.o(i.udd_sleep_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = udd_sleep_mode &rArr; cpu_irq_save
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_enable
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_disable
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Handler
</UL>

<P><STRONG><a name="[3e2]"></a>ioport_set_pin_mode</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, init.o(i.ioport_set_pin_mode))
<BR><BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[392]"></a>_rf215_rx_agcr</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, rf215_rx.o(i._rf215_rx_agcr))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _rf215_rx_agcr &rArr; _rf215_rx_psdu_end &rArr; rf215_tx_abort_by_rx &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rf215_rx_psdu_end
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_rx_event
</UL>

<P><STRONG><a name="[395]"></a>_rf215_rx_frame_end</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rf215_rx.o(i._rf215_rx_frame_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _rf215_rx_frame_end &rArr; _rf215_rx_psdu_end &rArr; rf215_tx_abort_by_rx &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_rx_listen
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rf215_rx_psdu_end
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_rx_event
</UL>

<P><STRONG><a name="[394]"></a>_rf215_rx_psdu_end</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, rf215_rx.o(i._rf215_rx_psdu_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _rf215_rx_psdu_end &rArr; rf215_tx_abort_by_rx &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_abort_by_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rf215_rx_frame_end
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rf215_rx_agcr
</UL>

<P><STRONG><a name="[398]"></a>_rf215_rx_start</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, rf215_rx.o(i._rf215_rx_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _rf215_rx_start &rArr; rf215_bbc_check_rx_params &rArr; rf215_trx_upd_sync &rArr; rf215_spi_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_rx_listen
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_check_rx_params
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_rx_event
</UL>

<P><STRONG><a name="[3a7]"></a>_tx_abort</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, rf215_tx.o(i._tx_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_get_cnt
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_confirm
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_tx_req
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_rx_check_aborts
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_frame_end_event
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_edc_event
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_auto_stop
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_prog_start
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_prog_handler
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_abort_by_rx
</UL>

<P><STRONG><a name="[3ae]"></a>_tx_cmd_delay</STRONG> (Thumb, 100 bytes, Stack size 4 bytes, rf215_tx.o(i._tx_cmd_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _tx_cmd_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_tx_req
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_total_delay
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_prog_handler
</UL>

<P><STRONG><a name="[3a8]"></a>_tx_confirm</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, rf215_tx.o(i._tx_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_upd_phy_stats
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_frame_end_event
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_abort
</UL>

<P><STRONG><a name="[3ab]"></a>_tx_param_cfg</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, rf215_tx.o(i._tx_param_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _tx_param_cfg &rArr; rf215_bbc_upd_tx_params &rArr; rf215_fe_set_txpwr &rArr; rf215_trx_switch_trxoff &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_upd_tx_params
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_tx_req
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_prog_handler
</UL>

<P><STRONG><a name="[b2]"></a>_tx_prog_handler</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, rf215_tx.o(i._tx_prog_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _tx_prog_handler &rArr; _tx_param_cfg &rArr; rf215_bbc_upd_tx_params &rArr; rf215_fe_set_txpwr &rArr; rf215_trx_switch_trxoff &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_rx_listen
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_txprep
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_total_delay
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_prog_start
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_param_cfg
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_cmd_delay
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_abort
</UL>
<BR>[Address Reference Count : 4]<UL><LI> rf215_tx.o(i._tx_prog_handler)
<LI> rf215_tx.o(i.at86rf_tx_req)
<LI> rf215_tx.o(i.rf215_tx_edc_event)
<LI> rf215_tx.o(i.rf215_tx_trxrdy_event)
</UL>
<P><STRONG><a name="[3b0]"></a>_tx_prog_start</STRONG> (Thumb, 354 bytes, Stack size 64 bytes, rf215_tx.o(i._tx_prog_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _tx_prog_start &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_rx_listen
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_ccatx_abort
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_trxrdy_event
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_edc_event
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_prog_handler
</UL>

<P><STRONG><a name="[3ad]"></a>_tx_total_delay</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, rf215_tx.o(i._tx_total_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _tx_total_delay &rArr; _tx_cmd_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_cmd_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_tx_req
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_edc_event
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_prog_handler
</UL>

<P><STRONG><a name="[3af]"></a>_tx_txprep</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, rf215_tx.o(i._tx_txprep))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _tx_txprep &rArr; rf215_trx_switch_txprep &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_send_cmd
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_tx_auto_cfg
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_upd_sync
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_trx_switch_txprep
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_tx_req
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_edc_event
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_prog_handler
</UL>

<P><STRONG><a name="[3aa]"></a>_tx_upd_phy_stats</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rf215_tx.o(i._tx_upd_phy_stats))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_tx_req
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_confirm
</UL>

<P><STRONG><a name="[47f]"></a>_bbc_frame_duration</STRONG> (Thumb, 210 bytes, Stack size 12 bytes, rf215_bbc.o(i._bbc_frame_duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _bbc_frame_duration
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_upd_tx_params
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_check_rx_params
</UL>

<P><STRONG><a name="[483]"></a>_bbc_fsk_cfg_regs</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, rf215_bbc.o(i._bbc_fsk_cfg_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _bbc_fsk_cfg_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_trx_reset_event
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_set_phy_cfg
</UL>

<P><STRONG><a name="[37a]"></a>_bbc_ofdm_cfg_regs</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, rf215_bbc.o(i._bbc_ofdm_cfg_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _bbc_ofdm_cfg_regs &rArr; rf215_pll_get_fdelta &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_pll_get_fdelta
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_pll_get_chn_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_trx_reset_event
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_set_phy_cfg
</UL>

<P><STRONG><a name="[37d]"></a>_bbc_set_fsk_cfg</STRONG> (Thumb, 192 bytes, Stack size 72 bytes, rf215_bbc.o(i._bbc_set_fsk_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _bbc_set_fsk_cfg &rArr; rf215_spi_write_upd
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_write_upd
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_set_bb_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_trx_reset_event
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_set_phy_cfg
</UL>

<P><STRONG><a name="[380]"></a>_bbc_set_ofdm_cfg</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, rf215_bbc.o(i._bbc_set_ofdm_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _bbc_set_ofdm_cfg &rArr; rf215_spi_write_upd
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_write_upd
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_set_bb_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_trx_reset_event
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_set_phy_cfg
</UL>

<P><STRONG><a name="[39a]"></a>_rxfe_regs</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, rf215_fe.o(i._rxfe_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _rxfe_regs &rArr; rf215_pll_get_fdelta &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_pll_get_fdelta
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_get_ofdm_scp
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_fe_trx_reset_event
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_fe_upd_phy_cfg
</UL>

<P><STRONG><a name="[39c]"></a>_rxfe_set_cfg</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, rf215_fe.o(i._rxfe_set_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _rxfe_set_cfg &rArr; rf215_spi_write_upd
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_write_upd
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_bbc_set_rx_proc_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_fe_trx_reset_event
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_fe_upd_phy_cfg
</UL>

<P><STRONG><a name="[489]"></a>_txfe_regs</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, rf215_fe.o(i._txfe_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _txfe_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_fe_trx_reset_event
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_fe_upd_phy_cfg
</UL>

<P><STRONG><a name="[3b6]"></a>_txfe_set_cfg</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, rf215_fe.o(i._txfe_set_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _txfe_set_cfg &rArr; rf215_spi_write_upd
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_write_upd
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_tx_set_proc_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_fe_trx_reset_event
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_fe_upd_phy_cfg
</UL>

<P><STRONG><a name="[3cd]"></a>_rf215_band_opm_to_phy_config</STRONG> (Thumb, 2986 bytes, Stack size 28 bytes, at86rf215.o(i._rf215_band_opm_to_phy_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _rf215_band_opm_to_phy_config
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_pib_set
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at86rf_enable
</UL>

<P><STRONG><a name="[48f]"></a>_pll_get_params</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, rf215_pll.o(i._pll_get_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _pll_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_pll_set_chn_cfg
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_pll_init
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_pll_check_chn_cfg
</UL>

<P><STRONG><a name="[38a]"></a>_pll_set_chn_cfg</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, rf215_pll.o(i._pll_set_chn_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _pll_set_chn_cfg &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_spi_write_upd
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_pll_trx_reset_event
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf215_pll_set_chn_cfg
</UL>

<P><STRONG><a name="[381]"></a>_check_spi_status</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, atpl360_hal_spi.o(i._check_spi_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _check_spi_status &rArr; atpl360_boot_download_firmware &rArr; atpl360_spi_update_fw
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_boot_without_load
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_boot_download_firmware
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_spi_write_buf
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_spi_read_buf
</UL>

<P><STRONG><a name="[b7]"></a>_get_req</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, atpl360.o(i._get_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _get_req &rArr; _spi_send_cmd &rArr; atpl360_spi_write_buf &rArr; _check_spi_status &rArr; atpl360_boot_download_firmware &rArr; atpl360_spi_update_fw
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_send_cmd
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_spi_boot_read_mem
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atpl360.o(i.atpl360_init)
</UL>
<P><STRONG><a name="[b8]"></a>_get_timer_ref</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, atpl360.o(i._get_timer_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _get_timer_ref &rArr; _spi_send_cmd &rArr; atpl360_spi_write_buf &rArr; _check_spi_status &rArr; atpl360_boot_download_firmware &rArr; atpl360_spi_update_fw
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atpl360.o(i.atpl360_init)
</UL>
<P><STRONG><a name="[b9]"></a>_get_tone_map_rsp</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, atpl360.o(i._get_tone_map_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _get_tone_map_rsp &rArr; _spi_send_cmd &rArr; atpl360_spi_write_buf &rArr; _check_spi_status &rArr; atpl360_boot_download_firmware &rArr; atpl360_spi_update_fw
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atpl360.o(i.atpl360_init)
</UL>
<P><STRONG><a name="[bf]"></a>_handler_atpl360_ext_int</STRONG> (Thumb, 444 bytes, Stack size 80 bytes, atpl360.o(i._handler_atpl360_ext_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _handler_atpl360_ext_int &rArr; _spi_send_cmd &rArr; atpl360_spi_write_buf &rArr; _check_spi_status &rArr; atpl360_boot_download_firmware &rArr; atpl360_spi_update_fw
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_send_cmd
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_spi_get_status_info
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_comm_set_event_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atpl360.o(i.atpl360_init)
</UL>
<P><STRONG><a name="[ba]"></a>_set_callbacks</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, atpl360.o(i._set_callbacks))
<BR>[Address Reference Count : 1]<UL><LI> atpl360.o(i.atpl360_init)
</UL>
<P><STRONG><a name="[bb]"></a>_set_coordinator</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, atpl360.o(i._set_coordinator))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _set_coordinator &rArr; _spi_send_cmd &rArr; atpl360_spi_write_buf &rArr; _check_spi_status &rArr; atpl360_boot_download_firmware &rArr; atpl360_spi_update_fw
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atpl360.o(i.atpl360_init)
</UL>
<P><STRONG><a name="[bd]"></a>_set_req</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, atpl360.o(i._set_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _set_req &rArr; _spi_send_cmd &rArr; atpl360_spi_write_buf &rArr; _check_spi_status &rArr; atpl360_boot_download_firmware &rArr; atpl360_spi_update_fw
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_set_sleep
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_set_debug
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_send_cmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atpl360.o(i.atpl360_init)
</UL>
<P><STRONG><a name="[bc]"></a>_set_spec15_compliance</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, atpl360.o(i._set_spec15_compliance))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _set_spec15_compliance &rArr; _spi_send_cmd &rArr; atpl360_spi_write_buf &rArr; _check_spi_status &rArr; atpl360_boot_download_firmware &rArr; atpl360_spi_update_fw
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atpl360.o(i.atpl360_init)
</UL>
<P><STRONG><a name="[386]"></a>_spi_send_cmd</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, atpl360.o(i._spi_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _spi_send_cmd &rArr; atpl360_spi_write_buf &rArr; _check_spi_status &rArr; atpl360_boot_download_firmware &rArr; atpl360_spi_update_fw
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_spi_write_buf
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_spi_read_buf
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_spi_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_enable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_request
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_spec15_compliance
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_req
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_coordinator
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handler_atpl360_ext_int
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_tone_map_rsp
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_timer_ref
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_req
</UL>

<P><STRONG><a name="[be]"></a>_tx_request</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, atpl360.o(i._tx_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _tx_request &rArr; _spi_send_cmd &rArr; atpl360_spi_write_buf &rArr; _check_spi_status &rArr; atpl360_boot_download_firmware &rArr; atpl360_spi_update_fw
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_send_cmd
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpl360_comm_tx_stringify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atpl360.o(i.atpl360_init)
</UL>
<P><STRONG><a name="[45c]"></a>pll_enable_source</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, sysclk.o(i.pll_enable_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pll_enable_source
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_switch_sclk_to_32kxtal
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_switch_mainck_to_xtal
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_switch_mainck_to_fastrc
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_osc_is_ready_mainck
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmc_osc_is_ready_32kxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_init
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_enable_usb
</UL>

<P><STRONG><a name="[4a2]"></a>udc_iface_disable</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, udc.o(i.udc_iface_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udc_iface_disable &rArr; udd_ep_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_free
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_update_iface_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_reqstd
</UL>

<P><STRONG><a name="[4a5]"></a>udc_iface_enable</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, udc.o(i.udc_iface_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = udc_iface_enable &rArr; udd_ep_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_alloc
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_update_iface_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_reqstd
</UL>

<P><STRONG><a name="[4a8]"></a>udc_reqstd</STRONG> (Thumb, 742 bytes, Stack size 40 bytes, udc.o(i.udc_reqstd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = udc_reqstd &rArr; udc_iface_enable &rArr; udd_ep_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_reset
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_set_setup_payload
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_getaddress
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_set_halt
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_is_halted
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_clear_halt
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_alloc
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_abort
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_update_iface_desc
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_iface_enable
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_iface_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_process_setup
</UL>

<P><STRONG><a name="[4a3]"></a>udc_update_iface_desc</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, udc.o(i.udc_update_iface_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = udc_update_iface_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_reset
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_process_setup
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_reqstd
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_iface_enable
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udc_iface_disable
</UL>

<P><STRONG><a name="[f8]"></a>udc_valid_address</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, udc.o(i.udc_valid_address))
<BR><BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_set_address
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udc.o(i.udc_reqstd)
</UL>
<P><STRONG><a name="[4c1]"></a>cpu_irq_restore</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, udi_cdc.o(i.cpu_irq_restore))
<BR><BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_get_nb_received_data
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_multi_write_buf
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_multi_read_buf
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_multi_get_free_tx_buffer
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_tx_send
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_rx_start
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_ctrl_state_change
</UL>

<P><STRONG><a name="[4c0]"></a>cpu_irq_save</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, udi_cdc.o(i.cpu_irq_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cpu_irq_save
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_get_nb_received_data
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_multi_write_buf
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_multi_read_buf
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_multi_get_free_tx_buffer
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_tx_send
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_rx_start
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_ctrl_state_change
</UL>

<P><STRONG><a name="[4bf]"></a>udi_cdc_ctrl_state_change</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, udi_cdc.o(i.udi_cdc_ctrl_state_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = udi_cdc_ctrl_state_change &rArr; udd_ep_run &rArr; udd_ep_in_sent
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_run
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_signal_overrun
</UL>

<P><STRONG><a name="[4c2]"></a>udi_cdc_ctrl_state_notify</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, udi_cdc.o(i.udi_cdc_ctrl_state_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = udi_cdc_ctrl_state_notify &rArr; udd_ep_run &rArr; udd_ep_in_sent
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_run
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_serial_state_msg_sent
</UL>

<P><STRONG><a name="[fb]"></a>udi_cdc_data_received</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, udi_cdc.o(i.udi_cdc_data_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = udi_cdc_data_received &rArr; udi_cdc_rx_start &rArr; usb_wrp_cdc_rx_notify &rArr; udi_cdc_read_buf &rArr; udi_cdc_multi_read_buf &rArr;  udi_cdc_rx_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_run
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_rx_start
</UL>
<BR>[Address Reference Count : 2]<UL><LI> udi_cdc.o(i.udi_cdc_data_received)
<LI> udi_cdc.o(i.udi_cdc_rx_start)
</UL>
<P><STRONG><a name="[fc]"></a>udi_cdc_data_sent</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, udi_cdc.o(i.udi_cdc_data_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = udi_cdc_data_sent &rArr; udi_cdc_tx_send &rArr; udd_ep_run &rArr; udd_ep_in_sent
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_tx_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udi_cdc.o(i.udi_cdc_tx_send)
</UL>
<P><STRONG><a name="[f9]"></a>udi_cdc_line_coding_received</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udi_cdc.o(i.udi_cdc_line_coding_received))
<BR><BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_cdc_set_coding_ext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udi_cdc.o(i.udi_cdc_comm_setup)
</UL>
<P><STRONG><a name="[4c5]"></a>udi_cdc_rx_start</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, udi_cdc.o(i.udi_cdc_rx_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = udi_cdc_rx_start &rArr; usb_wrp_cdc_rx_notify &rArr; udi_cdc_read_buf &rArr; udi_cdc_multi_read_buf &rArr;  udi_cdc_rx_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_wrp_cdc_rx_notify
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_run
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_multi_read_buf
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_data_enable
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_data_received
</UL>

<P><STRONG><a name="[fa]"></a>udi_cdc_serial_state_msg_sent</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, udi_cdc.o(i.udi_cdc_serial_state_msg_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = udi_cdc_serial_state_msg_sent &rArr; udi_cdc_ctrl_state_notify &rArr; udd_ep_run &rArr; udd_ep_in_sent
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_ctrl_state_notify
</UL>
<BR>[Address Reference Count : 2]<UL><LI> udi_cdc.o(i.udi_cdc_ctrl_state_change)
<LI> udi_cdc.o(i.udi_cdc_ctrl_state_notify)
</UL>
<P><STRONG><a name="[4c4]"></a>udi_cdc_tx_send</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, udi_cdc.o(i.udi_cdc_tx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = udi_cdc_tx_send &rArr; udd_ep_run &rArr; udd_ep_in_sent
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_is_high_speed
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_get_micro_frame_number
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_get_frame_number
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udd_ep_run
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_data_sof_notify
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_data_enable
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_cdc_data_sent
</UL>

<P><STRONG><a name="[142]"></a>MibResetInternal</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, macmib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MibResetInternal &rArr; Random32 &rArr; platform_random_32
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random32
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMibInitialize
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMibReset
</UL>

<P><STRONG><a name="[15d]"></a>CreateToneMapResponse</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, macsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CreateToneMapResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_6
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowMacSnifferIndication
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowRxIndication
</UL>

<P><STRONG><a name="[15e]"></a>DecodeToneMapResponseFcc</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, macsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DecodeToneMapResponseFcc
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsInByte
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleToneMapResponse
</UL>

<P><STRONG><a name="[15f]"></a>BitsInByte</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, macsublayer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleToneMapResponse
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeToneMapResponseFcc
</UL>

<P><STRONG><a name="[161]"></a>HandleToneMapResponse</STRONG> (Thumb, 1072 bytes, Stack size 216 bytes, macsublayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = HandleToneMapResponse &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMlmeGetRequestSync
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsInByte
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeToneMapResponseFcc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_6
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibGetNeighbourEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowRxIndication
</UL>

<P><STRONG><a name="[44]"></a>_PathDiscovery_TimerExpired_Callback</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _PathDiscovery_TimerExpired_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Unregister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protoloadng.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>_PathDiscovery_Callback_MAC_DataConfirm</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _PathDiscovery_Callback_MAC_DataConfirm &rArr; Timer_Register
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Unregister
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protoloadng.o(.text)
</UL>
<P><STRONG><a name="[170]"></a>_IsBlacklisted</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _IsBlacklisted &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_RouteExists
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRouteAndMediaType
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_RREP
</UL>

<P><STRONG><a name="[175]"></a>_Encode_PREQ</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _Encode_PREQ
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_LoByte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_HiByte
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DiscoverPath
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
</UL>

<P><STRONG><a name="[17c]"></a>_Encode_RREQ</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Encode_RREQ
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_LoByte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_HiByte
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_RREP
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute_Callback_MAC_DataConfirm
</UL>

<P><STRONG><a name="[47]"></a>_DiscoverRoute_Callback_MAC_DataConfirm</STRONG> (Thumb, 178 bytes, Stack size 160 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296 + Unknown Stack Size
<LI>Call Chain = _DiscoverRoute_Callback_MAC_DataConfirm &rArr; _RouteEstablished &rArr; AdpCommon_PurgeProcessingQueue &rArr; Routing_NotifyRouteError &rArr; LOADNG_NotifyRouteError &rArr; _GenerateRouteError &rArr; _RREQRERRWait_FindEmptyQueueSlot &rArr;  _GenerateRouteError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Register
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DeleteRoute
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_CMD_Loadng
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpShortAddress
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpNetTraversalTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_DataRequestHelper
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteEstablished
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode_RREQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protoloadng.o(.text)
</UL>
<P><STRONG><a name="[186]"></a>_DiscoverRoute</STRONG> (Thumb, 206 bytes, Stack size 176 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = _DiscoverRoute &rArr;  _RREQRERRWait_FindEmptyQueueSlot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Push
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsRegistered
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_RouteExists
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRouteAndMediaType
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_CMD_Loadng
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpShortAddress
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_DataRequestHelper
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RREQRERRWait_FindEmptyQueueSlot
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode_RREQ
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DiscoverRoute
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute_TimerExpired_Callback
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RREQRERRWait_FindEmptyQueueSlot
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RREQRERRWait_TimerExpired_Callback
</UL>

<P><STRONG><a name="[46]"></a>_RREQRERRWait_TimerExpired_Callback</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = _RREQRERRWait_TimerExpired_Callback &rArr; _GenerateRouteError &rArr; _RREQRERRWait_FindEmptyQueueSlot &rArr;  _GenerateRouteError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Pop
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_8
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GenerateRouteError
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protoloadng.o(.text)
</UL>
<P><STRONG><a name="[188]"></a>_RREQRERRWait_FindEmptyQueueSlot</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = _RREQRERRWait_FindEmptyQueueSlot &rArr;  _GenerateRouteError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Pop
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_8
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GenerateRouteError
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GenerateRouteError
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute
</UL>

<P><STRONG><a name="[48]"></a>_RouteErrorGeneration_Callback_MAC_DataConfirm</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _RouteErrorGeneration_Callback_MAC_DataConfirm &rArr; Timer_Register
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protoloadng.o(.text)
</UL>
<P><STRONG><a name="[18b]"></a>_GenerateRouteError</STRONG> (Thumb, 318 bytes, Stack size 152 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = _GenerateRouteError &rArr; _RREQRERRWait_FindEmptyQueueSlot &rArr;  _GenerateRouteError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Push
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsRegistered
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_RouteExists
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRouteAndMediaType
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_CMD_Loadng
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_DataRequestHelper
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode_RERR
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RREQRERRWait_FindEmptyQueueSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_NotifyRouteError
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RREQRERRWait_FindEmptyQueueSlot
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RREQRERRWait_TimerExpired_Callback
</UL>

<P><STRONG><a name="[4d]"></a>_RouteErrorForward_Callback_MAC_DataConfirm</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protoloadng.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> protoloadng.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>_DiscoverRoute_TimerExpired_Callback</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = _DiscoverRoute_TimerExpired_Callback &rArr; _RouteEstablished &rArr; AdpCommon_PurgeProcessingQueue &rArr; Routing_NotifyRouteError &rArr; LOADNG_NotifyRouteError &rArr; _GenerateRouteError &rArr; _RREQRERRWait_FindEmptyQueueSlot &rArr;  _GenerateRouteError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteEstablished
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protoloadng.o(.text)
</UL>
<P><STRONG><a name="[191]"></a>_Encode_PREP</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Encode_PREP
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_LoByte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_HiByte
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PathForward_Callback_MAC_DataConfirm
</UL>

<P><STRONG><a name="[193]"></a>_GetRouteEntryFromRoutingSet</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GetRouteEntryFromRoutingSet &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPastCmp
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_RREP
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_TimerExpired_Callback
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteDiscover_Callback_MAC_DataConfirm
</UL>

<P><STRONG><a name="[4a]"></a>_RouteDiscover_Callback_MAC_DataConfirm</STRONG> (Thumb, 476 bytes, Stack size 160 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = _RouteDiscover_Callback_MAC_DataConfirm &rArr; LOADNG_DeleteRoute &rArr; GetAdpCoordShortAddress &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Register
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetRcCoordSync
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SignedSysGetUpTimeTenthsSeconds
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DeleteRoute
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_AddRouteEntry
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_AddBlacklistOnMedium
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpMaxHops
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpCoordShortAddress
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_DataRequestHelper
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessSuccessfulRREPConfirm
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRouteEntryFromRoutingSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protoloadng.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>_PathForward_Callback_MAC_DataConfirm</STRONG> (Thumb, 178 bytes, Stack size 168 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = _PathForward_Callback_MAC_DataConfirm &rArr; AdpMac_DataRequestHelper &rArr; AdpMac_DataRequest &rArr; HyALDataRequest &rArr; MacWrapperMcpsDataRequestRF &rArr; LogBuffer &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_RouteExists
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRouteAndMediaType
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_AddBlacklistOnMedium
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_CMD_Loadng
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpShortAddress
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_DataRequestHelper
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode_PREP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protoloadng.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>_Process_RREQ_TimerExpired_Callback</STRONG> (Thumb, 242 bytes, Stack size 184 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = _Process_RREQ_TimerExpired_Callback &rArr; AdpMac_DataRequestHelper &rArr; AdpMac_DataRequest &rArr; HyALDataRequest &rArr; MacWrapperMcpsDataRequestRF &rArr; LogBuffer &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Register
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_CMD_Loadng
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpShortAddress
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpMaxHops
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_DataRequestHelper
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode_RREP
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRouteEntryFromRoutingSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protoloadng.o(.text)
</UL>
<P><STRONG><a name="[196]"></a>_UpdateRoute</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = _UpdateRoute &rArr; GetAdpMaxHops &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetRcCoordSync
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SignedSysGetUpTimeTenthsSeconds
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_AddRouteEntry
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpMaxHops
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpCoordShortAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_RREP
</UL>

<P><STRONG><a name="[198]"></a>_AddRouteToRoutingSet</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = _AddRouteToRoutingSet &rArr; GetAdpMaxHops &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SignedSysGetUpTimeTenthsSeconds
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPastCmp
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpMaxHops
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_RREP
</UL>

<P><STRONG><a name="[199]"></a>_Process_RREQ_RREP</STRONG> (Thumb, 1336 bytes, Stack size 192 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = _Process_RREQ_RREP &rArr; _UpdateRoute &rArr; GetAdpMaxHops &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Unregister
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Register
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetRcCoordSync
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SignedSysGetUpTimeTenthsSeconds
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsRegistered
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_IsInDestinationAddressSet
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRouteEntry
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_WeakLinkAdjust
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_CMD_Loadng
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpShortAddress
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpRcCoord
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpCoordShortAddress
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_DataRequestHelper
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode_RREP
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddRouteToRoutingSet
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateRoute
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRouteEntryFromRoutingSet
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode_RREQ
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsBlacklisted
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
</UL>

<P><STRONG><a name="[19d]"></a>_ProcessMessage</STRONG> (Thumb, 2424 bytes, Stack size 768 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = _ProcessMessage &rArr;  _ProcessMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Unregister
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_MakeWord
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_LoByte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_HiByte
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_RouteExists
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_IsInDestinationAddressSet
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRouteEntry
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRouteAndMediaType
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_DeleteRoute
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_MetricSupported
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoLoadNg_RouteCost_GetLinkCost
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_CMD_Loadng
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNeighbourPhaseDiff
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpShortAddress
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpCoordShortAddress
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateAdpPREQIndication
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_DataRequestHelper
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetPendingDataIndicationShortAddr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode_RERR
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_RREP
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode_PREP
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode_PREQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_ProcessMessage
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
</UL>

<P><STRONG><a name="[184]"></a>_RouteEstablished</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = _RouteEstablished &rArr; AdpCommon_PurgeProcessingQueue &rArr; Routing_NotifyRouteError &rArr; LOADNG_NotifyRouteError &rArr; _GenerateRouteError &rArr; _RREQRERRWait_FindEmptyQueueSlot &rArr;  _GenerateRouteError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Unregister
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_GetRouteEntry
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpCommon_PurgeProcessingQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute_TimerExpired_Callback
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DiscoverRoute_Callback_MAC_DataConfirm
</UL>

<P><STRONG><a name="[18d]"></a>_Encode_RERR</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _Encode_RERR
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_LoByte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_HiByte
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMessage
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GenerateRouteError
</UL>

<P><STRONG><a name="[195]"></a>_Encode_RREP</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Encode_RREP
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_LoByte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_HiByte
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_RREP
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Process_RREQ_TimerExpired_Callback
</UL>

<P><STRONG><a name="[1a5]"></a>_ExtractMetricType</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, protoloadng.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_ProcessMessage
</UL>

<P><STRONG><a name="[194]"></a>_ProcessSuccessfulRREPConfirm</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, protoloadng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = _ProcessSuccessfulRREPConfirm &rArr; GetAdpMaxHops &rArr; AdpGetRequestSync &rArr; AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_SetRcCoordSync
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SignedSysGetUpTimeTenthsSeconds
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADNG_AddRouteEntry
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpMaxHops
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdpCoordShortAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteDiscover_Callback_MAC_DataConfirm
</UL>

<P><STRONG><a name="[1ba]"></a>MibResetInternalRF</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, macrfmib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MibResetInternalRF &rArr; Random32 &rArr; platform_random_32
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random32
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMibInitializeRF
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacMibResetRF
</UL>

<P><STRONG><a name="[4f]"></a>_Callback_DataSend</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adpdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Callback_DataSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adpdata.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>_Callback_MAC_BeaconNotifyIndication</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adpdiscovery.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> adpdiscovery.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>_Callback_MAC_ScanConfirm</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, adpdiscovery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Callback_MAC_ScanConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adpdiscovery.o(.text)
</UL>
<P><STRONG><a name="[210]"></a>AdpGetMib</STRONG> (Thumb, 1838 bytes, Stack size 208 bytes, adpgetset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = AdpGetMib &rArr; _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SignedSysGetUpTimeTenthsSeconds
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SignedSysGetUpTime10Seconds
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast10Seconds
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALGetRequestSync
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALGetNeighbourTableSize
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_IsDisabled
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_GetRouteEntry
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoutingGetMib
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetNeighbourLQI
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetRequestSync
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetRequest
</UL>

<P><STRONG><a name="[219]"></a>AdpSetMib</STRONG> (Thumb, 1720 bytes, Stack size 56 bytes, adpgetset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2472 + Unknown Stack Size
<LI>Call Chain = AdpSetMib &rArr; BootstrapWrapper_InitEapPsk &rArr; LBP_InitEapPsk &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SignedSysGetUpTimeTenthsSeconds
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SignedSysGetUpTime10Seconds
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_IsDisabled
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_AdpRREPWait
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoutingSetMib
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootstrapWrapper_InitEapPsk
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_RegisterDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpSetRequestSync
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpSetRequest
</UL>

<P><STRONG><a name="[214]"></a>_GetNeighbourLQI</STRONG> (Thumb, 142 bytes, Stack size 184 bytes, adpgetset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = _GetNeighbourLQI &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALGetRequestSync
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALGetNeighbourTableSize
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpGetMib
</UL>

<P><STRONG><a name="[52]"></a>_Lbp_Callback_DataSend</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adplbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Lbp_Callback_DataSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adplbp.o(.text)
</UL>
<P><STRONG><a name="[222]"></a>_ConvertAddress_Mac2Adp</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, adpmacinterface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALDataIndication
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALCommStatusIndication
</UL>

<P><STRONG><a name="[5b]"></a>_Callback_HyALCommStatusIndication</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _Callback_HyALCommStatusIndication
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ConvertAddress_Mac2Adp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adpmacinterface.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>_Callback_HyALStartConfirm</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adpmacinterface.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> adpmacinterface.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>_Callback_HyALScanConfirm</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adpmacinterface.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> adpmacinterface.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>_Callback_HyALBeaconNotify</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, adpmacinterface.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> adpmacinterface.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>_Callback_HyALResetConfirm</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, adpmacinterface.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> adpmacinterface.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>_Callback_HyALSetConfirm</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adpmacinterface.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> adpmacinterface.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>_Callback_HyALGetConfirm</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adpmacinterface.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> adpmacinterface.o(.text)
</UL>
<P><STRONG><a name="[225]"></a>_CalculateSubCarriers</STRONG> (Thumb, 176 bytes, Stack size 52 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _CalculateSubCarriers
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALDataIndication
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_GetNeighbourDescriptorSync
</UL>

<P><STRONG><a name="[54]"></a>_Callback_HyALDataIndication</STRONG> (Thumb, 418 bytes, Stack size 176 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = _Callback_HyALDataIndication &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyALGetRequestSync
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ConvertModulation
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ComputeActiveTones
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalculateSubCarriers
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ConvertAddress_Mac2Adp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adpmacinterface.o(.text)
</UL>
<P><STRONG><a name="[53]"></a>_Callback_HyALDataConfirm</STRONG> (Thumb, 122 bytes, Stack size 4 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _Callback_HyALDataConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adpmacinterface.o(.text)
</UL>
<P><STRONG><a name="[224]"></a>_ComputeActiveTones</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ComputeActiveTones
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALDataIndication
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_GetNeighbourDescriptorSync
</UL>

<P><STRONG><a name="[223]"></a>_ConvertModulation</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, adpmacinterface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_HyALDataIndication
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_GetNeighbourDescriptorSync
</UL>

<P><STRONG><a name="[228]"></a>_ProcessMacNotifications</STRONG> (Thumb, 532 bytes, Stack size 48 bytes, adpmacinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3920 + Unknown Stack Size
<LI>Call Chain = _ProcessMacNotifications &rArr; ADP_ProcessIncomingMessage &rArr; BootstrapWrapper_ProcessMessage &rArr; LBP_ProcessMessage &rArr; _Join_Process_Challenge &rArr; _Join_Process_Challenge_ThirdMessage &rArr; _ProcessParameters &rArr; AdpSetRequestSync &rArr; AdpSetMib &rArr; BootstrapWrapper_InitEapPsk &rArr; LBP_InitEapPsk &rArr; EAP_PSK_Initialize &rArr; aes_wrapper_aes_setkey_enc &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_ProcessIncomingMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_EventHandler
</UL>

<P><STRONG><a name="[5c]"></a>_Start_Callback_MAC_StartConfirm</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, adpnetwork.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Start_Callback_MAC_StartConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adpnetwork.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>_Kick_Callback_AdpMac_ResetConfirm</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, adpnetwork.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = _Kick_Callback_AdpMac_ResetConfirm &rArr; Routing_SetDiscoverRouteGlobalSeqNo &rArr; LOADNG_SetMib &rArr;  AdpSetRequestSync (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_SetDiscoverRouteGlobalSeqNo
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_IsDisabled
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_GetDiscoverRouteGlobalSeqNo
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adpnetwork.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>_Kick_TimerExpired_Callback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adpnetwork.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = _Kick_TimerExpired_Callback &rArr; AdpMac_ResetRequest &rArr; HyALResetRequest &rArr; MacWrapperMlmeResetRequest &rArr; MacMlmeResetRequest &rArr; MacLowResetRequest &rArr; MacRtResetRequest &rArr; pl360_g3_coup_tx_config
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_ResetRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adpnetwork.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>_Leave_Callback_AdpMac_ResetConfirm</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, adpnetwork.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = _Leave_Callback_AdpMac_ResetConfirm &rArr; Routing_SetDiscoverRouteGlobalSeqNo &rArr; LOADNG_SetMib &rArr;  AdpSetRequestSync (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_SetDiscoverRouteGlobalSeqNo
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_IsDisabled
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_GetDiscoverRouteGlobalSeqNo
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adpnetwork.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>_PathDiscovery_Callback</STRONG> (Thumb, 116 bytes, Stack size 288 bytes, adppathdiscovery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = _PathDiscovery_Callback &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adppathdiscovery.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>_Callback_AdpMac_ResetConfirm</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, adpreset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = _Callback_AdpMac_ResetConfirm &rArr; ADP_Reset &rArr; Routing_Reset &rArr; LOADNG_Reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADP_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adpreset.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>_RouteDiscovery_DiscoverRoute_Callback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, adproutediscovery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _RouteDiscovery_DiscoverRoute_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adproutediscovery.o(.text)
</UL>
<P><STRONG><a name="[251]"></a>GetDsnEntry</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, maclow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetDsnEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
</UL>

<P><STRONG><a name="[259]"></a>EncodeMhr</STRONG> (Thumb, 286 bytes, Stack size 0 bytes, maclow.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSecurityDecrypt
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequest
</UL>

<P><STRONG><a name="[252]"></a>ProcessDataFrame</STRONG> (Thumb, 1506 bytes, Stack size 112 bytes, maclow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = ProcessDataFrame &rArr; MacSecurityDecrypt &rArr; cipher_wrapper_ccm_auth_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; mbedtls_ccm_star_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtGetToneMapResponseData
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSecurityDecrypt
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDsnEntry
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowCommStatusIndication
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowMacSnifferIndication
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowRxIndication
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibGetDeviceEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtCbProcessFrame
</UL>

<P><STRONG><a name="[12]"></a>MacRtCbProcessFrame</STRONG> (Thumb, 626 bytes, Stack size 56 bytes, maclow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = MacRtCbProcessFrame &rArr; ProcessDataFrame &rArr; MacSecurityDecrypt &rArr; cipher_wrapper_ccm_auth_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; mbedtls_ccm_star_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibGetPOSEntry
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibGetNeighbourEntry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maclow.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>MacRtCbPlmeGetConfirm</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, maclow.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> maclow.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>MacRtCbTxConfirm</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, maclow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MacRtCbTxConfirm &rArr; SendTxConfirm &rArr; MacLowTxConfirm
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTxConfirm
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibGetNeighbourEntry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maclow.o(.data)
</UL>
<P><STRONG><a name="[254]"></a>MacSecurityDecrypt</STRONG> (Thumb, 454 bytes, Stack size 168 bytes, maclow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = MacSecurityDecrypt &rArr; cipher_wrapper_ccm_auth_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; mbedtls_ccm_star_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_ccm_setkey
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_ccm_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_ccm_free
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_ccm_auth_decrypt
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeMhr
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
</UL>

<P><STRONG><a name="[258]"></a>CreateFrameHeader</STRONG> (Thumb, 288 bytes, Stack size 12 bytes, maclow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CreateFrameHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequest
</UL>

<P><STRONG><a name="[257]"></a>SendTxConfirm</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, maclow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SendTxConfirm &rArr; MacLowTxConfirm
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacRtCbTxConfirm
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequest
</UL>

<P><STRONG><a name="[270]"></a>EncodeMhr</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, macrflow.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequestRF
</UL>

<P><STRONG><a name="[26a]"></a>MacSecurityEncrypt</STRONG> (Thumb, 316 bytes, Stack size 184 bytes, macrflow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = MacSecurityEncrypt &rArr; cipher_wrapper_ccm_encrypt_and_tag &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_ccm_setkey
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_ccm_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_ccm_free
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_ccm_encrypt_and_tag
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequestRF
</UL>

<P><STRONG><a name="[26f]"></a>CreateFrameHeader</STRONG> (Thumb, 378 bytes, Stack size 12 bytes, macrflow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CreateFrameHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequestRF
</UL>

<P><STRONG><a name="[15]"></a>PalRFCbDataConfirm</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, macrflow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PalRFCbDataConfirm &rArr; DutyCycleUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutyCycleUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> macrflow.o(.data)
</UL>
<P><STRONG><a name="[26c]"></a>ProcessDataFrame</STRONG> (Thumb, 1694 bytes, Stack size 88 bytes, macrflow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = ProcessDataFrame &rArr; MacSecurityDecrypt &rArr; cipher_wrapper_ccm_auth_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; mbedtls_ccm_star_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfTxRequest
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfTxCancel
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSecurityDecrypt
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeIE
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRFCbDataConfirm
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFrameHeader
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSecurityEncrypt
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeMhr
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowCommStatusIndicationRF
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowMacSnifferIndicationRF
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowRxIndicationRF
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibGetDeviceEntryRF
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibGetPOSEntryRF
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractFrameFromPsdu
</UL>

<P><STRONG><a name="[275]"></a>ExtractFrameFromPsdu</STRONG> (Thumb, 934 bytes, Stack size 48 bytes, macrflow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = ExtractFrameFromPsdu &rArr; ProcessDataFrame &rArr; MacSecurityDecrypt &rArr; cipher_wrapper_ccm_auth_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; mbedtls_ccm_star_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePOSTableRF
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRFCbDataIndication
</UL>

<P><STRONG><a name="[16]"></a>PalRFCbDataIndication</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, macrflow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = PalRFCbDataIndication &rArr; ExtractFrameFromPsdu &rArr; ProcessDataFrame &rArr; MacSecurityDecrypt &rArr; cipher_wrapper_ccm_auth_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; mbedtls_ccm_star_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractFrameFromPsdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> macrflow.o(.data)
</UL>
<P><STRONG><a name="[271]"></a>EncodeIE</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, macrflow.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequestRF
</UL>

<P><STRONG><a name="[273]"></a>MacSecurityDecrypt</STRONG> (Thumb, 490 bytes, Stack size 184 bytes, macrflow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = MacSecurityDecrypt &rArr; cipher_wrapper_ccm_auth_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; mbedtls_ccm_star_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mask &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_ccm_setkey
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_ccm_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_ccm_free
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher_wrapper_ccm_auth_decrypt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFrame
</UL>

<P><STRONG><a name="[26b]"></a>DutyCycleUpdate</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, macrflow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DutyCycleUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRFCbDataConfirm
</UL>

<P><STRONG><a name="[276]"></a>UpdatePOSTableRF</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, macrflow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UpdatePOSTableRF &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MibGetPOSEntryRF
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractFrameFromPsdu
</UL>

<P><STRONG><a name="[277]"></a>SendTxConfirm</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, macrflow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SendTxConfirm &rArr; MacLowTxConfirmRF
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxConfirmRF
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTxRequest
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowTxRequestRF
</UL>

<P><STRONG><a name="[27b]"></a>ProcessTxRequest</STRONG> (Thumb, 546 bytes, Stack size 32 bytes, macrflow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProcessTxRequest &rArr; PalRfTxRequest &rArr; at86rf_tx_req &rArr; _tx_param_cfg &rArr; rf215_bbc_upd_tx_params &rArr; rf215_fe_set_txpwr &rArr; rf215_trx_switch_trxoff &rArr; rf215_tx_rx_check_aborts &rArr; _tx_abort &rArr; _tx_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfTxRequest
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRfGetPhyTime
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oss_get_up_time_ms
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random32
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTxConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacLowEventHandlerRF
</UL>

<P><STRONG><a name="[284]"></a>_DataSendCallbackHelper</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, adpcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _DataSendCallbackHelper &rArr; _CheckBufferIndicationCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckBufferIndicationCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpCommon_PurgeFullProcessingQueue
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpCommon_CheckProcessingQueue
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteRepair_Callback
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartSend
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteDiscover_Callback
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MAC_DataConfirm
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpCommon_ProcessSendQueue
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpCommon_PurgeProcessingQueue
</UL>

<P><STRONG><a name="[285]"></a>_ExecuteSendNextFragment</STRONG> (Thumb, 346 bytes, Stack size 480 bytes, adpcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = _ExecuteSendNextFragment &rArr; Routing_GetRoute &rArr; LOADNG_GetRoute &rArr; GetAdpShortAddress &rArr; AdpMacGetRequestSync &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_RouteExists
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_IsDisabled
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_GetRoute
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Sizeof_MeshHeader
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Sizeof_FragNHeader
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Sizeof_BroadcastHeader
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_MeshHeader
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_FragNHeader
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_Broadcast
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBroadcastLogTable
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSecurity
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_DataRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteRepair_Callback
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_MAC_DataConfirm
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Callback_FragTimer
</UL>

<P><STRONG><a name="[64]"></a>_Callback_FragTimer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adpcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = _Callback_FragTimer &rArr; _ExecuteSendNextFragment &rArr; Routing_GetRoute &rArr; LOADNG_GetRoute &rArr; GetAdpShortAddress &rArr; AdpMacGetRequestSync &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSendNextFragment
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adpcommon.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>_Callback_MAC_DataConfirm</STRONG> (Thumb, 466 bytes, Stack size 32 bytes, adpcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = _Callback_MAC_DataConfirm &rArr; _ExecuteSendNextFragment &rArr; Routing_GetRoute &rArr; LOADNG_GetRoute &rArr; GetAdpShortAddress &rArr; AdpMacGetRequestSync &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Register
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_RemoveBlacklistOnMedium
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_RefreshRoute
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_IsDisabled
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_IsAutoRREQDisabled
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_GetRouteEntry
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_DiscoverRoute
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_DeleteRoute
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_AddBlacklistOnMedium
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSendNextFragment
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DataSendCallbackHelper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adpcommon.o(.text)
</UL>
<P><STRONG><a name="[292]"></a>_ExecuteSend</STRONG> (Thumb, 504 bytes, Stack size 480 bytes, adpcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = _ExecuteSend &rArr; Routing_GetRoute &rArr; LOADNG_GetRoute &rArr; GetAdpShortAddress &rArr; AdpMacGetRequestSync &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random16Ex
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_RouteExists
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_IsDisabled
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_GetRoute
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Sizeof_MeshHeader
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Sizeof_IPv6Header
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Sizeof_Frag1Header
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Sizeof_BroadcastHeader
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_MeshHeader
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_IPv6
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_Frag1Header
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoWPAN_Encode_Broadcast
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_CompressHeader
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSecurity
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpMac_DataRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteRepair_Callback
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartSend
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RouteDiscover_Callback
</UL>

<P><STRONG><a name="[66]"></a>_RouteDiscover_Callback</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, adpcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = _RouteDiscover_Callback &rArr; _ExecuteSend &rArr; Routing_GetRoute &rArr; LOADNG_GetRoute &rArr; GetAdpShortAddress &rArr; AdpMacGetRequestSync &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_GetRouteAndMediaType
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSend
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DataSendCallbackHelper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adpcommon.o(.text)
</UL>
<P><STRONG><a name="[299]"></a>_StartSend</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, adpcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = _StartSend &rArr; _ExecuteSend &rArr; Routing_GetRoute &rArr; LOADNG_GetRoute &rArr; GetAdpShortAddress &rArr; AdpMacGetRequestSync &rArr; HyALGetRequestSync &rArr; MacWrapperMlmeGetRequestSync &rArr; MacMlmeGetRequestSync &rArr; MacRtGetRequestSync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_RouteExists
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_IsDisabled
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_IsAutoRREQDisabled
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_GetRouteAndMediaType
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_GetRoute
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_DiscoverRoute
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBroadcastLogTable
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSend
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DataSendCallbackHelper
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchBroadcastLogTable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpCommon_ProcessSendQueue
</UL>

<P><STRONG><a name="[283]"></a>_CheckBufferIndicationCondition</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, adpcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _CheckBufferIndicationCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DataSendCallbackHelper
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdpCommon_DataSendEx
</UL>

<P><STRONG><a name="[28d]"></a>_GetSecurity</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, adpcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetSecurity
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSendNextFragment
</UL>

<P><STRONG><a name="[65]"></a>_RouteRepair_Callback</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, adpcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = _RouteRepair_Callback &rArr; Routing_NotifyRouteError &rArr; LOADNG_NotifyRouteError &rArr; _GenerateRouteError &rArr; _RREQRERRWait_FindEmptyQueueSlot &rArr;  _GenerateRouteError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_RouteExists
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_NotifyRouteError
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Routing_GetRouteAndMediaType
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecuteSendNextFragment
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DataSendCallbackHelper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adpcommon.o(.text)
</UL>
<P><STRONG><a name="[2a0]"></a>_UDP_ComputeChk</STRONG> (Thumb, 204 bytes, Stack size 28 bytes, protorfc6282.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _UDP_ComputeChk
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Decompress_NextHeaders
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_RepairHeader
</UL>

<P><STRONG><a name="[2a1]"></a>_Decompress_NextHeaders</STRONG> (Thumb, 716 bytes, Stack size 56 bytes, protorfc6282.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + In Cycle
<LI>Call Chain = _Decompress_NextHeaders &rArr;  _Decompress_NextHeaders (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_MakeWord
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Decompress_NextHeaders
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UDP_ComputeChk
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Decompress_NextHeaders
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_DecompressHeader
</UL>

<P><STRONG><a name="[2a2]"></a>_Decompress_Address_Stateful</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, protorfc6282.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _Decompress_Address_Stateful
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_LoByte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_HiByte
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_DecompressHeader
</UL>

<P><STRONG><a name="[2a3]"></a>_Decompress_Address_Stateless</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, protorfc6282.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _Decompress_Address_Stateless
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_LoByte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_HiByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_DecompressHeader
</UL>

<P><STRONG><a name="[2a4]"></a>_Compress_IPv6Extension</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, protorfc6282.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _Compress_IPv6Extension
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_CompressHeader
</UL>

<P><STRONG><a name="[2a5]"></a>_Compress_Address</STRONG> (Thumb, 570 bytes, Stack size 96 bytes, protorfc6282.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _Compress_Address &rArr; Timer_IsPast
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsPast
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_LoByte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_HiByte
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_CompressHeader
</UL>

<P><STRONG><a name="[4eb]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[4df]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[2cb]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[68]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
